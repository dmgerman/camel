begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.main
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EventNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Class for main implementations to allow starting up a JVM with Camel embedded.  */
end_comment

begin_class
DECL|class|MainSupport
specifier|public
specifier|abstract
class|class
name|MainSupport
extends|extends
name|BaseMainSupport
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MainSupport
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|UNINITIALIZED_EXIT_CODE
specifier|protected
specifier|static
specifier|final
name|int
name|UNINITIALIZED_EXIT_CODE
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
DECL|field|DEFAULT_EXIT_CODE
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_EXIT_CODE
init|=
literal|0
decl_stmt|;
DECL|field|exitCode
specifier|protected
specifier|final
name|AtomicInteger
name|exitCode
init|=
operator|new
name|AtomicInteger
argument_list|(
name|UNINITIALIZED_EXIT_CODE
argument_list|)
decl_stmt|;
DECL|field|latch
specifier|protected
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|/**      * A class for intercepting the hang up signal and do a graceful shutdown of the Camel.      */
DECL|class|HangupInterceptor
specifier|private
specifier|static
specifier|final
class|class
name|HangupInterceptor
extends|extends
name|Thread
block|{
DECL|field|log
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|mainInstance
specifier|final
name|MainSupport
name|mainInstance
decl_stmt|;
DECL|method|HangupInterceptor (MainSupport main)
name|HangupInterceptor
parameter_list|(
name|MainSupport
name|main
parameter_list|)
block|{
name|mainInstance
operator|=
name|main
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Received hang up - stopping the main instance."
argument_list|)
expr_stmt|;
try|try
block|{
name|mainInstance
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error during stopping the main instance."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|MainSupport (Class... configurationClasses)
specifier|protected
name|MainSupport
parameter_list|(
name|Class
modifier|...
name|configurationClasses
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|addConfigurationClass
argument_list|(
name|configurationClasses
argument_list|)
expr_stmt|;
block|}
DECL|method|MainSupport ()
specifier|protected
name|MainSupport
parameter_list|()
block|{     }
comment|/**      * Runs this process with the given arguments, and will wait until completed, or the JVM terminates.      */
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|completed
operator|.
name|get
argument_list|()
condition|)
block|{
name|internalBeforeStart
argument_list|()
expr_stmt|;
comment|// if we have an issue starting then propagate the exception to caller
name|beforeStart
argument_list|()
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|afterStart
argument_list|()
expr_stmt|;
name|waitUntilCompleted
argument_list|()
expr_stmt|;
name|internalBeforeStop
argument_list|()
expr_stmt|;
name|beforeStop
argument_list|()
expr_stmt|;
name|stop
argument_list|()
expr_stmt|;
name|afterStop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// however while running then just log errors
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed: {}"
argument_list|,
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Disable the hangup support. No graceful stop by calling stop() on a      * Hangup signal.      */
DECL|method|disableHangupSupport ()
specifier|public
name|void
name|disableHangupSupport
parameter_list|()
block|{
name|mainConfigurationProperties
operator|.
name|setHangupInterceptorEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Hangup support is enabled by default.      */
DECL|method|enableHangupSupport ()
specifier|public
name|void
name|enableHangupSupport
parameter_list|()
block|{
name|mainConfigurationProperties
operator|.
name|setHangupInterceptorEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Callback to run custom logic before CamelContext is being started.      *<p/>      * It is recommended to use {@link org.apache.camel.main.MainListener} instead.      */
DECL|method|beforeStart ()
specifier|protected
name|void
name|beforeStart
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|MainListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|beforeStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Callback to run custom logic after CamelContext has been started.      *<p/>      * It is recommended to use {@link org.apache.camel.main.MainListener} instead.      */
DECL|method|afterStart ()
specifier|protected
name|void
name|afterStart
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|MainListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|afterStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|internalBeforeStart ()
specifier|private
name|void
name|internalBeforeStart
parameter_list|()
block|{
if|if
condition|(
name|mainConfigurationProperties
operator|.
name|isHangupInterceptorEnabled
argument_list|()
condition|)
block|{
name|String
name|threadName
init|=
name|ThreadHelper
operator|.
name|resolveThreadName
argument_list|(
literal|null
argument_list|,
literal|"CamelHangupInterceptor"
argument_list|)
decl_stmt|;
name|Thread
name|task
init|=
operator|new
name|HangupInterceptor
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|task
operator|.
name|setName
argument_list|(
name|threadName
argument_list|)
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Callback to run custom logic before CamelContext is being stopped.      *<p/>      * It is recommended to use {@link org.apache.camel.main.MainListener} instead.      */
DECL|method|beforeStop ()
specifier|protected
name|void
name|beforeStop
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|MainListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|beforeStop
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Callback to run custom logic after CamelContext has been stopped.      *<p/>      * It is recommended to use {@link org.apache.camel.main.MainListener} instead.      */
DECL|method|afterStop ()
specifier|protected
name|void
name|afterStop
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|MainListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|afterStop
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|internalBeforeStop ()
specifier|private
name|void
name|internalBeforeStop
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|camelTemplate
operator|!=
literal|null
condition|)
block|{
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|camelTemplate
argument_list|)
expr_stmt|;
name|camelTemplate
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error stopping camelTemplate due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|". This exception is ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Marks this process as being completed.      */
DECL|method|completed ()
specifier|public
name|void
name|completed
parameter_list|()
block|{
name|completed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|exitCode
operator|.
name|compareAndSet
argument_list|(
name|UNINITIALIZED_EXIT_CODE
argument_list|,
name|DEFAULT_EXIT_CODE
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|getDuration ()
specifier|public
name|int
name|getDuration
parameter_list|()
block|{
return|return
name|mainConfigurationProperties
operator|.
name|getDurationMaxSeconds
argument_list|()
return|;
block|}
comment|/**      * Sets the duration (in seconds) to run the application until it      * should be terminated. Defaults to -1. Any value<= 0 will run forever.      * @deprecated use {@link #configure()}      */
annotation|@
name|Deprecated
DECL|method|setDuration (int duration)
specifier|public
name|void
name|setDuration
parameter_list|(
name|int
name|duration
parameter_list|)
block|{
name|mainConfigurationProperties
operator|.
name|setDurationMaxSeconds
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|getDurationIdle ()
specifier|public
name|int
name|getDurationIdle
parameter_list|()
block|{
return|return
name|mainConfigurationProperties
operator|.
name|getDurationMaxIdleSeconds
argument_list|()
return|;
block|}
comment|/**      * Sets the maximum idle duration (in seconds) when running the application, and      * if there has been no message processed after being idle for more than this duration      * then the application should be terminated.      * Defaults to -1. Any value<= 0 will run forever.      * @deprecated use {@link #configure()}      */
annotation|@
name|Deprecated
DECL|method|setDurationIdle (int durationIdle)
specifier|public
name|void
name|setDurationIdle
parameter_list|(
name|int
name|durationIdle
parameter_list|)
block|{
name|mainConfigurationProperties
operator|.
name|setDurationMaxIdleSeconds
argument_list|(
name|durationIdle
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|getDurationMaxMessages ()
specifier|public
name|int
name|getDurationMaxMessages
parameter_list|()
block|{
return|return
name|mainConfigurationProperties
operator|.
name|getDurationMaxMessages
argument_list|()
return|;
block|}
comment|/**      * Sets the duration to run the application to process at most max messages until it      * should be terminated. Defaults to -1. Any value<= 0 will run forever.      * @deprecated use {@link #configure()}      */
annotation|@
name|Deprecated
DECL|method|setDurationMaxMessages (int durationMaxMessages)
specifier|public
name|void
name|setDurationMaxMessages
parameter_list|(
name|int
name|durationMaxMessages
parameter_list|)
block|{
name|mainConfigurationProperties
operator|.
name|setDurationMaxMessages
argument_list|(
name|durationMaxMessages
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the exit code for the application if duration was hit      * @deprecated use {@link #configure()}      */
annotation|@
name|Deprecated
DECL|method|setDurationHitExitCode (int durationHitExitCode)
specifier|public
name|void
name|setDurationHitExitCode
parameter_list|(
name|int
name|durationHitExitCode
parameter_list|)
block|{
name|mainConfigurationProperties
operator|.
name|setDurationHitExitCode
argument_list|(
name|durationHitExitCode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|getDurationHitExitCode ()
specifier|public
name|int
name|getDurationHitExitCode
parameter_list|()
block|{
return|return
name|mainConfigurationProperties
operator|.
name|getDurationHitExitCode
argument_list|()
return|;
block|}
DECL|method|getExitCode ()
specifier|public
name|int
name|getExitCode
parameter_list|()
block|{
return|return
name|exitCode
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|isTrace ()
specifier|public
name|boolean
name|isTrace
parameter_list|()
block|{
return|return
name|mainConfigurationProperties
operator|.
name|isTracing
argument_list|()
return|;
block|}
DECL|method|enableTrace ()
specifier|public
name|void
name|enableTrace
parameter_list|()
block|{
name|mainConfigurationProperties
operator|.
name|setTracing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// call completed to properly stop as we count down the waiting latch
name|completed
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|Override
DECL|method|configureLifecycle (CamelContext camelContext)
specifier|protected
name|void
name|configureLifecycle
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|mainConfigurationProperties
operator|.
name|getDurationMaxMessages
argument_list|()
operator|>
literal|0
operator|||
name|mainConfigurationProperties
operator|.
name|getDurationMaxIdleSeconds
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// register lifecycle so we can trigger to shutdown the JVM when maximum number of messages has been processed
name|EventNotifier
name|notifier
init|=
operator|new
name|MainDurationEventNotifier
argument_list|(
name|camelContext
argument_list|,
name|mainConfigurationProperties
operator|.
name|getDurationMaxMessages
argument_list|()
argument_list|,
name|mainConfigurationProperties
operator|.
name|getDurationMaxIdleSeconds
argument_list|()
argument_list|,
name|completed
argument_list|,
name|latch
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// register our event notifier
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|addEventNotifier
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
block|}
comment|// register lifecycle so we are notified in Camel is stopped from JMX or somewhere else
name|camelContext
operator|.
name|addLifecycleStrategy
argument_list|(
operator|new
name|MainLifecycleStrategy
argument_list|(
name|completed
argument_list|,
name|latch
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|waitUntilCompleted ()
specifier|protected
name|void
name|waitUntilCompleted
parameter_list|()
block|{
while|while
condition|(
operator|!
name|completed
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|int
name|idle
init|=
name|mainConfigurationProperties
operator|.
name|getDurationMaxIdleSeconds
argument_list|()
decl_stmt|;
name|int
name|max
init|=
name|mainConfigurationProperties
operator|.
name|getDurationMaxMessages
argument_list|()
decl_stmt|;
name|long
name|sec
init|=
name|mainConfigurationProperties
operator|.
name|getDurationMaxSeconds
argument_list|()
decl_stmt|;
if|if
condition|(
name|sec
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for: {} seconds"
argument_list|,
name|sec
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|(
name|sec
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|exitCode
operator|.
name|compareAndSet
argument_list|(
name|UNINITIALIZED_EXIT_CODE
argument_list|,
name|mainConfigurationProperties
operator|.
name|getDurationHitExitCode
argument_list|()
argument_list|)
expr_stmt|;
name|completed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|idle
operator|>
literal|0
operator|||
name|max
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|idle
operator|>
literal|0
operator|&&
name|max
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting to be idle for: {} seconds or until: {} messages has been processed"
argument_list|,
name|idle
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|idle
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting to be idle for: {} seconds"
argument_list|,
name|idle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting until: {} messages has been processed"
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
name|exitCode
operator|.
name|compareAndSet
argument_list|(
name|UNINITIALIZED_EXIT_CODE
argument_list|,
name|mainConfigurationProperties
operator|.
name|getDurationHitExitCode
argument_list|()
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|completed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// okay something interrupted us so terminate
name|completed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|Option
specifier|public
specifier|abstract
class|class
name|Option
block|{
DECL|field|abbreviation
specifier|private
name|String
name|abbreviation
decl_stmt|;
DECL|field|fullName
specifier|private
name|String
name|fullName
decl_stmt|;
DECL|field|description
specifier|private
name|String
name|description
decl_stmt|;
DECL|method|Option (String abbreviation, String fullName, String description)
specifier|protected
name|Option
parameter_list|(
name|String
name|abbreviation
parameter_list|,
name|String
name|fullName
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|abbreviation
operator|=
literal|"-"
operator|+
name|abbreviation
expr_stmt|;
name|this
operator|.
name|fullName
operator|=
literal|"-"
operator|+
name|fullName
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
DECL|method|processOption (String arg, LinkedList<String> remainingArgs)
specifier|public
name|boolean
name|processOption
parameter_list|(
name|String
name|arg
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
if|if
condition|(
name|arg
operator|.
name|equalsIgnoreCase
argument_list|(
name|abbreviation
argument_list|)
operator|||
name|fullName
operator|.
name|startsWith
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|doProcess
argument_list|(
name|arg
argument_list|,
name|remainingArgs
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getAbbreviation ()
specifier|public
name|String
name|getAbbreviation
parameter_list|()
block|{
return|return
name|abbreviation
return|;
block|}
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
DECL|method|getFullName ()
specifier|public
name|String
name|getFullName
parameter_list|()
block|{
return|return
name|fullName
return|;
block|}
DECL|method|getInformation ()
specifier|public
name|String
name|getInformation
parameter_list|()
block|{
return|return
literal|"  "
operator|+
name|getAbbreviation
argument_list|()
operator|+
literal|" or "
operator|+
name|getFullName
argument_list|()
operator|+
literal|" = "
operator|+
name|getDescription
argument_list|()
return|;
block|}
DECL|method|doProcess (String arg, LinkedList<String> remainingArgs)
specifier|protected
specifier|abstract
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

