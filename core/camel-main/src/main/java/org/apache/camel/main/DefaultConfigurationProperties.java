begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.main
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|main
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ManagementStatisticsLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|PatternHelper
import|;
end_import

begin_comment
comment|/**  * Common set of configuration options used by Camel Main, Camel Spring Boot and other runtimes.  */
end_comment

begin_class
DECL|class|DefaultConfigurationProperties
specifier|public
specifier|abstract
class|class
name|DefaultConfigurationProperties
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|durationMaxSeconds
specifier|private
name|int
name|durationMaxSeconds
decl_stmt|;
DECL|field|durationMaxIdleSeconds
specifier|private
name|int
name|durationMaxIdleSeconds
decl_stmt|;
DECL|field|durationMaxMessages
specifier|private
name|int
name|durationMaxMessages
decl_stmt|;
DECL|field|shutdownTimeout
specifier|private
name|int
name|shutdownTimeout
init|=
literal|300
decl_stmt|;
DECL|field|shutdownSuppressLoggingOnTimeout
specifier|private
name|boolean
name|shutdownSuppressLoggingOnTimeout
decl_stmt|;
DECL|field|shutdownNowOnTimeout
specifier|private
name|boolean
name|shutdownNowOnTimeout
init|=
literal|true
decl_stmt|;
DECL|field|shutdownRoutesInReverseOrder
specifier|private
name|boolean
name|shutdownRoutesInReverseOrder
init|=
literal|true
decl_stmt|;
DECL|field|shutdownLogInflightExchangesOnTimeout
specifier|private
name|boolean
name|shutdownLogInflightExchangesOnTimeout
init|=
literal|true
decl_stmt|;
DECL|field|fileConfigurations
specifier|private
name|String
name|fileConfigurations
decl_stmt|;
DECL|field|jmxEnabled
specifier|private
name|boolean
name|jmxEnabled
init|=
literal|true
decl_stmt|;
DECL|field|producerTemplateCacheSize
specifier|private
name|int
name|producerTemplateCacheSize
init|=
literal|1000
decl_stmt|;
DECL|field|consumerTemplateCacheSize
specifier|private
name|int
name|consumerTemplateCacheSize
init|=
literal|1000
decl_stmt|;
DECL|field|loadTypeConverters
specifier|private
name|boolean
name|loadTypeConverters
init|=
literal|true
decl_stmt|;
DECL|field|logDebugMaxChars
specifier|private
name|int
name|logDebugMaxChars
decl_stmt|;
DECL|field|streamCachingEnabled
specifier|private
name|boolean
name|streamCachingEnabled
decl_stmt|;
DECL|field|streamCachingSpoolDirectory
specifier|private
name|String
name|streamCachingSpoolDirectory
decl_stmt|;
DECL|field|streamCachingSpoolCipher
specifier|private
name|String
name|streamCachingSpoolCipher
decl_stmt|;
DECL|field|streamCachingSpoolThreshold
specifier|private
name|long
name|streamCachingSpoolThreshold
decl_stmt|;
DECL|field|streamCachingSpoolUsedHeapMemoryThreshold
specifier|private
name|int
name|streamCachingSpoolUsedHeapMemoryThreshold
decl_stmt|;
DECL|field|streamCachingSpoolUsedHeapMemoryLimit
specifier|private
name|String
name|streamCachingSpoolUsedHeapMemoryLimit
decl_stmt|;
DECL|field|streamCachingAnySpoolRules
specifier|private
name|boolean
name|streamCachingAnySpoolRules
decl_stmt|;
DECL|field|streamCachingBufferSize
specifier|private
name|int
name|streamCachingBufferSize
decl_stmt|;
DECL|field|streamCachingRemoveSpoolDirectoryWhenStopping
specifier|private
name|boolean
name|streamCachingRemoveSpoolDirectoryWhenStopping
init|=
literal|true
decl_stmt|;
DECL|field|streamCachingStatisticsEnabled
specifier|private
name|boolean
name|streamCachingStatisticsEnabled
decl_stmt|;
DECL|field|backlogTracing
specifier|private
name|boolean
name|backlogTracing
decl_stmt|;
DECL|field|tracing
specifier|private
name|boolean
name|tracing
decl_stmt|;
DECL|field|tracingPattern
specifier|private
name|String
name|tracingPattern
decl_stmt|;
DECL|field|messageHistory
specifier|private
name|boolean
name|messageHistory
init|=
literal|true
decl_stmt|;
DECL|field|logMask
specifier|private
name|boolean
name|logMask
decl_stmt|;
DECL|field|logExhaustedMessageBody
specifier|private
name|boolean
name|logExhaustedMessageBody
decl_stmt|;
DECL|field|autoStartup
specifier|private
name|boolean
name|autoStartup
init|=
literal|true
decl_stmt|;
DECL|field|allowUseOriginalMessage
specifier|private
name|boolean
name|allowUseOriginalMessage
decl_stmt|;
DECL|field|endpointRuntimeStatisticsEnabled
specifier|private
name|boolean
name|endpointRuntimeStatisticsEnabled
decl_stmt|;
DECL|field|useDataType
specifier|private
name|boolean
name|useDataType
decl_stmt|;
DECL|field|useBreadcrumb
specifier|private
name|boolean
name|useBreadcrumb
decl_stmt|;
DECL|field|jmxManagementStatisticsLevel
specifier|private
name|ManagementStatisticsLevel
name|jmxManagementStatisticsLevel
init|=
name|ManagementStatisticsLevel
operator|.
name|Default
decl_stmt|;
DECL|field|jmxManagementNamePattern
specifier|private
name|String
name|jmxManagementNamePattern
init|=
literal|"#name#"
decl_stmt|;
DECL|field|jmxCreateConnector
specifier|private
name|boolean
name|jmxCreateConnector
decl_stmt|;
DECL|field|useMdcLogging
specifier|private
name|boolean
name|useMdcLogging
decl_stmt|;
DECL|field|mdcLoggingKeysPattern
specifier|private
name|String
name|mdcLoggingKeysPattern
decl_stmt|;
DECL|field|threadNamePattern
specifier|private
name|String
name|threadNamePattern
decl_stmt|;
DECL|field|routeFilterIncludePattern
specifier|private
name|String
name|routeFilterIncludePattern
decl_stmt|;
DECL|field|routeFilterExcludePattern
specifier|private
name|String
name|routeFilterExcludePattern
decl_stmt|;
comment|// getter and setters
comment|// --------------------------------------------------------------
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Sets the name of the CamelContext.      */
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getDurationMaxSeconds ()
specifier|public
name|int
name|getDurationMaxSeconds
parameter_list|()
block|{
return|return
name|durationMaxSeconds
return|;
block|}
comment|/**      * To specify for how long time in seconds to keep running the JVM before automatic terminating the JVM.      * You can use this to run Camel for a short while.      */
DECL|method|setDurationMaxSeconds (int durationMaxSeconds)
specifier|public
name|void
name|setDurationMaxSeconds
parameter_list|(
name|int
name|durationMaxSeconds
parameter_list|)
block|{
name|this
operator|.
name|durationMaxSeconds
operator|=
name|durationMaxSeconds
expr_stmt|;
block|}
DECL|method|getDurationMaxIdleSeconds ()
specifier|public
name|int
name|getDurationMaxIdleSeconds
parameter_list|()
block|{
return|return
name|durationMaxIdleSeconds
return|;
block|}
comment|/**      * To specify for how long time in seconds Camel can be idle before automatic terminating the JVM.      * You can use this to run Camel for a short while.      */
DECL|method|setDurationMaxIdleSeconds (int durationMaxIdleSeconds)
specifier|public
name|void
name|setDurationMaxIdleSeconds
parameter_list|(
name|int
name|durationMaxIdleSeconds
parameter_list|)
block|{
name|this
operator|.
name|durationMaxIdleSeconds
operator|=
name|durationMaxIdleSeconds
expr_stmt|;
block|}
DECL|method|getDurationMaxMessages ()
specifier|public
name|int
name|getDurationMaxMessages
parameter_list|()
block|{
return|return
name|durationMaxMessages
return|;
block|}
comment|/**      * To specify how many messages to process by Camel before automatic terminating the JVM.      * You can use this to run Camel for a short while.      */
DECL|method|setDurationMaxMessages (int durationMaxMessages)
specifier|public
name|void
name|setDurationMaxMessages
parameter_list|(
name|int
name|durationMaxMessages
parameter_list|)
block|{
name|this
operator|.
name|durationMaxMessages
operator|=
name|durationMaxMessages
expr_stmt|;
block|}
DECL|method|getShutdownTimeout ()
specifier|public
name|int
name|getShutdownTimeout
parameter_list|()
block|{
return|return
name|shutdownTimeout
return|;
block|}
comment|/**      * Timeout in seconds to graceful shutdown Camel.      */
DECL|method|setShutdownTimeout (int shutdownTimeout)
specifier|public
name|void
name|setShutdownTimeout
parameter_list|(
name|int
name|shutdownTimeout
parameter_list|)
block|{
name|this
operator|.
name|shutdownTimeout
operator|=
name|shutdownTimeout
expr_stmt|;
block|}
DECL|method|isShutdownSuppressLoggingOnTimeout ()
specifier|public
name|boolean
name|isShutdownSuppressLoggingOnTimeout
parameter_list|()
block|{
return|return
name|shutdownSuppressLoggingOnTimeout
return|;
block|}
comment|/**      * Whether Camel should try to suppress logging during shutdown and timeout was triggered,      * meaning forced shutdown is happening. And during forced shutdown we want to avoid logging      * errors/warnings et all in the logs as a side-effect of the forced timeout.      * Notice the suppress is a best effort as there may still be some logs coming      * from 3rd party libraries and whatnot, which Camel cannot control.      * This option is default false.      */
DECL|method|setShutdownSuppressLoggingOnTimeout (boolean shutdownSuppressLoggingOnTimeout)
specifier|public
name|void
name|setShutdownSuppressLoggingOnTimeout
parameter_list|(
name|boolean
name|shutdownSuppressLoggingOnTimeout
parameter_list|)
block|{
name|this
operator|.
name|shutdownSuppressLoggingOnTimeout
operator|=
name|shutdownSuppressLoggingOnTimeout
expr_stmt|;
block|}
DECL|method|isShutdownNowOnTimeout ()
specifier|public
name|boolean
name|isShutdownNowOnTimeout
parameter_list|()
block|{
return|return
name|shutdownNowOnTimeout
return|;
block|}
comment|/**      * Sets whether to force shutdown of all consumers when a timeout occurred and thus      * not all consumers was shutdown within that period.      *      * You should have good reasons to set this option to false as it means that the routes      * keep running and is halted abruptly when CamelContext has been shutdown.      */
DECL|method|setShutdownNowOnTimeout (boolean shutdownNowOnTimeout)
specifier|public
name|void
name|setShutdownNowOnTimeout
parameter_list|(
name|boolean
name|shutdownNowOnTimeout
parameter_list|)
block|{
name|this
operator|.
name|shutdownNowOnTimeout
operator|=
name|shutdownNowOnTimeout
expr_stmt|;
block|}
DECL|method|isShutdownRoutesInReverseOrder ()
specifier|public
name|boolean
name|isShutdownRoutesInReverseOrder
parameter_list|()
block|{
return|return
name|shutdownRoutesInReverseOrder
return|;
block|}
comment|/**      * Sets whether routes should be shutdown in reverse or the same order as they where started.      */
DECL|method|setShutdownRoutesInReverseOrder (boolean shutdownRoutesInReverseOrder)
specifier|public
name|void
name|setShutdownRoutesInReverseOrder
parameter_list|(
name|boolean
name|shutdownRoutesInReverseOrder
parameter_list|)
block|{
name|this
operator|.
name|shutdownRoutesInReverseOrder
operator|=
name|shutdownRoutesInReverseOrder
expr_stmt|;
block|}
DECL|method|isShutdownLogInflightExchangesOnTimeout ()
specifier|public
name|boolean
name|isShutdownLogInflightExchangesOnTimeout
parameter_list|()
block|{
return|return
name|shutdownLogInflightExchangesOnTimeout
return|;
block|}
comment|/**      * Sets whether to log information about the inflight Exchanges which are still running      * during a shutdown which didn't complete without the given timeout.      */
DECL|method|setShutdownLogInflightExchangesOnTimeout (boolean shutdownLogInflightExchangesOnTimeout)
specifier|public
name|void
name|setShutdownLogInflightExchangesOnTimeout
parameter_list|(
name|boolean
name|shutdownLogInflightExchangesOnTimeout
parameter_list|)
block|{
name|this
operator|.
name|shutdownLogInflightExchangesOnTimeout
operator|=
name|shutdownLogInflightExchangesOnTimeout
expr_stmt|;
block|}
DECL|method|getFileConfigurations ()
specifier|public
name|String
name|getFileConfigurations
parameter_list|()
block|{
return|return
name|fileConfigurations
return|;
block|}
comment|/**      * Directory to load additional configuration files that contains      * configuration values that takes precedence over any other configuration.      * This can be used to refer to files that may have secret configuration that      * has been mounted on the file system for containers.      *      * You can specify a pattern to load from sub directories and a name pattern such as /var/app/secret/*.properties,      * multiple directories can be separated by comma.      */
DECL|method|setFileConfigurations (String fileConfigurations)
specifier|public
name|void
name|setFileConfigurations
parameter_list|(
name|String
name|fileConfigurations
parameter_list|)
block|{
name|this
operator|.
name|fileConfigurations
operator|=
name|fileConfigurations
expr_stmt|;
block|}
DECL|method|isJmxEnabled ()
specifier|public
name|boolean
name|isJmxEnabled
parameter_list|()
block|{
return|return
name|jmxEnabled
return|;
block|}
comment|/**      * Enable JMX in your Camel application.      */
DECL|method|setJmxEnabled (boolean jmxEnabled)
specifier|public
name|void
name|setJmxEnabled
parameter_list|(
name|boolean
name|jmxEnabled
parameter_list|)
block|{
name|this
operator|.
name|jmxEnabled
operator|=
name|jmxEnabled
expr_stmt|;
block|}
DECL|method|getProducerTemplateCacheSize ()
specifier|public
name|int
name|getProducerTemplateCacheSize
parameter_list|()
block|{
return|return
name|producerTemplateCacheSize
return|;
block|}
comment|/**      * Producer template endpoints cache size.      */
DECL|method|setProducerTemplateCacheSize (int producerTemplateCacheSize)
specifier|public
name|void
name|setProducerTemplateCacheSize
parameter_list|(
name|int
name|producerTemplateCacheSize
parameter_list|)
block|{
name|this
operator|.
name|producerTemplateCacheSize
operator|=
name|producerTemplateCacheSize
expr_stmt|;
block|}
DECL|method|getConsumerTemplateCacheSize ()
specifier|public
name|int
name|getConsumerTemplateCacheSize
parameter_list|()
block|{
return|return
name|consumerTemplateCacheSize
return|;
block|}
comment|/**      * Consumer template endpoints cache size.      */
DECL|method|setConsumerTemplateCacheSize (int consumerTemplateCacheSize)
specifier|public
name|void
name|setConsumerTemplateCacheSize
parameter_list|(
name|int
name|consumerTemplateCacheSize
parameter_list|)
block|{
name|this
operator|.
name|consumerTemplateCacheSize
operator|=
name|consumerTemplateCacheSize
expr_stmt|;
block|}
DECL|method|isLoadTypeConverters ()
specifier|public
name|boolean
name|isLoadTypeConverters
parameter_list|()
block|{
return|return
name|loadTypeConverters
return|;
block|}
comment|/**      * Whether to load custom type converters by scanning classpath.      * This is used for backwards compatibility with Camel 2.x.      * Its recommended to migrate to use fast type converter loading      * by setting<tt>@Converter(loader = true)</tt> on your custom      * type converter classes.      */
DECL|method|setLoadTypeConverters (boolean loadTypeConverters)
specifier|public
name|void
name|setLoadTypeConverters
parameter_list|(
name|boolean
name|loadTypeConverters
parameter_list|)
block|{
name|this
operator|.
name|loadTypeConverters
operator|=
name|loadTypeConverters
expr_stmt|;
block|}
DECL|method|getLogDebugMaxChars ()
specifier|public
name|int
name|getLogDebugMaxChars
parameter_list|()
block|{
return|return
name|logDebugMaxChars
return|;
block|}
comment|/**      * Is used to limit the maximum length of the logging Camel message bodies. If the message body      * is longer than the limit, the log message is clipped. Use -1 to have unlimited length.      * Use for example 1000 to log at most 1000 characters.      */
DECL|method|setLogDebugMaxChars (int logDebugMaxChars)
specifier|public
name|void
name|setLogDebugMaxChars
parameter_list|(
name|int
name|logDebugMaxChars
parameter_list|)
block|{
name|this
operator|.
name|logDebugMaxChars
operator|=
name|logDebugMaxChars
expr_stmt|;
block|}
DECL|method|isStreamCachingEnabled ()
specifier|public
name|boolean
name|isStreamCachingEnabled
parameter_list|()
block|{
return|return
name|streamCachingEnabled
return|;
block|}
comment|/**      * Sets whether stream caching is enabled or not.      *      * Default is false.      */
DECL|method|setStreamCachingEnabled (boolean streamCachingEnabled)
specifier|public
name|void
name|setStreamCachingEnabled
parameter_list|(
name|boolean
name|streamCachingEnabled
parameter_list|)
block|{
name|this
operator|.
name|streamCachingEnabled
operator|=
name|streamCachingEnabled
expr_stmt|;
block|}
DECL|method|getStreamCachingSpoolDirectory ()
specifier|public
name|String
name|getStreamCachingSpoolDirectory
parameter_list|()
block|{
return|return
name|streamCachingSpoolDirectory
return|;
block|}
comment|/**      * Sets the stream caching spool (temporary) directory to use for overflow and spooling to disk.      *      * If no spool directory has been explicit configured, then a temporary directory      * is created in the java.io.tmpdir directory.      */
DECL|method|setStreamCachingSpoolDirectory (String streamCachingSpoolDirectory)
specifier|public
name|void
name|setStreamCachingSpoolDirectory
parameter_list|(
name|String
name|streamCachingSpoolDirectory
parameter_list|)
block|{
name|this
operator|.
name|streamCachingSpoolDirectory
operator|=
name|streamCachingSpoolDirectory
expr_stmt|;
block|}
DECL|method|getStreamCachingSpoolCipher ()
specifier|public
name|String
name|getStreamCachingSpoolCipher
parameter_list|()
block|{
return|return
name|streamCachingSpoolCipher
return|;
block|}
comment|/**      * Sets a stream caching cipher name to use when spooling to disk to write with encryption.      * By default the data is not encrypted.      */
DECL|method|setStreamCachingSpoolCipher (String streamCachingSpoolCipher)
specifier|public
name|void
name|setStreamCachingSpoolCipher
parameter_list|(
name|String
name|streamCachingSpoolCipher
parameter_list|)
block|{
name|this
operator|.
name|streamCachingSpoolCipher
operator|=
name|streamCachingSpoolCipher
expr_stmt|;
block|}
DECL|method|getStreamCachingSpoolThreshold ()
specifier|public
name|long
name|getStreamCachingSpoolThreshold
parameter_list|()
block|{
return|return
name|streamCachingSpoolThreshold
return|;
block|}
comment|/**      * Stream caching threshold in bytes when overflow to disk is activated.      * The default threshold is 128kb.      * Use -1 to disable overflow to disk.      */
DECL|method|setStreamCachingSpoolThreshold (long streamCachingSpoolThreshold)
specifier|public
name|void
name|setStreamCachingSpoolThreshold
parameter_list|(
name|long
name|streamCachingSpoolThreshold
parameter_list|)
block|{
name|this
operator|.
name|streamCachingSpoolThreshold
operator|=
name|streamCachingSpoolThreshold
expr_stmt|;
block|}
DECL|method|getStreamCachingSpoolUsedHeapMemoryThreshold ()
specifier|public
name|int
name|getStreamCachingSpoolUsedHeapMemoryThreshold
parameter_list|()
block|{
return|return
name|streamCachingSpoolUsedHeapMemoryThreshold
return|;
block|}
comment|/**      * Sets a percentage (1-99) of used heap memory threshold to activate stream caching spooling to disk.      */
DECL|method|setStreamCachingSpoolUsedHeapMemoryThreshold (int streamCachingSpoolUsedHeapMemoryThreshold)
specifier|public
name|void
name|setStreamCachingSpoolUsedHeapMemoryThreshold
parameter_list|(
name|int
name|streamCachingSpoolUsedHeapMemoryThreshold
parameter_list|)
block|{
name|this
operator|.
name|streamCachingSpoolUsedHeapMemoryThreshold
operator|=
name|streamCachingSpoolUsedHeapMemoryThreshold
expr_stmt|;
block|}
DECL|method|getStreamCachingSpoolUsedHeapMemoryLimit ()
specifier|public
name|String
name|getStreamCachingSpoolUsedHeapMemoryLimit
parameter_list|()
block|{
return|return
name|streamCachingSpoolUsedHeapMemoryLimit
return|;
block|}
comment|/**      * Sets what the upper bounds should be when streamCachingSpoolUsedHeapMemoryThreshold is in use.      */
DECL|method|setStreamCachingSpoolUsedHeapMemoryLimit (String streamCachingSpoolUsedHeapMemoryLimit)
specifier|public
name|void
name|setStreamCachingSpoolUsedHeapMemoryLimit
parameter_list|(
name|String
name|streamCachingSpoolUsedHeapMemoryLimit
parameter_list|)
block|{
name|this
operator|.
name|streamCachingSpoolUsedHeapMemoryLimit
operator|=
name|streamCachingSpoolUsedHeapMemoryLimit
expr_stmt|;
block|}
DECL|method|isStreamCachingAnySpoolRules ()
specifier|public
name|boolean
name|isStreamCachingAnySpoolRules
parameter_list|()
block|{
return|return
name|streamCachingAnySpoolRules
return|;
block|}
comment|/**      * Sets whether if just any of the org.apache.camel.spi.StreamCachingStrategy.SpoolRule rules      * returns true then shouldSpoolCache(long) returns true, to allow spooling to disk.      * If this option is false, then all the org.apache.camel.spi.StreamCachingStrategy.SpoolRule must      * return true.      *      * The default value is false which means that all the rules must return true.      */
DECL|method|setStreamCachingAnySpoolRules (boolean streamCachingAnySpoolRules)
specifier|public
name|void
name|setStreamCachingAnySpoolRules
parameter_list|(
name|boolean
name|streamCachingAnySpoolRules
parameter_list|)
block|{
name|this
operator|.
name|streamCachingAnySpoolRules
operator|=
name|streamCachingAnySpoolRules
expr_stmt|;
block|}
DECL|method|getStreamCachingBufferSize ()
specifier|public
name|int
name|getStreamCachingBufferSize
parameter_list|()
block|{
return|return
name|streamCachingBufferSize
return|;
block|}
comment|/**      * Sets the stream caching buffer size to use when allocating in-memory buffers used for in-memory stream caches.      *      * The default size is 4096.      */
DECL|method|setStreamCachingBufferSize (int streamCachingBufferSize)
specifier|public
name|void
name|setStreamCachingBufferSize
parameter_list|(
name|int
name|streamCachingBufferSize
parameter_list|)
block|{
name|this
operator|.
name|streamCachingBufferSize
operator|=
name|streamCachingBufferSize
expr_stmt|;
block|}
DECL|method|isStreamCachingRemoveSpoolDirectoryWhenStopping ()
specifier|public
name|boolean
name|isStreamCachingRemoveSpoolDirectoryWhenStopping
parameter_list|()
block|{
return|return
name|streamCachingRemoveSpoolDirectoryWhenStopping
return|;
block|}
comment|/**      * Whether to remove stream caching temporary directory when stopping.      * This option is default true.      */
DECL|method|setStreamCachingRemoveSpoolDirectoryWhenStopping (boolean streamCachingRemoveSpoolDirectoryWhenStopping)
specifier|public
name|void
name|setStreamCachingRemoveSpoolDirectoryWhenStopping
parameter_list|(
name|boolean
name|streamCachingRemoveSpoolDirectoryWhenStopping
parameter_list|)
block|{
name|this
operator|.
name|streamCachingRemoveSpoolDirectoryWhenStopping
operator|=
name|streamCachingRemoveSpoolDirectoryWhenStopping
expr_stmt|;
block|}
DECL|method|isStreamCachingStatisticsEnabled ()
specifier|public
name|boolean
name|isStreamCachingStatisticsEnabled
parameter_list|()
block|{
return|return
name|streamCachingStatisticsEnabled
return|;
block|}
comment|/**      * Sets whether stream caching statistics is enabled.      */
DECL|method|setStreamCachingStatisticsEnabled (boolean streamCachingStatisticsEnabled)
specifier|public
name|void
name|setStreamCachingStatisticsEnabled
parameter_list|(
name|boolean
name|streamCachingStatisticsEnabled
parameter_list|)
block|{
name|this
operator|.
name|streamCachingStatisticsEnabled
operator|=
name|streamCachingStatisticsEnabled
expr_stmt|;
block|}
DECL|method|isTracing ()
specifier|public
name|boolean
name|isTracing
parameter_list|()
block|{
return|return
name|tracing
return|;
block|}
comment|/**      * Sets whether tracing is enabled or not.      *      * Default is false.      */
DECL|method|setTracing (boolean tracing)
specifier|public
name|void
name|setTracing
parameter_list|(
name|boolean
name|tracing
parameter_list|)
block|{
name|this
operator|.
name|tracing
operator|=
name|tracing
expr_stmt|;
block|}
DECL|method|getTracingPattern ()
specifier|public
name|String
name|getTracingPattern
parameter_list|()
block|{
return|return
name|tracingPattern
return|;
block|}
comment|/**      * Tracing pattern to match which node EIPs to trace.      * For example to match all To EIP nodes, use to*.      * The pattern matches by node and route id's      * Multiple patterns can be separated by comma.      */
DECL|method|setTracingPattern (String tracingPattern)
specifier|public
name|void
name|setTracingPattern
parameter_list|(
name|String
name|tracingPattern
parameter_list|)
block|{
name|this
operator|.
name|tracingPattern
operator|=
name|tracingPattern
expr_stmt|;
block|}
DECL|method|isBacklogTracing ()
specifier|public
name|boolean
name|isBacklogTracing
parameter_list|()
block|{
return|return
name|backlogTracing
return|;
block|}
comment|/**      * Sets whether backlog tracing is enabled or not.      *      * Default is false.      */
DECL|method|setBacklogTracing (boolean backlogTracing)
specifier|public
name|void
name|setBacklogTracing
parameter_list|(
name|boolean
name|backlogTracing
parameter_list|)
block|{
name|this
operator|.
name|backlogTracing
operator|=
name|backlogTracing
expr_stmt|;
block|}
DECL|method|isMessageHistory ()
specifier|public
name|boolean
name|isMessageHistory
parameter_list|()
block|{
return|return
name|messageHistory
return|;
block|}
comment|/**      * Sets whether message history is enabled or not.      *      * Default is true.      */
DECL|method|setMessageHistory (boolean messageHistory)
specifier|public
name|void
name|setMessageHistory
parameter_list|(
name|boolean
name|messageHistory
parameter_list|)
block|{
name|this
operator|.
name|messageHistory
operator|=
name|messageHistory
expr_stmt|;
block|}
DECL|method|isLogMask ()
specifier|public
name|boolean
name|isLogMask
parameter_list|()
block|{
return|return
name|logMask
return|;
block|}
comment|/**      * Sets whether log mask is enabled or not.      *      * Default is false.      */
DECL|method|setLogMask (boolean logMask)
specifier|public
name|void
name|setLogMask
parameter_list|(
name|boolean
name|logMask
parameter_list|)
block|{
name|this
operator|.
name|logMask
operator|=
name|logMask
expr_stmt|;
block|}
DECL|method|isLogExhaustedMessageBody ()
specifier|public
name|boolean
name|isLogExhaustedMessageBody
parameter_list|()
block|{
return|return
name|logExhaustedMessageBody
return|;
block|}
comment|/**      * Sets whether to log exhausted message body with message history.      *      * Default is false.      */
DECL|method|setLogExhaustedMessageBody (boolean logExhaustedMessageBody)
specifier|public
name|void
name|setLogExhaustedMessageBody
parameter_list|(
name|boolean
name|logExhaustedMessageBody
parameter_list|)
block|{
name|this
operator|.
name|logExhaustedMessageBody
operator|=
name|logExhaustedMessageBody
expr_stmt|;
block|}
DECL|method|isAutoStartup ()
specifier|public
name|boolean
name|isAutoStartup
parameter_list|()
block|{
return|return
name|autoStartup
return|;
block|}
comment|/**      * Sets whether the object should automatically start when Camel starts.      * Important: Currently only routes can be disabled, as CamelContext's are always started.      * Note: When setting auto startup false on CamelContext then that takes precedence      * and no routes is started. You would need to start CamelContext explicit using      * the org.apache.camel.CamelContext.start() method, to start the context, and then      * you would need to start the routes manually using CamelContext.getRouteController().startRoute(String).      *      * Default is true to always start up.      */
DECL|method|setAutoStartup (boolean autoStartup)
specifier|public
name|void
name|setAutoStartup
parameter_list|(
name|boolean
name|autoStartup
parameter_list|)
block|{
name|this
operator|.
name|autoStartup
operator|=
name|autoStartup
expr_stmt|;
block|}
DECL|method|isAllowUseOriginalMessage ()
specifier|public
name|boolean
name|isAllowUseOriginalMessage
parameter_list|()
block|{
return|return
name|allowUseOriginalMessage
return|;
block|}
comment|/**      * Sets whether to allow access to the original message from Camel's error handler,      * or from org.apache.camel.spi.UnitOfWork.getOriginalInMessage().      * Turning this off can optimize performance, as defensive copy of the original message is not needed.      *      * Default is false.      */
DECL|method|setAllowUseOriginalMessage (boolean allowUseOriginalMessage)
specifier|public
name|void
name|setAllowUseOriginalMessage
parameter_list|(
name|boolean
name|allowUseOriginalMessage
parameter_list|)
block|{
name|this
operator|.
name|allowUseOriginalMessage
operator|=
name|allowUseOriginalMessage
expr_stmt|;
block|}
DECL|method|isEndpointRuntimeStatisticsEnabled ()
specifier|public
name|boolean
name|isEndpointRuntimeStatisticsEnabled
parameter_list|()
block|{
return|return
name|endpointRuntimeStatisticsEnabled
return|;
block|}
comment|/**      * Sets whether endpoint runtime statistics is enabled (gathers runtime usage of each incoming and outgoing endpoints).      *      * The default value is false.      */
DECL|method|setEndpointRuntimeStatisticsEnabled (boolean endpointRuntimeStatisticsEnabled)
specifier|public
name|void
name|setEndpointRuntimeStatisticsEnabled
parameter_list|(
name|boolean
name|endpointRuntimeStatisticsEnabled
parameter_list|)
block|{
name|this
operator|.
name|endpointRuntimeStatisticsEnabled
operator|=
name|endpointRuntimeStatisticsEnabled
expr_stmt|;
block|}
DECL|method|isUseDataType ()
specifier|public
name|boolean
name|isUseDataType
parameter_list|()
block|{
return|return
name|useDataType
return|;
block|}
comment|/**      * Whether to enable using data type on Camel messages.      *      * Data type are automatic turned on if one ore more routes has been explicit configured with input and output types.      * Otherwise data type is default off.      */
DECL|method|setUseDataType (boolean useDataType)
specifier|public
name|void
name|setUseDataType
parameter_list|(
name|boolean
name|useDataType
parameter_list|)
block|{
name|this
operator|.
name|useDataType
operator|=
name|useDataType
expr_stmt|;
block|}
DECL|method|isUseBreadcrumb ()
specifier|public
name|boolean
name|isUseBreadcrumb
parameter_list|()
block|{
return|return
name|useBreadcrumb
return|;
block|}
comment|/**      * Set whether breadcrumb is enabled.      * The default value is false.      */
DECL|method|setUseBreadcrumb (boolean useBreadcrumb)
specifier|public
name|void
name|setUseBreadcrumb
parameter_list|(
name|boolean
name|useBreadcrumb
parameter_list|)
block|{
name|this
operator|.
name|useBreadcrumb
operator|=
name|useBreadcrumb
expr_stmt|;
block|}
DECL|method|getJmxManagementStatisticsLevel ()
specifier|public
name|ManagementStatisticsLevel
name|getJmxManagementStatisticsLevel
parameter_list|()
block|{
return|return
name|jmxManagementStatisticsLevel
return|;
block|}
comment|/**      * Sets the JMX statistics level      * The level can be set to Extended to gather additional information      *      * The default value is Default.      */
DECL|method|setJmxManagementStatisticsLevel (ManagementStatisticsLevel jmxManagementStatisticsLevel)
specifier|public
name|void
name|setJmxManagementStatisticsLevel
parameter_list|(
name|ManagementStatisticsLevel
name|jmxManagementStatisticsLevel
parameter_list|)
block|{
name|this
operator|.
name|jmxManagementStatisticsLevel
operator|=
name|jmxManagementStatisticsLevel
expr_stmt|;
block|}
DECL|method|getJmxManagementNamePattern ()
specifier|public
name|String
name|getJmxManagementNamePattern
parameter_list|()
block|{
return|return
name|jmxManagementNamePattern
return|;
block|}
comment|/**      * The naming pattern for creating the CamelContext JMX management name.      *      * The default pattern is #name#      */
DECL|method|setJmxManagementNamePattern (String jmxManagementNamePattern)
specifier|public
name|void
name|setJmxManagementNamePattern
parameter_list|(
name|String
name|jmxManagementNamePattern
parameter_list|)
block|{
name|this
operator|.
name|jmxManagementNamePattern
operator|=
name|jmxManagementNamePattern
expr_stmt|;
block|}
DECL|method|isJmxCreateConnector ()
specifier|public
name|boolean
name|isJmxCreateConnector
parameter_list|()
block|{
return|return
name|jmxCreateConnector
return|;
block|}
comment|/**      * Whether JMX connector is created, allowing clients to connect remotely      *      * The default value is false.      */
DECL|method|setJmxCreateConnector (boolean jmxCreateConnector)
specifier|public
name|void
name|setJmxCreateConnector
parameter_list|(
name|boolean
name|jmxCreateConnector
parameter_list|)
block|{
name|this
operator|.
name|jmxCreateConnector
operator|=
name|jmxCreateConnector
expr_stmt|;
block|}
DECL|method|isUseMdcLogging ()
specifier|public
name|boolean
name|isUseMdcLogging
parameter_list|()
block|{
return|return
name|useMdcLogging
return|;
block|}
comment|/**      * To turn on MDC logging      */
DECL|method|setUseMdcLogging (boolean useMdcLogging)
specifier|public
name|void
name|setUseMdcLogging
parameter_list|(
name|boolean
name|useMdcLogging
parameter_list|)
block|{
name|this
operator|.
name|useMdcLogging
operator|=
name|useMdcLogging
expr_stmt|;
block|}
DECL|method|getMdcLoggingKeysPattern ()
specifier|public
name|String
name|getMdcLoggingKeysPattern
parameter_list|()
block|{
return|return
name|mdcLoggingKeysPattern
return|;
block|}
comment|/**      * Sets the pattern used for determine which custom MDC keys to propagate during message routing when      * the routing engine continues routing asynchronously for the given message. Setting this pattern to * will      * propagate all custom keys. Or setting the pattern to foo*,bar* will propagate any keys starting with      * either foo or bar.      * Notice that a set of standard Camel MDC keys are always propagated which starts with camel. as key name.      *      * The match rules are applied in this order (case insensitive):      *      * 1. exact match, returns true      * 2. wildcard match (pattern ends with a * and the name starts with the pattern), returns true      * 3. regular expression match, returns true      * 4. otherwise returns false      */
DECL|method|setMdcLoggingKeysPattern (String mdcLoggingKeysPattern)
specifier|public
name|void
name|setMdcLoggingKeysPattern
parameter_list|(
name|String
name|mdcLoggingKeysPattern
parameter_list|)
block|{
name|this
operator|.
name|mdcLoggingKeysPattern
operator|=
name|mdcLoggingKeysPattern
expr_stmt|;
block|}
DECL|method|getThreadNamePattern ()
specifier|public
name|String
name|getThreadNamePattern
parameter_list|()
block|{
return|return
name|threadNamePattern
return|;
block|}
comment|/**      * Sets the thread name pattern used for creating the full thread name.      *      * The default pattern is: Camel (#camelId#) thread ##counter# - #name#      *      * Where #camelId# is the name of the CamelContext.      * and #counter# is a unique incrementing counter.      * and #name# is the regular thread name.      *      * You can also use #longName# which is the long thread name which can includes endpoint parameters etc.      */
DECL|method|setThreadNamePattern (String threadNamePattern)
specifier|public
name|void
name|setThreadNamePattern
parameter_list|(
name|String
name|threadNamePattern
parameter_list|)
block|{
name|this
operator|.
name|threadNamePattern
operator|=
name|threadNamePattern
expr_stmt|;
block|}
DECL|method|getRouteFilterIncludePattern ()
specifier|public
name|String
name|getRouteFilterIncludePattern
parameter_list|()
block|{
return|return
name|routeFilterIncludePattern
return|;
block|}
comment|/**      * Used for filtering routes routes matching the given pattern, which follows the following rules:      *      * - Match by route id      * - Match by route input endpoint uri      *      * The matching is using exact match, by wildcard and regular expression as documented by {@link PatternHelper#matchPattern(String, String)}.      *      * For example to only include routes which starts with foo in their route id's, use: include=foo&#42;      * And to exclude routes which starts from JMS endpoints, use: exclude=jms:&#42;      *      * Multiple patterns can be separated by comma, for example to exclude both foo and bar routes, use: exclude=foo&#42;,bar&#42;      *      * Exclude takes precedence over include.      */
DECL|method|setRouteFilterIncludePattern (String include)
specifier|public
name|void
name|setRouteFilterIncludePattern
parameter_list|(
name|String
name|include
parameter_list|)
block|{
name|this
operator|.
name|routeFilterIncludePattern
operator|=
name|include
expr_stmt|;
block|}
DECL|method|getRouteFilterExcludePattern ()
specifier|public
name|String
name|getRouteFilterExcludePattern
parameter_list|()
block|{
return|return
name|routeFilterExcludePattern
return|;
block|}
comment|/**      * Used for filtering routes routes matching the given pattern, which follows the following rules:      *      * - Match by route id      * - Match by route input endpoint uri      *      * The matching is using exact match, by wildcard and regular expression as documented by {@link PatternHelper#matchPattern(String, String)}.      *      * For example to only include routes which starts with foo in their route id's, use: include=foo&#42;      * And to exclude routes which starts from JMS endpoints, use: exclude=jms:&#42;      *      * Multiple patterns can be separated by comma, for example to exclude both foo and bar routes, use: exclude=foo&#42;,bar&#42;      *      * Exclude takes precedence over include.      */
DECL|method|setRouteFilterExcludePattern (String exclude)
specifier|public
name|void
name|setRouteFilterExcludePattern
parameter_list|(
name|String
name|exclude
parameter_list|)
block|{
name|this
operator|.
name|routeFilterExcludePattern
operator|=
name|exclude
expr_stmt|;
block|}
comment|// fluent builders
comment|// --------------------------------------------------------------
comment|/**      * Sets the name of the CamelContext.      */
DECL|method|withName (String name)
specifier|public
name|T
name|withName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * To specify for how long time in seconds to keep running the JVM before automatic terminating the JVM.      * You can use this to run Camel for a short while.      */
DECL|method|withDurationMaxSeconds (int durationMaxSeconds)
specifier|public
name|T
name|withDurationMaxSeconds
parameter_list|(
name|int
name|durationMaxSeconds
parameter_list|)
block|{
name|this
operator|.
name|durationMaxSeconds
operator|=
name|durationMaxSeconds
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * To specify for how long time in seconds Camel can be idle before automatic terminating the JVM.      * You can use this to run Camel for a short while.      */
DECL|method|withDurationMaxIdleSeconds (int durationMaxIdleSeconds)
specifier|public
name|T
name|withDurationMaxIdleSeconds
parameter_list|(
name|int
name|durationMaxIdleSeconds
parameter_list|)
block|{
name|this
operator|.
name|durationMaxIdleSeconds
operator|=
name|durationMaxIdleSeconds
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * To specify how many messages to process by Camel before automatic terminating the JVM.      * You can use this to run Camel for a short while.      */
DECL|method|withDurationMaxMessages (int durationMaxMessages)
specifier|public
name|T
name|withDurationMaxMessages
parameter_list|(
name|int
name|durationMaxMessages
parameter_list|)
block|{
name|this
operator|.
name|durationMaxMessages
operator|=
name|durationMaxMessages
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Timeout in seconds to graceful shutdown Camel.      */
DECL|method|withShutdownTimeout (int shutdownTimeout)
specifier|public
name|T
name|withShutdownTimeout
parameter_list|(
name|int
name|shutdownTimeout
parameter_list|)
block|{
name|this
operator|.
name|shutdownTimeout
operator|=
name|shutdownTimeout
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Whether Camel should try to suppress logging during shutdown and timeout was triggered,      * meaning forced shutdown is happening. And during forced shutdown we want to avoid logging      * errors/warnings et all in the logs as a side-effect of the forced timeout.      * Notice the suppress is a best effort as there may still be some logs coming      * from 3rd party libraries and whatnot, which Camel cannot control.      * This option is default false.      */
DECL|method|withShutdownSuppressLoggingOnTimeout (boolean shutdownSuppressLoggingOnTimeout)
specifier|public
name|T
name|withShutdownSuppressLoggingOnTimeout
parameter_list|(
name|boolean
name|shutdownSuppressLoggingOnTimeout
parameter_list|)
block|{
name|this
operator|.
name|shutdownSuppressLoggingOnTimeout
operator|=
name|shutdownSuppressLoggingOnTimeout
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets whether to force shutdown of all consumers when a timeout occurred and thus      * not all consumers was shutdown within that period.      *      * You should have good reasons to set this option to false as it means that the routes      * keep running and is halted abruptly when CamelContext has been shutdown.      */
DECL|method|withShutdownNowOnTimeout (boolean shutdownNowOnTimeout)
specifier|public
name|T
name|withShutdownNowOnTimeout
parameter_list|(
name|boolean
name|shutdownNowOnTimeout
parameter_list|)
block|{
name|this
operator|.
name|shutdownNowOnTimeout
operator|=
name|shutdownNowOnTimeout
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets whether routes should be shutdown in reverse or the same order as they where started.      */
DECL|method|withShutdownRoutesInReverseOrder (boolean shutdownRoutesInReverseOrder)
specifier|public
name|T
name|withShutdownRoutesInReverseOrder
parameter_list|(
name|boolean
name|shutdownRoutesInReverseOrder
parameter_list|)
block|{
name|this
operator|.
name|shutdownRoutesInReverseOrder
operator|=
name|shutdownRoutesInReverseOrder
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets whether to log information about the inflight Exchanges which are still running      * during a shutdown which didn't complete without the given timeout.      */
DECL|method|withShutdownLogInflightExchangesOnTimeout (boolean shutdownLogInflightExchangesOnTimeout)
specifier|public
name|T
name|withShutdownLogInflightExchangesOnTimeout
parameter_list|(
name|boolean
name|shutdownLogInflightExchangesOnTimeout
parameter_list|)
block|{
name|this
operator|.
name|shutdownLogInflightExchangesOnTimeout
operator|=
name|shutdownLogInflightExchangesOnTimeout
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Directory to load additional configuration files that contains      * configuration values that takes precedence over any other configuration.      * This can be used to refer to files that may have secret configuration that      * has been mounted on the file system for containers.      *      * You can specify a pattern to load from sub directories and a name pattern such as /var/app/secret/*.properties,      * multiple directories can be separated by comma.      */
DECL|method|withFileConfigurations (String fileConfigurations)
specifier|public
name|T
name|withFileConfigurations
parameter_list|(
name|String
name|fileConfigurations
parameter_list|)
block|{
name|this
operator|.
name|fileConfigurations
operator|=
name|fileConfigurations
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Enable JMX in your Camel application.      */
DECL|method|withJmxEnabled (boolean jmxEnabled)
specifier|public
name|T
name|withJmxEnabled
parameter_list|(
name|boolean
name|jmxEnabled
parameter_list|)
block|{
name|this
operator|.
name|jmxEnabled
operator|=
name|jmxEnabled
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Producer template endpoints cache size.      */
DECL|method|withProducerTemplateCacheSize (int producerTemplateCacheSize)
specifier|public
name|T
name|withProducerTemplateCacheSize
parameter_list|(
name|int
name|producerTemplateCacheSize
parameter_list|)
block|{
name|this
operator|.
name|producerTemplateCacheSize
operator|=
name|producerTemplateCacheSize
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Consumer template endpoints cache size.      */
DECL|method|withConsumerTemplateCacheSize (int consumerTemplateCacheSize)
specifier|public
name|T
name|withConsumerTemplateCacheSize
parameter_list|(
name|int
name|consumerTemplateCacheSize
parameter_list|)
block|{
name|this
operator|.
name|consumerTemplateCacheSize
operator|=
name|consumerTemplateCacheSize
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Whether to load custom type converters by scanning classpath.      * This is used for backwards compatibility with Camel 2.x.      * Its recommended to migrate to use fast type converter loading      * by setting<tt>@Converter(loader = true)</tt> on your custom      * type converter classes.      */
DECL|method|withLoadTypeConverters (boolean loadTypeConverters)
specifier|public
name|T
name|withLoadTypeConverters
parameter_list|(
name|boolean
name|loadTypeConverters
parameter_list|)
block|{
name|this
operator|.
name|loadTypeConverters
operator|=
name|loadTypeConverters
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Is used to limit the maximum length of the logging Camel message bodies. If the message body      * is longer than the limit, the log message is clipped. Use -1 to have unlimited length.      * Use for example 1000 to log at most 1000 characters.      */
DECL|method|withLogDebugMaxChars (int logDebugMaxChars)
specifier|public
name|T
name|withLogDebugMaxChars
parameter_list|(
name|int
name|logDebugMaxChars
parameter_list|)
block|{
name|this
operator|.
name|logDebugMaxChars
operator|=
name|logDebugMaxChars
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets whether stream caching is enabled or not.      *      * Default is false.      */
DECL|method|withStreamCachingEnabled (boolean streamCachingEnabled)
specifier|public
name|T
name|withStreamCachingEnabled
parameter_list|(
name|boolean
name|streamCachingEnabled
parameter_list|)
block|{
name|this
operator|.
name|streamCachingEnabled
operator|=
name|streamCachingEnabled
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets the stream caching spool (temporary) directory to use for overflow and spooling to disk.      *      * If no spool directory has been explicit configured, then a temporary directory      * is created in the java.io.tmpdir directory.      */
DECL|method|withStreamCachingSpoolDirectory (String streamCachingSpoolDirectory)
specifier|public
name|T
name|withStreamCachingSpoolDirectory
parameter_list|(
name|String
name|streamCachingSpoolDirectory
parameter_list|)
block|{
name|this
operator|.
name|streamCachingSpoolDirectory
operator|=
name|streamCachingSpoolDirectory
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets a stream caching cipher name to use when spooling to disk to write with encryption.      * By default the data is not encrypted.      */
DECL|method|withStreamCachingSpoolCipher (String streamCachingSpoolCipher)
specifier|public
name|T
name|withStreamCachingSpoolCipher
parameter_list|(
name|String
name|streamCachingSpoolCipher
parameter_list|)
block|{
name|this
operator|.
name|streamCachingSpoolCipher
operator|=
name|streamCachingSpoolCipher
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Stream caching threshold in bytes when overflow to disk is activated.      * The default threshold is 128kb.      * Use -1 to disable overflow to disk.      */
DECL|method|withStreamCachingSpoolThreshold (long streamCachingSpoolThreshold)
specifier|public
name|T
name|withStreamCachingSpoolThreshold
parameter_list|(
name|long
name|streamCachingSpoolThreshold
parameter_list|)
block|{
name|this
operator|.
name|streamCachingSpoolThreshold
operator|=
name|streamCachingSpoolThreshold
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets a percentage (1-99) of used heap memory threshold to activate stream caching spooling to disk.      */
DECL|method|withStreamCachingSpoolUsedHeapMemoryThreshold (int streamCachingSpoolUsedHeapMemoryThreshold)
specifier|public
name|T
name|withStreamCachingSpoolUsedHeapMemoryThreshold
parameter_list|(
name|int
name|streamCachingSpoolUsedHeapMemoryThreshold
parameter_list|)
block|{
name|this
operator|.
name|streamCachingSpoolUsedHeapMemoryThreshold
operator|=
name|streamCachingSpoolUsedHeapMemoryThreshold
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets what the upper bounds should be when streamCachingSpoolUsedHeapMemoryThreshold is in use.      */
DECL|method|withStreamCachingSpoolUsedHeapMemoryLimit (String streamCachingSpoolUsedHeapMemoryLimit)
specifier|public
name|T
name|withStreamCachingSpoolUsedHeapMemoryLimit
parameter_list|(
name|String
name|streamCachingSpoolUsedHeapMemoryLimit
parameter_list|)
block|{
name|this
operator|.
name|streamCachingSpoolUsedHeapMemoryLimit
operator|=
name|streamCachingSpoolUsedHeapMemoryLimit
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets whether if just any of the org.apache.camel.spi.StreamCachingStrategy.SpoolRule rules      * returns true then shouldSpoolCache(long) returns true, to allow spooling to disk.      * If this option is false, then all the org.apache.camel.spi.StreamCachingStrategy.SpoolRule must      * return true.      *      * The default value is false which means that all the rules must return true.      */
DECL|method|withStreamCachingAnySpoolRules (boolean streamCachingAnySpoolRules)
specifier|public
name|T
name|withStreamCachingAnySpoolRules
parameter_list|(
name|boolean
name|streamCachingAnySpoolRules
parameter_list|)
block|{
name|this
operator|.
name|streamCachingAnySpoolRules
operator|=
name|streamCachingAnySpoolRules
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets the stream caching buffer size to use when allocating in-memory buffers used for in-memory stream caches.      *      * The default size is 4096.      */
DECL|method|withStreamCachingBufferSize (int streamCachingBufferSize)
specifier|public
name|T
name|withStreamCachingBufferSize
parameter_list|(
name|int
name|streamCachingBufferSize
parameter_list|)
block|{
name|this
operator|.
name|streamCachingBufferSize
operator|=
name|streamCachingBufferSize
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Whether to remove stream caching temporary directory when stopping.      * This option is default true.      */
DECL|method|withStreamCachingRemoveSpoolDirectoryWhenStopping (boolean streamCachingRemoveSpoolDirectoryWhenStopping)
specifier|public
name|T
name|withStreamCachingRemoveSpoolDirectoryWhenStopping
parameter_list|(
name|boolean
name|streamCachingRemoveSpoolDirectoryWhenStopping
parameter_list|)
block|{
name|this
operator|.
name|streamCachingRemoveSpoolDirectoryWhenStopping
operator|=
name|streamCachingRemoveSpoolDirectoryWhenStopping
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets whether stream caching statistics is enabled.      */
DECL|method|withStreamCachingStatisticsEnabled (boolean streamCachingStatisticsEnabled)
specifier|public
name|T
name|withStreamCachingStatisticsEnabled
parameter_list|(
name|boolean
name|streamCachingStatisticsEnabled
parameter_list|)
block|{
name|this
operator|.
name|streamCachingStatisticsEnabled
operator|=
name|streamCachingStatisticsEnabled
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets whether tracing is enabled or not.      *      * Default is false.      */
DECL|method|withTracing (boolean tracing)
specifier|public
name|T
name|withTracing
parameter_list|(
name|boolean
name|tracing
parameter_list|)
block|{
name|this
operator|.
name|tracing
operator|=
name|tracing
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets whether backlog tracing is enabled or not.      *      * Default is false.      */
DECL|method|withBacklogTracing (boolean backlogTracing)
specifier|public
name|T
name|withBacklogTracing
parameter_list|(
name|boolean
name|backlogTracing
parameter_list|)
block|{
name|this
operator|.
name|backlogTracing
operator|=
name|backlogTracing
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets whether message history is enabled or not.      *      * Default is true.      */
DECL|method|withMessageHistory (boolean messageHistory)
specifier|public
name|T
name|withMessageHistory
parameter_list|(
name|boolean
name|messageHistory
parameter_list|)
block|{
name|this
operator|.
name|messageHistory
operator|=
name|messageHistory
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets whether log mask is enabled or not.      *      * Default is false.      */
DECL|method|withLogMask (boolean logMask)
specifier|public
name|T
name|withLogMask
parameter_list|(
name|boolean
name|logMask
parameter_list|)
block|{
name|this
operator|.
name|logMask
operator|=
name|logMask
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets whether to log exhausted message body with message history.      *      * Default is false.      */
DECL|method|withLogExhaustedMessageBody (boolean logExhaustedMessageBody)
specifier|public
name|T
name|withLogExhaustedMessageBody
parameter_list|(
name|boolean
name|logExhaustedMessageBody
parameter_list|)
block|{
name|this
operator|.
name|logExhaustedMessageBody
operator|=
name|logExhaustedMessageBody
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets whether the object should automatically start when Camel starts.      * Important: Currently only routes can be disabled, as CamelContext's are always started.      * Note: When setting auto startup false on CamelContext then that takes precedence      * and no routes is started. You would need to start CamelContext explicit using      * the org.apache.camel.CamelContext.start() method, to start the context, and then      * you would need to start the routes manually using CamelContext.getRouteController().startRoute(String).      *      * Default is true to always start up.      */
DECL|method|withAutoStartup (boolean autoStartup)
specifier|public
name|T
name|withAutoStartup
parameter_list|(
name|boolean
name|autoStartup
parameter_list|)
block|{
name|this
operator|.
name|autoStartup
operator|=
name|autoStartup
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets whether to allow access to the original message from Camel's error handler,      * or from org.apache.camel.spi.UnitOfWork.getOriginalInMessage().      * Turning this off can optimize performance, as defensive copy of the original message is not needed.      *      * Default is false.      */
DECL|method|withAllowUseOriginalMessage (boolean allowUseOriginalMessage)
specifier|public
name|T
name|withAllowUseOriginalMessage
parameter_list|(
name|boolean
name|allowUseOriginalMessage
parameter_list|)
block|{
name|this
operator|.
name|allowUseOriginalMessage
operator|=
name|allowUseOriginalMessage
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets whether endpoint runtime statistics is enabled (gathers runtime usage of each incoming and outgoing endpoints).      *      * The default value is false.      */
DECL|method|withEndpointRuntimeStatisticsEnabled (boolean endpointRuntimeStatisticsEnabled)
specifier|public
name|T
name|withEndpointRuntimeStatisticsEnabled
parameter_list|(
name|boolean
name|endpointRuntimeStatisticsEnabled
parameter_list|)
block|{
name|this
operator|.
name|endpointRuntimeStatisticsEnabled
operator|=
name|endpointRuntimeStatisticsEnabled
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Whether to enable using data type on Camel messages.      *      * Data type are automatic turned on if one ore more routes has been explicit configured with input and output types.      * Otherwise data type is default off.      */
DECL|method|withUseDataType (boolean useDataType)
specifier|public
name|T
name|withUseDataType
parameter_list|(
name|boolean
name|useDataType
parameter_list|)
block|{
name|this
operator|.
name|useDataType
operator|=
name|useDataType
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Set whether breadcrumb is enabled.      * The default value is false.      */
DECL|method|withUseBreadcrumb (boolean useBreadcrumb)
specifier|public
name|T
name|withUseBreadcrumb
parameter_list|(
name|boolean
name|useBreadcrumb
parameter_list|)
block|{
name|this
operator|.
name|useBreadcrumb
operator|=
name|useBreadcrumb
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets the JMX statistics level      * The level can be set to Extended to gather additional information      *      * The default value is Default.      */
DECL|method|withJmxManagementStatisticsLevel (ManagementStatisticsLevel jmxManagementStatisticsLevel)
specifier|public
name|T
name|withJmxManagementStatisticsLevel
parameter_list|(
name|ManagementStatisticsLevel
name|jmxManagementStatisticsLevel
parameter_list|)
block|{
name|this
operator|.
name|jmxManagementStatisticsLevel
operator|=
name|jmxManagementStatisticsLevel
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * The naming pattern for creating the CamelContext JMX management name.      *      * The default pattern is #name#      */
DECL|method|withJmxManagementNamePattern (String jmxManagementNamePattern)
specifier|public
name|T
name|withJmxManagementNamePattern
parameter_list|(
name|String
name|jmxManagementNamePattern
parameter_list|)
block|{
name|this
operator|.
name|jmxManagementNamePattern
operator|=
name|jmxManagementNamePattern
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Whether JMX connector is created, allowing clients to connect remotely      *      * The default value is false.      */
DECL|method|withJmxCreateConnector (boolean jmxCreateConnector)
specifier|public
name|T
name|withJmxCreateConnector
parameter_list|(
name|boolean
name|jmxCreateConnector
parameter_list|)
block|{
name|this
operator|.
name|jmxCreateConnector
operator|=
name|jmxCreateConnector
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * To turn on MDC logging      */
DECL|method|withUseMdcLogging (boolean useMdcLogging)
specifier|public
name|T
name|withUseMdcLogging
parameter_list|(
name|boolean
name|useMdcLogging
parameter_list|)
block|{
name|this
operator|.
name|useMdcLogging
operator|=
name|useMdcLogging
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets the thread name pattern used for creating the full thread name.      *      * The default pattern is: Camel (#camelId#) thread ##counter# - #name#      *      * Where #camelId# is the name of the CamelContext.      * and #counter# is a unique incrementing counter.      * and #name# is the regular thread name.      *      * You can also use #longName# which is the long thread name which can includes endpoint parameters etc.      */
DECL|method|withThreadNamePattern (String threadNamePattern)
specifier|public
name|T
name|withThreadNamePattern
parameter_list|(
name|String
name|threadNamePattern
parameter_list|)
block|{
name|this
operator|.
name|threadNamePattern
operator|=
name|threadNamePattern
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Used for filtering routes routes matching the given pattern, which follows the following rules:      *      * - Match by route id      * - Match by route input endpoint uri      *      * The matching is using exact match, by wildcard and regular expression as documented by {@link PatternHelper#matchPattern(String, String)}.      *      * For example to only include routes which starts with foo in their route id's, use: include=foo&#42;      * And to exclude routes which starts from JMS endpoints, use: exclude=jms:&#42;      *      * Multiple patterns can be separated by comma, for example to exclude both foo and bar routes, use: exclude=foo&#42;,bar&#42;      *      * Exclude takes precedence over include.      */
DECL|method|withRouteFilterIncludePattern (String routeFilterIncludePattern)
specifier|public
name|T
name|withRouteFilterIncludePattern
parameter_list|(
name|String
name|routeFilterIncludePattern
parameter_list|)
block|{
name|this
operator|.
name|routeFilterIncludePattern
operator|=
name|routeFilterIncludePattern
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Used for filtering routes routes matching the given pattern, which follows the following rules:      *      * - Match by route id      * - Match by route input endpoint uri      *      * The matching is using exact match, by wildcard and regular expression as documented by {@link PatternHelper#matchPattern(String, String)}.      *      * For example to only include routes which starts with foo in their route id's, use: include=foo&#42;      * And to exclude routes which starts from JMS endpoints, use: exclude=jms:&#42;      *      * Multiple patterns can be separated by comma, for example to exclude both foo and bar routes, use: exclude=foo&#42;,bar&#42;      *      * Exclude takes precedence over include.      */
DECL|method|withRouteFilterExcludePattern (String routeFilterExcludePattern)
specifier|public
name|T
name|withRouteFilterExcludePattern
parameter_list|(
name|String
name|routeFilterExcludePattern
parameter_list|)
block|{
name|this
operator|.
name|routeFilterExcludePattern
operator|=
name|routeFilterExcludePattern
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
block|}
end_class

end_unit

