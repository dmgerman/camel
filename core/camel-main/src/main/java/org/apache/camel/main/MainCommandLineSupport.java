begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.main
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Support for command line arguments to Camel main.  */
end_comment

begin_class
DECL|class|MainCommandLineSupport
specifier|public
specifier|abstract
class|class
name|MainCommandLineSupport
extends|extends
name|MainSupport
block|{
DECL|field|options
specifier|protected
specifier|final
name|List
argument_list|<
name|Option
argument_list|>
name|options
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|MainCommandLineSupport (Class... configurationClasses)
specifier|public
name|MainCommandLineSupport
parameter_list|(
name|Class
modifier|...
name|configurationClasses
parameter_list|)
block|{
name|super
argument_list|(
name|configurationClasses
argument_list|)
expr_stmt|;
block|}
DECL|method|MainCommandLineSupport ()
specifier|public
name|MainCommandLineSupport
parameter_list|()
block|{
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|"Displays the help screen"
argument_list|)
block|{
specifier|protected
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
name|showOptions
argument_list|()
expr_stmt|;
name|completed
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
operator|new
name|ParameterOption
argument_list|(
literal|"r"
argument_list|,
literal|"routers"
argument_list|,
literal|"Sets the router builder classes which will be loaded while starting the camel context"
argument_list|,
literal|"routerBuilderClasses"
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|String
name|parameter
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
name|setRouteBuilderClasses
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
operator|new
name|ParameterOption
argument_list|(
literal|"d"
argument_list|,
literal|"duration"
argument_list|,
literal|"Sets the time duration (seconds) that the application will run for before terminating."
argument_list|,
literal|"duration"
argument_list|)
block|{
specifier|protected
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|String
name|parameter
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
comment|// skip second marker to be backwards compatible
if|if
condition|(
name|parameter
operator|.
name|endsWith
argument_list|(
literal|"s"
argument_list|)
operator|||
name|parameter
operator|.
name|endsWith
argument_list|(
literal|"S"
argument_list|)
condition|)
block|{
name|parameter
operator|=
name|parameter
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|parameter
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|configure
argument_list|()
operator|.
name|setDurationMaxSeconds
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|parameter
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
operator|new
name|ParameterOption
argument_list|(
literal|"dm"
argument_list|,
literal|"durationMaxMessages"
argument_list|,
literal|"Sets the duration of maximum number of messages that the application will process before terminating."
argument_list|,
literal|"durationMaxMessages"
argument_list|)
block|{
specifier|protected
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|String
name|parameter
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
name|configure
argument_list|()
operator|.
name|setDurationMaxMessages
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|parameter
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
operator|new
name|ParameterOption
argument_list|(
literal|"di"
argument_list|,
literal|"durationIdle"
argument_list|,
literal|"Sets the idle time duration (seconds) duration that the application can be idle before terminating."
argument_list|,
literal|"durationIdle"
argument_list|)
block|{
specifier|protected
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|String
name|parameter
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
comment|// skip second marker to be backwards compatible
if|if
condition|(
name|parameter
operator|.
name|endsWith
argument_list|(
literal|"s"
argument_list|)
operator|||
name|parameter
operator|.
name|endsWith
argument_list|(
literal|"S"
argument_list|)
condition|)
block|{
name|parameter
operator|=
name|parameter
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|parameter
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|configure
argument_list|()
operator|.
name|setDurationMaxIdleSeconds
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|parameter
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"t"
argument_list|,
literal|"trace"
argument_list|,
literal|"Enables tracing"
argument_list|)
block|{
specifier|protected
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
name|enableTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
operator|new
name|ParameterOption
argument_list|(
literal|"e"
argument_list|,
literal|"exitcode"
argument_list|,
literal|"Sets the exit code if duration was hit"
argument_list|,
literal|"exitcode"
argument_list|)
block|{
specifier|protected
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|String
name|parameter
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
name|configure
argument_list|()
operator|.
name|setDurationHitExitCode
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|parameter
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
operator|new
name|ParameterOption
argument_list|(
literal|"pl"
argument_list|,
literal|"propertiesLocation"
argument_list|,
literal|"Sets location(s) to load properties, such as from classpath or file system."
argument_list|,
literal|"propertiesLocation"
argument_list|)
block|{
specifier|protected
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|String
name|parameter
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
name|setPropertyPlaceholderLocations
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Displays the command line options.      */
DECL|method|showOptions ()
specifier|public
name|void
name|showOptions
parameter_list|()
block|{
name|showOptionsHeader
argument_list|()
expr_stmt|;
for|for
control|(
name|Option
name|option
range|:
name|options
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|option
operator|.
name|getInformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Parses the command line arguments.      */
DECL|method|parseArguments (String[] arguments)
specifier|public
name|void
name|parseArguments
parameter_list|(
name|String
index|[]
name|arguments
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|arguments
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|valid
init|=
literal|true
decl_stmt|;
while|while
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|arg
init|=
name|args
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
name|boolean
name|handled
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Option
name|option
range|:
name|options
control|)
block|{
if|if
condition|(
name|option
operator|.
name|processOption
argument_list|(
name|arg
argument_list|,
name|args
argument_list|)
condition|)
block|{
name|handled
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|handled
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unknown option: "
operator|+
name|arg
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|valid
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|valid
condition|)
block|{
name|showOptions
argument_list|()
expr_stmt|;
name|completed
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addOption (Option option)
specifier|public
name|void
name|addOption
parameter_list|(
name|Option
name|option
parameter_list|)
block|{
name|options
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
comment|/**      * Parses the command line arguments then runs the program.      */
DECL|method|run (String[] args)
specifier|public
name|void
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|run
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MainSupport exiting code: {}"
argument_list|,
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Displays the header message for the command line options.      */
DECL|method|showOptionsHeader ()
specifier|public
name|void
name|showOptionsHeader
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Apache Camel Runner takes the following options"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
DECL|class|ParameterOption
specifier|public
specifier|abstract
class|class
name|ParameterOption
extends|extends
name|Option
block|{
DECL|field|parameterName
specifier|private
name|String
name|parameterName
decl_stmt|;
DECL|method|ParameterOption (String abbreviation, String fullName, String description, String parameterName)
specifier|protected
name|ParameterOption
parameter_list|(
name|String
name|abbreviation
parameter_list|,
name|String
name|fullName
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|parameterName
parameter_list|)
block|{
name|super
argument_list|(
name|abbreviation
argument_list|,
name|fullName
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|this
operator|.
name|parameterName
operator|=
name|parameterName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doProcess (String arg, LinkedList<String> remainingArgs)
specifier|protected
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
if|if
condition|(
name|remainingArgs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Expected fileName for "
argument_list|)
expr_stmt|;
name|showOptions
argument_list|()
expr_stmt|;
name|completed
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|parameter
init|=
name|remainingArgs
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
name|doProcess
argument_list|(
name|arg
argument_list|,
name|parameter
argument_list|,
name|remainingArgs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getInformation ()
specifier|public
name|String
name|getInformation
parameter_list|()
block|{
return|return
literal|"  "
operator|+
name|getAbbreviation
argument_list|()
operator|+
literal|" or "
operator|+
name|getFullName
argument_list|()
operator|+
literal|"<"
operator|+
name|parameterName
operator|+
literal|"> = "
operator|+
name|getDescription
argument_list|()
return|;
block|}
DECL|method|doProcess (String arg, String parameter, LinkedList<String> remainingArgs)
specifier|protected
specifier|abstract
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|String
name|parameter
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

