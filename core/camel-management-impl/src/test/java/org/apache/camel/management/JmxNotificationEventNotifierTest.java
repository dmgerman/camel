begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Notification
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotificationFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotificationListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|JmxNotificationEventNotifierTest
specifier|public
class|class
name|JmxNotificationEventNotifierTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|notifier
specifier|private
name|JmxNotificationEventNotifier
name|notifier
decl_stmt|;
annotation|@
name|Override
DECL|method|useJmx ()
specifier|protected
name|boolean
name|useJmx
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: e1
comment|// Set up the JmxNotificationEventNotifier
name|notifier
operator|=
operator|new
name|JmxNotificationEventNotifier
argument_list|()
expr_stmt|;
name|notifier
operator|.
name|setSource
argument_list|(
literal|"MyCamel"
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|setIgnoreCamelContextEvents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|setIgnoreRouteEvents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|setIgnoreServiceEvents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|(
name|createRegistry
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|addEventNotifier
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
comment|// END SNIPPET: e1
return|return
name|context
return|;
block|}
annotation|@
name|Test
DECL|method|testExchangeDone ()
specifier|public
name|void
name|testExchangeDone
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: e2
comment|// register the NotificationListener
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"org.apache.camel:context=camel-1,type=eventnotifiers,name=JmxEventNotifier"
argument_list|)
decl_stmt|;
name|MyNotificationListener
name|listener
init|=
operator|new
name|MyNotificationListener
argument_list|()
decl_stmt|;
name|context
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
operator|.
name|addNotificationListener
argument_list|(
name|on
argument_list|,
name|listener
argument_list|,
operator|new
name|NotificationFilter
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|boolean
name|isNotificationEnabled
parameter_list|(
name|Notification
name|notification
parameter_list|)
block|{
return|return
name|notification
operator|.
name|getSource
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MyCamel"
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// END SNIPPET: e2
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong number of events"
argument_list|,
literal|8
argument_list|,
name|listener
operator|.
name|getEventCounter
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExchangeFailed ()
specifier|public
name|void
name|testExchangeFailed
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"org.apache.camel:context=camel-1,type=eventnotifiers,name=JmxEventNotifier"
argument_list|)
decl_stmt|;
name|MyNotificationListener
name|listener
init|=
operator|new
name|MyNotificationListener
argument_list|()
decl_stmt|;
name|context
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
operator|.
name|addNotificationListener
argument_list|(
name|on
argument_list|,
name|listener
argument_list|,
operator|new
name|NotificationFilter
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|boolean
name|isNotificationEnabled
parameter_list|(
name|Notification
name|notification
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:fail"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected
name|assertIsInstanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Get a wrong number of events"
argument_list|,
literal|4
argument_list|,
name|listener
operator|.
name|getEventCounter
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:foo"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:fail"
argument_list|)
operator|.
name|throwException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Damn"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|MyNotificationListener
specifier|private
class|class
name|MyNotificationListener
implements|implements
name|NotificationListener
block|{
DECL|field|eventCounter
specifier|private
name|int
name|eventCounter
decl_stmt|;
DECL|method|handleNotification (Notification notification, Object handback)
specifier|public
name|void
name|handleNotification
parameter_list|(
name|Notification
name|notification
parameter_list|,
name|Object
name|handback
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Get the notification : "
operator|+
name|notification
argument_list|)
expr_stmt|;
name|eventCounter
operator|++
expr_stmt|;
block|}
DECL|method|getEventCounter ()
specifier|public
name|int
name|getEventCounter
parameter_list|()
block|{
return|return
name|eventCounter
return|;
block|}
block|}
block|}
end_class

end_unit

