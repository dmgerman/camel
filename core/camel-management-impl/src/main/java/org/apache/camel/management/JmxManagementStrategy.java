begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NamedNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementObjectNameStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementObjectStrategy
import|;
end_import

begin_comment
comment|/**  * A JMX capable {@link org.apache.camel.spi.ManagementStrategy} that Camel by default uses if possible.  *<p/>  * Camel detects whether its possible to use this JMX capable strategy and if<b>not</b> then Camel  * will fallback to the {@link DefaultManagementStrategy} instead.  *  * @see org.apache.camel.spi.ManagementStrategy  */
end_comment

begin_class
DECL|class|JmxManagementStrategy
specifier|public
class|class
name|JmxManagementStrategy
extends|extends
name|DefaultManagementStrategy
block|{
DECL|method|JmxManagementStrategy ()
specifier|public
name|JmxManagementStrategy
parameter_list|()
block|{     }
DECL|method|JmxManagementStrategy (CamelContext context, ManagementAgent managementAgent)
specifier|public
name|JmxManagementStrategy
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|ManagementAgent
name|managementAgent
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|managementAgent
argument_list|)
expr_stmt|;
comment|// add JMX capable CamelContext as extension
name|context
operator|.
name|setExtension
argument_list|(
name|ManagedCamelContext
operator|.
name|class
argument_list|,
operator|new
name|ManagedCamelContextImpl
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|manageObject (Object managedObject)
specifier|public
name|void
name|manageObject
parameter_list|(
name|Object
name|managedObject
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectName
name|objectName
init|=
name|getManagementObjectNameStrategy
argument_list|()
operator|.
name|getObjectName
argument_list|(
name|managedObject
argument_list|)
decl_stmt|;
if|if
condition|(
name|objectName
operator|!=
literal|null
condition|)
block|{
name|getManagementAgent
argument_list|()
operator|.
name|register
argument_list|(
name|managedObject
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|unmanageObject (Object managedObject)
specifier|public
name|void
name|unmanageObject
parameter_list|(
name|Object
name|managedObject
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectName
name|objectName
init|=
name|getManagementObjectNameStrategy
argument_list|()
operator|.
name|getObjectName
argument_list|(
name|managedObject
argument_list|)
decl_stmt|;
if|if
condition|(
name|objectName
operator|!=
literal|null
condition|)
block|{
name|getManagementAgent
argument_list|()
operator|.
name|unregister
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isManaged (Object managedObject)
specifier|public
name|boolean
name|isManaged
parameter_list|(
name|Object
name|managedObject
parameter_list|)
block|{
try|try
block|{
name|ObjectName
name|name
init|=
name|getManagementObjectNameStrategy
argument_list|()
operator|.
name|getObjectName
argument_list|(
name|managedObject
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
return|return
name|getManagementAgent
argument_list|()
operator|.
name|isRegistered
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot check whether the managed object is registered. This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|isManagedName (Object name)
specifier|public
name|boolean
name|isManagedName
parameter_list|(
name|Object
name|name
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|name
operator|instanceof
name|ObjectName
condition|)
block|{
return|return
name|getManagementAgent
argument_list|()
operator|.
name|isRegistered
argument_list|(
operator|(
name|ObjectName
operator|)
name|name
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot check whether the managed object is registered. This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|manageProcessor (NamedNode definition)
specifier|public
name|boolean
name|manageProcessor
parameter_list|(
name|NamedNode
name|definition
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"JMX is enabled"
argument_list|)
expr_stmt|;
name|doStartManagementStrategy
argument_list|()
expr_stmt|;
block|}
DECL|method|createManagementObjectNameStrategy (String domain)
specifier|protected
name|ManagementObjectNameStrategy
name|createManagementObjectNameStrategy
parameter_list|(
name|String
name|domain
parameter_list|)
block|{
return|return
operator|new
name|DefaultManagementObjectNameStrategy
argument_list|(
name|domain
argument_list|)
return|;
block|}
DECL|method|createManagementObjectStrategy ()
specifier|protected
name|ManagementObjectStrategy
name|createManagementObjectStrategy
parameter_list|()
block|{
return|return
operator|new
name|DefaultManagementObjectStrategy
argument_list|()
return|;
block|}
block|}
end_class

end_unit

