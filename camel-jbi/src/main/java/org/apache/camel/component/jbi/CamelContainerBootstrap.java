begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jbi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jbi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|JBIException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|component
operator|.
name|Bootstrap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|component
operator|.
name|InstallationContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_comment
comment|/**  * Base class for components bootstrap.  * @version $Revision: 426415 $  */
end_comment

begin_class
DECL|class|CamelContainerBootstrap
specifier|public
class|class
name|CamelContainerBootstrap
implements|implements
name|Bootstrap
block|{
DECL|field|logger
specifier|protected
specifier|final
specifier|transient
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|context
specifier|protected
name|InstallationContext
name|context
decl_stmt|;
DECL|field|mbeanName
specifier|protected
name|ObjectName
name|mbeanName
decl_stmt|;
DECL|method|CamelContainerBootstrap ()
specifier|public
name|CamelContainerBootstrap
parameter_list|()
block|{     }
DECL|method|getExtensionMBeanName ()
specifier|public
name|ObjectName
name|getExtensionMBeanName
parameter_list|()
block|{
return|return
name|mbeanName
return|;
block|}
DECL|method|getExtensionMBean ()
specifier|protected
name|Object
name|getExtensionMBean
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
DECL|method|createExtensionMBeanName ()
specifier|protected
name|ObjectName
name|createExtensionMBeanName
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|this
operator|.
name|context
operator|.
name|getContext
argument_list|()
operator|.
name|getMBeanNames
argument_list|()
operator|.
name|createCustomComponentMBeanName
argument_list|(
literal|"bootstrap"
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)      * @see javax.jbi.component.Bootstrap#init(javax.jbi.component.InstallationContext)      */
DECL|method|init (InstallationContext installContext)
specifier|public
name|void
name|init
parameter_list|(
name|InstallationContext
name|installContext
parameter_list|)
throws|throws
name|JBIException
block|{
try|try
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Initializing bootstrap"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|context
operator|=
name|installContext
expr_stmt|;
name|doInit
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Bootstrap initialized"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JBIException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JBIException
argument_list|(
literal|"Error calling init"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|doInit ()
specifier|protected
name|void
name|doInit
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
name|mbean
init|=
name|getExtensionMBean
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbean
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|mbeanName
operator|=
name|createExtensionMBeanName
argument_list|()
expr_stmt|;
name|MBeanServer
name|server
init|=
name|this
operator|.
name|context
operator|.
name|getContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JBIException
argument_list|(
literal|"null mBeanServer"
argument_list|)
throw|;
block|}
if|if
condition|(
name|server
operator|.
name|isRegistered
argument_list|(
name|this
operator|.
name|mbeanName
argument_list|)
condition|)
block|{
name|server
operator|.
name|unregisterMBean
argument_list|(
name|this
operator|.
name|mbeanName
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|registerMBean
argument_list|(
name|mbean
argument_list|,
name|this
operator|.
name|mbeanName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc)      * @see javax.jbi.component.Bootstrap#cleanUp()      */
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|JBIException
block|{
try|try
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Cleaning up bootstrap"
argument_list|)
expr_stmt|;
block|}
name|doCleanUp
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Bootstrap cleaned up"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JBIException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JBIException
argument_list|(
literal|"Error calling cleanUp"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|doCleanUp ()
specifier|protected
name|void
name|doCleanUp
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|mbeanName
operator|!=
literal|null
condition|)
block|{
name|MBeanServer
name|server
init|=
name|this
operator|.
name|context
operator|.
name|getContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JBIException
argument_list|(
literal|"null mBeanServer"
argument_list|)
throw|;
block|}
if|if
condition|(
name|server
operator|.
name|isRegistered
argument_list|(
name|this
operator|.
name|mbeanName
argument_list|)
condition|)
block|{
name|server
operator|.
name|unregisterMBean
argument_list|(
name|this
operator|.
name|mbeanName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* (non-Javadoc)      * @see javax.jbi.component.Bootstrap#onInstall()      */
DECL|method|onInstall ()
specifier|public
name|void
name|onInstall
parameter_list|()
throws|throws
name|JBIException
block|{
try|try
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Bootstrap onInstall"
argument_list|)
expr_stmt|;
block|}
name|doOnInstall
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Bootstrap onInstall done"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JBIException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JBIException
argument_list|(
literal|"Error calling onInstall"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|doOnInstall ()
specifier|protected
name|void
name|doOnInstall
parameter_list|()
throws|throws
name|Exception
block|{     }
comment|/* (non-Javadoc)      * @see javax.jbi.component.Bootstrap#onUninstall()      */
DECL|method|onUninstall ()
specifier|public
name|void
name|onUninstall
parameter_list|()
throws|throws
name|JBIException
block|{
try|try
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Bootstrap onUninstall"
argument_list|)
expr_stmt|;
block|}
name|doOnUninstall
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Bootstrap onUninstall done"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JBIException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JBIException
argument_list|(
literal|"Error calling onUninstall"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|doOnUninstall ()
specifier|protected
name|void
name|doOnUninstall
parameter_list|()
throws|throws
name|Exception
block|{     }
block|}
end_class

end_unit

