begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jbi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jbi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|messaging
operator|.
name|NormalizedMessage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A JBI {@link Message} which provides access to the underlying JBI features such as {@link #getNormalizedMessage()}  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|JbiMessage
specifier|public
class|class
name|JbiMessage
extends|extends
name|DefaultMessage
block|{
DECL|field|normalizedMessage
specifier|private
name|NormalizedMessage
name|normalizedMessage
decl_stmt|;
DECL|method|JbiMessage ()
specifier|public
name|JbiMessage
parameter_list|()
block|{     }
DECL|method|JbiMessage (NormalizedMessage normalizedMessage)
specifier|public
name|JbiMessage
parameter_list|(
name|NormalizedMessage
name|normalizedMessage
parameter_list|)
block|{
name|this
operator|.
name|normalizedMessage
operator|=
name|normalizedMessage
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|normalizedMessage
operator|!=
literal|null
condition|)
block|{
return|return
literal|"JbiMessage: "
operator|+
name|normalizedMessage
return|;
block|}
else|else
block|{
return|return
literal|"JbiMessage: "
operator|+
name|getBody
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getExchange ()
specifier|public
name|JbiExchange
name|getExchange
parameter_list|()
block|{
return|return
operator|(
name|JbiExchange
operator|)
name|super
operator|.
name|getExchange
argument_list|()
return|;
block|}
comment|/**      * Returns the underlying JBI message      *      * @return the underlying JBI message      */
DECL|method|getNormalizedMessage ()
specifier|public
name|NormalizedMessage
name|getNormalizedMessage
parameter_list|()
block|{
return|return
name|normalizedMessage
return|;
block|}
DECL|method|setNormalizedMessage (NormalizedMessage normalizedMessage)
specifier|public
name|void
name|setNormalizedMessage
parameter_list|(
name|NormalizedMessage
name|normalizedMessage
parameter_list|)
block|{
name|this
operator|.
name|normalizedMessage
operator|=
name|normalizedMessage
expr_stmt|;
block|}
DECL|method|getHeader (String name)
specifier|public
name|Object
name|getHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Object
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|normalizedMessage
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|normalizedMessage
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|super
operator|.
name|getHeader
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|newInstance ()
specifier|public
name|JbiMessage
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|JbiMessage
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createBody ()
specifier|protected
name|Object
name|createBody
parameter_list|()
block|{
if|if
condition|(
name|normalizedMessage
operator|!=
literal|null
condition|)
block|{
return|return
name|getExchange
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|extractBodyFromJbi
argument_list|(
name|getExchange
argument_list|()
argument_list|,
name|normalizedMessage
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|populateInitialHeaders (Map<String, Object> map)
specifier|protected
name|void
name|populateInitialHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|normalizedMessage
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|iter
init|=
name|normalizedMessage
operator|.
name|getPropertyNames
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|normalizedMessage
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

