begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|JsonSchemaHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|DocumentationEnricher
specifier|public
class|class
name|DocumentationEnricher
block|{
DECL|method|enrichTopLevelElementsDocumentation (Document document, NodeList elements, Map<String, File> jsonFiles)
specifier|public
name|void
name|enrichTopLevelElementsDocumentation
parameter_list|(
name|Document
name|document
parameter_list|,
name|NodeList
name|elements
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|jsonFiles
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|item
init|=
operator|(
name|Element
operator|)
name|elements
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|item
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|NAME_ATTRIBUTE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonFiles
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|addDocumentation
argument_list|(
name|document
argument_list|,
name|item
argument_list|,
name|jsonFiles
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addDocumentation (Document document, Element item, File jsonFile)
specifier|private
name|void
name|addDocumentation
parameter_list|(
name|Document
name|document
parameter_list|,
name|Element
name|item
parameter_list|,
name|File
name|jsonFile
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JsonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
name|Constants
operator|.
name|MODEL_ATTRIBUTE_NAME
argument_list|,
name|PackageHelper
operator|.
name|fileToString
argument_list|(
name|jsonFile
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
name|Constants
operator|.
name|DESCRIPTION_ATTRIBUTE_NAME
argument_list|)
condition|)
block|{
name|String
name|descriptionText
init|=
name|row
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|DESCRIPTION_ATTRIBUTE_NAME
argument_list|)
decl_stmt|;
name|addDocumentation
argument_list|(
name|document
argument_list|,
name|item
argument_list|,
name|descriptionText
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|addDocumentation (Document document, Element item, String textContent)
specifier|private
name|void
name|addDocumentation
parameter_list|(
name|Document
name|document
parameter_list|,
name|Element
name|item
parameter_list|,
name|String
name|textContent
parameter_list|)
block|{
name|Element
name|annotation
init|=
name|document
operator|.
name|createElement
argument_list|(
name|Constants
operator|.
name|XS_ANNOTATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
name|Element
name|documentation
init|=
name|document
operator|.
name|createElement
argument_list|(
name|Constants
operator|.
name|XS_DOCUMENTATION_ELEMENT_NAME
argument_list|)
decl_stmt|;
name|documentation
operator|.
name|setAttribute
argument_list|(
literal|"xml:lang"
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
name|documentation
operator|.
name|setTextContent
argument_list|(
name|textContent
argument_list|)
expr_stmt|;
name|annotation
operator|.
name|appendChild
argument_list|(
name|documentation
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|item
operator|.
name|insertBefore
argument_list|(
name|annotation
argument_list|,
name|item
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|item
operator|.
name|appendChild
argument_list|(
name|annotation
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|enrichTypeAttributesDocumentation (Document document, NodeList attributeElements, File jsonFile)
specifier|public
name|void
name|enrichTypeAttributesDocumentation
parameter_list|(
name|Document
name|document
parameter_list|,
name|NodeList
name|attributeElements
parameter_list|,
name|File
name|jsonFile
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|attributeElements
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Element
name|item
init|=
operator|(
name|Element
operator|)
name|attributeElements
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|addAttributeDocumentation
argument_list|(
name|item
argument_list|,
name|jsonFile
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addAttributeDocumentation (Element item, File jsonFile, Document document)
specifier|private
name|void
name|addAttributeDocumentation
parameter_list|(
name|Element
name|item
parameter_list|,
name|File
name|jsonFile
parameter_list|,
name|Document
name|document
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JsonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
name|Constants
operator|.
name|PROPERTIES_ATTRIBUTE_NAME
argument_list|,
name|PackageHelper
operator|.
name|fileToString
argument_list|(
name|jsonFile
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|item
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|NAME_ATTRIBUTE_NAME
argument_list|)
operator|.
name|equals
argument_list|(
name|row
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|NAME_ATTRIBUTE_NAME
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|descriptionText
init|=
name|row
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|DESCRIPTION_ATTRIBUTE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|descriptionText
operator|!=
literal|null
condition|)
block|{
name|addDocumentation
argument_list|(
name|document
argument_list|,
name|item
argument_list|,
name|descriptionText
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

