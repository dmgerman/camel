begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.generator.swagger
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|generator
operator|.
name|swagger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|generator
operator|.
name|swagger
operator|.
name|DestinationGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_class
DECL|class|AbstractGenerateMojo
specifier|abstract
class|class
name|AbstractGenerateMojo
extends|extends
name|AbstractMojo
block|{
annotation|@
name|Parameter
DECL|field|destinationGenerator
name|String
name|destinationGenerator
decl_stmt|;
annotation|@
name|Parameter
DECL|field|filterOperation
name|String
name|filterOperation
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project}"
argument_list|)
DECL|field|project
name|MavenProject
name|project
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|skip
name|boolean
name|skip
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.basedir}/src/spec/swagger.json"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|specificationUri
name|String
name|specificationUri
decl_stmt|;
DECL|method|createDestinationGenerator ()
name|DestinationGenerator
name|createDestinationGenerator
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
specifier|final
name|Class
argument_list|<
name|DestinationGenerator
argument_list|>
name|destinationGeneratorClass
decl_stmt|;
specifier|final
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
specifier|final
name|URL
name|outputDirectory
decl_stmt|;
try|try
block|{
name|outputDirectory
operator|=
operator|new
name|File
argument_list|(
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getOutputDirectory
argument_list|()
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
specifier|final
name|URL
index|[]
name|withOutput
init|=
operator|new
name|URL
index|[]
block|{
name|outputDirectory
block|}
decl_stmt|;
try|try
init|(
name|URLClassLoader
name|classLoader
init|=
operator|new
name|URLClassLoader
argument_list|(
name|withOutput
argument_list|,
name|contextClassLoader
argument_list|)
init|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Class
argument_list|<
name|DestinationGenerator
argument_list|>
name|tmp
init|=
operator|(
name|Class
operator|)
name|classLoader
operator|.
name|loadClass
argument_list|(
name|destinationGenerator
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|DestinationGenerator
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|tmp
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"The given destinationGenerator class ("
operator|+
name|destinationGenerator
operator|+
literal|") does not implement "
operator|+
name|DestinationGenerator
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" interface."
argument_list|)
throw|;
block|}
name|destinationGeneratorClass
operator|=
name|tmp
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassNotFoundException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"The given destinationGenerator class ("
operator|+
name|destinationGenerator
operator|+
literal|") cannot be loaded, make sure that it is present in the COMPILE classpath scope of the project"
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|DestinationGenerator
name|destinationGeneratorObject
decl_stmt|;
try|try
block|{
name|destinationGeneratorObject
operator|=
name|destinationGeneratorClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"The given destinationGenerator class ("
operator|+
name|destinationGenerator
operator|+
literal|") cannot be instantiated, make sure that it is declared as public and that all dependencies are present on the COMPILE classpath scope of the project"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|destinationGeneratorObject
return|;
block|}
block|}
end_class

end_unit

