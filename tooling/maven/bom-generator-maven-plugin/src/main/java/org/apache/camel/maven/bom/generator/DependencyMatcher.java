begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.maven.bom.generator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|bom
operator|.
name|generator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|SelectorUtils
import|;
end_import

begin_comment
comment|/**  * A matcher for Maven dependencies based on a collection of rules.  */
end_comment

begin_class
DECL|class|DependencyMatcher
specifier|public
class|class
name|DependencyMatcher
block|{
DECL|field|ARTIFACT_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|ARTIFACT_FORMAT
init|=
literal|"%s:%s:%s:%s:%s"
decl_stmt|;
DECL|field|ARTIFACT_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|ARTIFACT_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?<groupId>[^:]+):(?<artifactId>[^:]+)(:(?<version>[^:]+))?(:(?<type>[^:]+))?(:(?<classifier>[^:]+))?"
argument_list|)
decl_stmt|;
DECL|field|selectors
specifier|private
name|Collection
argument_list|<
name|String
argument_list|>
name|selectors
decl_stmt|;
DECL|method|DependencyMatcher (Collection<String> selectors)
specifier|public
name|DependencyMatcher
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|selectors
parameter_list|)
block|{
name|this
operator|.
name|selectors
operator|=
name|selectors
expr_stmt|;
block|}
DECL|method|matches (Dependency artifact)
specifier|public
name|boolean
name|matches
parameter_list|(
name|Dependency
name|artifact
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|expanded
init|=
name|expand
argument_list|(
name|selectors
argument_list|)
decl_stmt|;
name|String
name|coordinates
init|=
name|toCoordinates
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|e
range|:
name|expanded
control|)
block|{
if|if
condition|(
name|SelectorUtils
operator|.
name|match
argument_list|(
name|e
argument_list|,
name|coordinates
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|toCoordinates (Dependency artifact)
specifier|private
name|String
name|toCoordinates
parameter_list|(
name|Dependency
name|artifact
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|ARTIFACT_FORMAT
argument_list|,
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|,
name|artifact
operator|.
name|getType
argument_list|()
argument_list|,
name|artifact
operator|.
name|getClassifier
argument_list|()
argument_list|)
return|;
block|}
DECL|method|expand (Collection<String> set)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|expand
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|set
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|exclusion
range|:
name|set
control|)
block|{
name|Matcher
name|m
init|=
name|ARTIFACT_PATTERN
operator|.
name|matcher
argument_list|(
name|exclusion
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Pattern: "
operator|+
name|exclusion
operator|+
literal|" doesn't have the required format."
argument_list|)
throw|;
block|}
name|String
name|groupId
init|=
name|m
operator|.
name|group
argument_list|(
literal|"groupId"
argument_list|)
decl_stmt|;
name|String
name|artifactId
init|=
name|m
operator|.
name|group
argument_list|(
literal|"artifactId"
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|m
operator|.
name|group
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|m
operator|.
name|group
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|classifier
init|=
name|m
operator|.
name|group
argument_list|(
literal|"classifier"
argument_list|)
decl_stmt|;
name|version
operator|=
name|version
operator|!=
literal|null
condition|?
name|version
else|:
literal|"*"
expr_stmt|;
name|type
operator|=
name|type
operator|!=
literal|null
condition|?
name|type
else|:
literal|"*"
expr_stmt|;
name|classifier
operator|=
name|classifier
operator|!=
literal|null
condition|?
name|classifier
else|:
literal|"*"
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|ARTIFACT_FORMAT
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|type
argument_list|,
name|classifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

