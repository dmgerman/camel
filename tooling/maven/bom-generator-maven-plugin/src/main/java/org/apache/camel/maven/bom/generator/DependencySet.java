begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.bom.generator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|bom
operator|.
name|generator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Inclusion and exclusion rules for artifacts.  */
end_comment

begin_class
DECL|class|DependencySet
specifier|public
class|class
name|DependencySet
block|{
DECL|field|includes
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|includes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|excludes
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|excludes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|DependencySet ()
specifier|public
name|DependencySet
parameter_list|()
block|{     }
DECL|method|getIncludes ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getIncludes
parameter_list|()
block|{
return|return
name|includes
return|;
block|}
DECL|method|setIncludes (Set<String> includes)
specifier|public
name|void
name|setIncludes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|includes
parameter_list|)
block|{
name|this
operator|.
name|includes
operator|=
name|includes
expr_stmt|;
block|}
DECL|method|getExcludes ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getExcludes
parameter_list|()
block|{
return|return
name|excludes
return|;
block|}
DECL|method|setExcludes (Set<String> excludes)
specifier|public
name|void
name|setExcludes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|excludes
parameter_list|)
block|{
name|this
operator|.
name|excludes
operator|=
name|excludes
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"DependencySet{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"includes="
argument_list|)
operator|.
name|append
argument_list|(
name|includes
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", excludes="
argument_list|)
operator|.
name|append
argument_list|(
name|excludes
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

