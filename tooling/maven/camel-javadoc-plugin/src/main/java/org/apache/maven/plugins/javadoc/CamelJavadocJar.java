begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.maven.plugins.javadoc
package|package
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|javadoc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiver
operator|.
name|MavenArchiveConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiver
operator|.
name|MavenArchiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|DependencyResolutionRequiredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|handler
operator|.
name|ArtifactHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|LifecyclePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|ResolutionScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|reporting
operator|.
name|MavenReportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|Archiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|ArchiverException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|jar
operator|.
name|JarArchiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|jar
operator|.
name|ManifestException
import|;
end_import

begin_comment
comment|/**  * Bundles the Javadoc documentation for<code>main Java code</code> in an  *<b>NON aggregator</b> project into a jar using the standard<a href=  * "http://docs.oracle.com/javase/7/docs/technotes/guides/javadoc/">Javadoc  * Tool</a>.  *  * @version $Id: JavadocJar.java 1752018 2016-07-09 16:35:25Z rfscholte $  * @since 2.0  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"jar"
argument_list|,
name|defaultPhase
operator|=
name|LifecyclePhase
operator|.
name|PACKAGE
argument_list|,
name|requiresDependencyResolution
operator|=
name|ResolutionScope
operator|.
name|COMPILE
argument_list|,
name|threadSafe
operator|=
literal|true
argument_list|)
DECL|class|CamelJavadocJar
specifier|public
class|class
name|CamelJavadocJar
extends|extends
name|AbstractJavadocMojo
block|{
comment|/**      * Includes all generated Javadoc files      */
DECL|field|DEFAULT_INCLUDES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_INCLUDES
init|=
operator|new
name|String
index|[]
block|{
literal|"**/**"
block|}
decl_stmt|;
comment|/**      * Excludes all processing files.      *      * @see AbstractJavadocMojo#DEBUG_JAVADOC_SCRIPT_NAME      * @see AbstractJavadocMojo#OPTIONS_FILE_NAME      * @see AbstractJavadocMojo#PACKAGES_FILE_NAME      * @see AbstractJavadocMojo#ARGFILE_FILE_NAME      * @see AbstractJavadocMojo#FILES_FILE_NAME      */
DECL|field|DEFAULT_EXCLUDES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_EXCLUDES
init|=
operator|new
name|String
index|[]
block|{
name|DEBUG_JAVADOC_SCRIPT_NAME
block|,
name|OPTIONS_FILE_NAME
block|,
name|PACKAGES_FILE_NAME
block|,
name|ARGFILE_FILE_NAME
block|,
name|FILES_FILE_NAME
block|}
decl_stmt|;
comment|// ----------------------------------------------------------------------
comment|// Mojo components
comment|// ----------------------------------------------------------------------
comment|/**      * Specifies the destination directory where javadoc saves the generated      * HTML files.<br>      *       * @see<a href=      *      "http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#d">d</a>      *      option      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/apidocstmp"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|intermediateDirectory
specifier|protected
name|File
name|intermediateDirectory
decl_stmt|;
comment|/**      * Used for attaching the artifact in the project.      */
annotation|@
name|Component
DECL|field|projectHelper
specifier|private
name|MavenProjectHelper
name|projectHelper
decl_stmt|;
comment|/**      * The Jar archiver.      *      * @since 2.5      */
annotation|@
name|Component
argument_list|(
name|role
operator|=
name|Archiver
operator|.
name|class
argument_list|,
name|hint
operator|=
literal|"jar"
argument_list|)
DECL|field|jarArchiver
specifier|private
name|JarArchiver
name|jarArchiver
decl_stmt|;
comment|// ----------------------------------------------------------------------
comment|// Mojo Parameters
comment|// ----------------------------------------------------------------------
comment|/**      * Specifies the destination directory where javadoc saves the generated      * HTML files. See<a href=      * "http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#d">d</a>.      *      * @deprecated      */
annotation|@
name|Deprecated
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"destDir"
argument_list|)
DECL|field|destDir
specifier|private
name|File
name|destDir
decl_stmt|;
comment|/**      * Specifies the directory where the generated jar file will be put.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"project.build.directory"
argument_list|)
DECL|field|jarOutputDirectory
specifier|private
name|String
name|jarOutputDirectory
decl_stmt|;
comment|/**      * Specifies the filename that will be used for the generated jar file.      * Please note that<code>-javadoc</code> or<code>-test-javadoc</code> will      * be appended to the file name.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"project.build.finalName"
argument_list|)
DECL|field|finalName
specifier|private
name|String
name|finalName
decl_stmt|;
comment|/**      * Specifies whether to attach the generated artifact to the project helper.      *<br/>      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"attach"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|attach
specifier|private
name|boolean
name|attach
decl_stmt|;
comment|/**      * The archive configuration to use. See      *<a href="http://maven.apache.org/shared/maven-archiver/index.html">Maven      * Archiver Reference</a>.      *      * @since 2.5      */
annotation|@
name|Parameter
DECL|field|archive
specifier|private
name|MavenArchiveConfiguration
name|archive
init|=
operator|new
name|JavadocArchiveConfiguration
argument_list|()
block|{
block|{
name|setForced
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**      * Path to the default MANIFEST file to use. It will be used if      *<code>useDefaultManifestFile</code> is set to<code>true</code>.      *      * @since 2.5      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.outputDirectory}/META-INF/MANIFEST.MF"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|readonly
operator|=
literal|true
argument_list|)
DECL|field|defaultManifestFile
specifier|private
name|File
name|defaultManifestFile
decl_stmt|;
comment|/**      * Set this to<code>true</code> to enable the use of the      *<code>defaultManifestFile</code>.<br/>      *      * @since 2.5      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|useDefaultManifestFile
specifier|private
name|boolean
name|useDefaultManifestFile
decl_stmt|;
comment|/**      * @since 2.10      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"maven.javadoc.classifier"
argument_list|,
name|defaultValue
operator|=
literal|"javadoc"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|classifier
specifier|private
name|String
name|classifier
decl_stmt|;
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|doExecute ()
specifier|public
name|void
name|doExecute
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
name|skip
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Skipping javadoc generation"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|Field
name|f
init|=
name|AbstractJavadocMojo
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"additionalOptions"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|additionalOptions
init|=
operator|(
name|String
index|[]
operator|)
name|f
operator|.
name|get
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|additionalOptions
operator|==
literal|null
operator|||
name|additionalOptions
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|additionalOptions
operator|=
operator|new
name|String
index|[]
block|{
literal|"-notimestamp"
block|}
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|additionalOptions
argument_list|)
argument_list|)
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
literal|"-notimestamp"
argument_list|)
expr_stmt|;
name|additionalOptions
operator|=
name|l
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|additionalOptions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to set javadoc options"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|File
name|innerDestDir
init|=
name|this
operator|.
name|destDir
decl_stmt|;
if|if
condition|(
name|innerDestDir
operator|==
literal|null
condition|)
block|{
name|innerDestDir
operator|=
operator|new
name|File
argument_list|(
name|getOutputDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
literal|"pom"
operator|.
name|equalsIgnoreCase
argument_list|(
name|project
operator|.
name|getPackaging
argument_list|()
argument_list|)
operator|&&
name|isAggregator
argument_list|()
operator|)
condition|)
block|{
name|ArtifactHandler
name|artifactHandler
init|=
name|project
operator|.
name|getArtifact
argument_list|()
operator|.
name|getArtifactHandler
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"java"
operator|.
name|equals
argument_list|(
name|artifactHandler
operator|.
name|getLanguage
argument_list|()
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Not executing Javadoc as the project is not a Java classpath-capable package"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
try|try
block|{
name|executeReport
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MavenReportException
name|e
parameter_list|)
block|{
name|failOnError
argument_list|(
literal|"MavenReportException: Error while generating Javadoc"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|failOnError
argument_list|(
literal|"RuntimeException: Error while generating Javadoc"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|innerDestDir
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|Path
name|inputDir
init|=
name|innerDestDir
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|Path
name|outputDir
init|=
name|intermediateDirectory
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|outputDir
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|input
init|=
name|getAllRelativeFiles
argument_list|(
name|inputDir
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|output
init|=
name|getAllRelativeFiles
argument_list|(
name|outputDir
argument_list|)
decl_stmt|;
comment|// remove deleted files
name|output
operator|.
name|removeAll
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|output
operator|.
name|remove
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"META-INF"
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|remove
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"META-INF/MANIFEST.MF"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|output
control|)
block|{
name|Files
operator|.
name|delete
argument_list|(
name|outputDir
operator|.
name|resolve
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// copy all files
for|for
control|(
name|Path
name|p
range|:
name|input
control|)
block|{
name|copy
argument_list|(
name|inputDir
operator|.
name|resolve
argument_list|(
name|p
argument_list|)
argument_list|,
name|outputDir
operator|.
name|resolve
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|File
name|outputFile
init|=
name|generateArchive
argument_list|(
name|intermediateDirectory
argument_list|,
name|finalName
operator|+
literal|"-"
operator|+
name|getClassifier
argument_list|()
operator|+
literal|".jar"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|attach
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"NOT adding javadoc to attached artifacts list."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: these introduced dependencies on the project are
comment|// going to become problematic - can we export it
comment|// through metadata instead?
name|projectHelper
operator|.
name|attachArtifact
argument_list|(
name|project
argument_list|,
literal|"javadoc"
argument_list|,
name|getClassifier
argument_list|()
argument_list|,
name|outputFile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ArchiverException
name|e
parameter_list|)
block|{
name|failOnError
argument_list|(
literal|"ArchiverException: Error while creating archive"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failOnError
argument_list|(
literal|"IOException: Error while creating archive"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|failOnError
argument_list|(
literal|"RuntimeException: Error while creating archive"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*      * private void writeIncrementalInfo(MavenProject project) throws      * MojoExecutionException { try { Path cacheData =      * getIncrementalDataPath(project); String curdata = getIncrementalData();      * Files.createDirectories(cacheData.getParent()); try (Writer w =      * Files.newBufferedWriter(cacheData)) { w.append(curdata); } } catch      * (IOException e) { throw new      * MojoExecutionException("Error checking manifest uptodate status", e); } }      * private boolean isUpToDate(MavenProject project) throws      * MojoExecutionException { long t0 = System.currentTimeMillis(); try { Path      * cacheData = getIncrementalDataPath(project); String prvdata; if      * (Files.isRegularFile(cacheData)) { prvdata = new      * String(Files.readAllBytes(cacheData), StandardCharsets.UTF_8); } else {      * prvdata = null; } String curdata = getIncrementalData(); if      * (curdata.equals(prvdata)) { long lastmod =      * Files.getLastModifiedTime(cacheData).toMillis(); Set<String> stale =      * Stream.concat(Stream.of(new      * File(project.getBuild().getOutputDirectory())),      * project.getArtifacts().stream().map(Artifact::getFile)) .flatMap(f ->      * newer(lastmod, f)) .collect(Collectors.toSet()); if (!stale.isEmpty()) {      * getLog().info("Stale files: " + stale.stream()      * .collect(Collectors.joining(", "))); } else { // everything is in order,      * skip      * getLog().info("Skipping manifest generation, everything is up to date.");      * return true; } } else { if (prvdata == null) {      * getLog().info("No previous run data found, generating manifest."); } else      * { getLog().info("Configuration changed, re-generating manifest."); } } }      * catch (IOException e) { throw new      * MojoExecutionException("Error checking manifest uptodate status", e); }      * finally { long t1 = System.currentTimeMillis();      * getLog().warn("isUpToDate took " + (t1 - t0) + " ms"); } return false; }      * private String getIncrementalData() { return      * getInstructions().entrySet().stream().map(e -> e.getKey() + "=" +      * e.getValue()) .collect(Collectors.joining("\n", "", "\n")); } private      * Path getIncrementalDataPath(MavenProject project) { return      * Paths.get(project.getBuild().getDirectory(), "camel-javadoc-plugin",      * "org.apache.camel_camel-javadoc-plugin_javadoc_xx"); } private long      * lastmod(Path p) { try { return Files.getLastModifiedTime(p).toMillis(); }      * catch (IOException e) { return 0; } } private Stream<String> newer(long      * lastmod, File file) { try { if (file.isDirectory()) { return      * Files.walk(file.toPath()) .filter(Files::isRegularFile) .filter(p ->      * lastmod(p)> lastmod) .map(Path::toString); } else if (file.isFile()) {      * if (lastmod(file.toPath())> lastmod) { if      * (file.getName().endsWith(".jar")) { try (ZipFile zf = new ZipFile(file))      * { return zf.stream() .filter(ze -> !ze.isDirectory()) .filter(ze ->      * ze.getLastModifiedTime().toMillis()> lastmod) .map(ze -> file.toString()      * + "!" + ze.getName()) .collect(Collectors.toList()) .stream(); } } else {      * return Stream.of(file.toString()); } } else { return Stream.empty(); } }      * else { return Stream.empty(); } } catch (IOException e) { throw new      * IOError(e); } }      */
DECL|method|copy (Path in, Path out)
name|void
name|copy
parameter_list|(
name|Path
name|in
parameter_list|,
name|Path
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|in
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Files
operator|.
name|isRegularFile
argument_list|(
name|in
argument_list|)
condition|)
block|{
name|byte
index|[]
name|dataIn
init|=
name|Files
operator|.
name|readAllBytes
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isRegularFile
argument_list|(
name|out
argument_list|)
operator|&&
name|Files
operator|.
name|isReadable
argument_list|(
name|out
argument_list|)
condition|)
block|{
name|byte
index|[]
name|dataOut
init|=
name|Files
operator|.
name|readAllBytes
argument_list|(
name|out
argument_list|)
decl_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|dataIn
argument_list|,
name|dataOut
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|Files
operator|.
name|createDirectories
argument_list|(
name|out
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|,
name|StandardCopyOption
operator|.
name|COPY_ATTRIBUTES
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAllRelativeFiles (Path dir)
name|TreeSet
argument_list|<
name|Path
argument_list|>
name|getAllRelativeFiles
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Files
operator|.
name|walk
argument_list|(
name|dir
argument_list|)
operator|.
name|map
argument_list|(
name|dir
operator|::
name|relativize
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toCollection
argument_list|(
name|TreeSet
operator|::
operator|new
argument_list|)
argument_list|)
return|;
block|}
comment|// ----------------------------------------------------------------------
comment|// Protected methods
comment|// ----------------------------------------------------------------------
comment|/**      * @return the wanted classifier, i.e.<code>javadoc</code> or      *<code>test-javadoc</code>      */
DECL|method|getClassifier ()
specifier|protected
name|String
name|getClassifier
parameter_list|()
block|{
return|return
name|classifier
return|;
block|}
comment|// ----------------------------------------------------------------------
comment|// private methods
comment|// ----------------------------------------------------------------------
comment|/**      * Method that creates the jar file      *      * @param javadocFiles the directory where the generated jar file will be      *            put      * @param jarFileName the filename of the generated jar file      * @return a File object that contains the generated jar file      * @throws ArchiverException {@link ArchiverException}      * @throws IOException {@link IOException}      */
DECL|method|generateArchive (File javadocFiles, String jarFileName)
specifier|private
name|File
name|generateArchive
parameter_list|(
name|File
name|javadocFiles
parameter_list|,
name|String
name|jarFileName
parameter_list|)
throws|throws
name|ArchiverException
throws|,
name|IOException
block|{
name|File
name|javadocJar
init|=
operator|new
name|File
argument_list|(
name|jarOutputDirectory
argument_list|,
name|jarFileName
argument_list|)
decl_stmt|;
name|MavenArchiver
name|archiver
init|=
operator|new
name|MavenArchiver
argument_list|()
decl_stmt|;
name|archiver
operator|.
name|setArchiver
argument_list|(
name|jarArchiver
argument_list|)
expr_stmt|;
name|archiver
operator|.
name|setOutputFile
argument_list|(
name|javadocJar
argument_list|)
expr_stmt|;
name|File
name|contentDirectory
init|=
name|javadocFiles
decl_stmt|;
if|if
condition|(
operator|!
name|contentDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"JAR will be empty - no content was marked for inclusion!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|archiver
operator|.
name|getArchiver
argument_list|()
operator|.
name|addDirectory
argument_list|(
name|contentDirectory
argument_list|,
name|DEFAULT_INCLUDES
argument_list|,
name|DEFAULT_EXCLUDES
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Resource
argument_list|>
name|resources
init|=
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getResources
argument_list|()
decl_stmt|;
for|for
control|(
name|Resource
name|r
range|:
name|resources
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getDirectory
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"maven-shared-archive-resources"
argument_list|)
condition|)
block|{
name|archiver
operator|.
name|getArchiver
argument_list|()
operator|.
name|addDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|r
operator|.
name|getDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|useDefaultManifestFile
operator|&&
name|defaultManifestFile
operator|.
name|exists
argument_list|()
operator|&&
name|archive
operator|.
name|getManifestFile
argument_list|()
operator|==
literal|null
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Adding existing MANIFEST to archive. Found under: "
operator|+
name|defaultManifestFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|archive
operator|.
name|setManifestFile
argument_list|(
name|defaultManifestFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|archive
operator|.
name|getManifestFile
argument_list|()
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|Manifest
name|manifest
init|=
name|archiver
operator|.
name|getManifest
argument_list|(
name|session
argument_list|,
name|project
argument_list|,
name|archive
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|manifest
operator|.
name|write
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|Path
name|man
init|=
name|javadocFiles
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"META-INF/MANIFEST.MF"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isRegularFile
argument_list|(
name|man
argument_list|)
condition|)
block|{
name|data
operator|=
name|Files
operator|.
name|readAllBytes
argument_list|(
name|man
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|data
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|man
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
name|man
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
name|archive
operator|.
name|setManifestFile
argument_list|(
name|man
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ManifestException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchiverException
argument_list|(
literal|"ManifestException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|DependencyResolutionRequiredException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchiverException
argument_list|(
literal|"DependencyResolutionRequiredException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|archiver
operator|.
name|createArchive
argument_list|(
name|session
argument_list|,
name|project
argument_list|,
name|archive
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ManifestException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchiverException
argument_list|(
literal|"ManifestException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|DependencyResolutionRequiredException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ArchiverException
argument_list|(
literal|"DependencyResolutionRequiredException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|javadocJar
return|;
block|}
block|}
end_class

end_unit

