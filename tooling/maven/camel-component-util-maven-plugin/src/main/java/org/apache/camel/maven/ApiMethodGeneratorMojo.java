begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
operator|.
name|ApiMethodParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|Template
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|VelocityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|app
operator|.
name|VelocityEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|RuntimeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|log
operator|.
name|Log4JLogChute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|resource
operator|.
name|loader
operator|.
name|ClasspathResourceLoader
import|;
end_import

begin_comment
comment|/**  * Base Mojo class for ApiMethod generators.  */
end_comment

begin_class
DECL|class|ApiMethodGeneratorMojo
specifier|public
specifier|abstract
class|class
name|ApiMethodGeneratorMojo
extends|extends
name|AbstractMojo
block|{
DECL|field|PREFIX
specifier|protected
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"camel.component.util."
decl_stmt|;
comment|// used for velocity logging, to avoid creating velocity.log
DECL|field|LOG
specifier|private
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project}"
argument_list|,
name|readonly
operator|=
literal|true
argument_list|)
DECL|field|project
name|MavenProject
name|project
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/generated-sources/camelComponent"
argument_list|)
DECL|field|outDir
specifier|protected
name|File
name|outDir
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"org.apache.camel.util.component"
argument_list|)
DECL|field|outPackage
specifier|protected
name|String
name|outPackage
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|required
operator|=
literal|true
argument_list|,
name|property
operator|=
name|PREFIX
operator|+
literal|"proxyClass"
argument_list|)
DECL|field|proxyClass
specifier|protected
name|String
name|proxyClass
decl_stmt|;
comment|// cached fields
DECL|field|proxyType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|proxyType
decl_stmt|;
DECL|field|projectClassLoader
specifier|private
name|ClassLoader
name|projectClassLoader
decl_stmt|;
DECL|field|engine
specifier|private
name|VelocityEngine
name|engine
decl_stmt|;
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
comment|// initialize velocity
name|initVelocityEngine
argument_list|()
expr_stmt|;
comment|// load proxy class and get enumeration file to generate
specifier|final
name|Class
name|proxyType
init|=
name|getProxyType
argument_list|()
decl_stmt|;
comment|// create parser
name|ApiMethodParser
name|parser
init|=
name|createAdapterParser
argument_list|(
name|proxyType
argument_list|)
decl_stmt|;
name|parser
operator|.
name|setSignatures
argument_list|(
name|getSignatureList
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setClassLoader
argument_list|(
name|getProjectClassLoader
argument_list|()
argument_list|)
expr_stmt|;
comment|// parse signatures
specifier|final
name|List
argument_list|<
name|ApiMethodParser
operator|.
name|ApiMethodModel
argument_list|>
name|models
init|=
name|parser
operator|.
name|parse
argument_list|()
decl_stmt|;
comment|// generate enumeration from model
name|generateEnum
argument_list|(
name|models
argument_list|)
expr_stmt|;
block|}
DECL|method|createAdapterParser (Class proxyType)
specifier|protected
name|ApiMethodParser
name|createAdapterParser
parameter_list|(
name|Class
name|proxyType
parameter_list|)
block|{
return|return
operator|new
name|ApiMethodParser
argument_list|(
name|proxyType
argument_list|)
block|{}
return|;
block|}
DECL|method|initVelocityEngine ()
specifier|private
name|void
name|initVelocityEngine
parameter_list|()
block|{
comment|// initialize velocity to load resources from class loader and use Log4J
name|Properties
name|velocityProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|velocityProperties
operator|.
name|setProperty
argument_list|(
name|RuntimeConstants
operator|.
name|RESOURCE_LOADER
argument_list|,
literal|"cloader"
argument_list|)
expr_stmt|;
name|velocityProperties
operator|.
name|setProperty
argument_list|(
literal|"cloader.resource.loader.class"
argument_list|,
name|ClasspathResourceLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|velocityProperties
operator|.
name|setProperty
argument_list|(
name|RuntimeConstants
operator|.
name|RUNTIME_LOG_LOGSYSTEM_CLASS
argument_list|,
name|Log4JLogChute
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|velocityProperties
operator|.
name|setProperty
argument_list|(
name|RuntimeConstants
operator|.
name|RUNTIME_LOG_LOGSYSTEM
operator|+
literal|".log4j.logger"
argument_list|,
name|LOG
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|=
operator|new
name|VelocityEngine
argument_list|(
name|velocityProperties
argument_list|)
expr_stmt|;
name|engine
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
DECL|method|generateEnum (List<ApiMethodParser.ApiMethodModel> models)
specifier|private
name|void
name|generateEnum
parameter_list|(
name|List
argument_list|<
name|ApiMethodParser
operator|.
name|ApiMethodModel
argument_list|>
name|models
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
specifier|final
name|File
name|apiMethodFile
init|=
name|getApiMethodFile
argument_list|()
decl_stmt|;
comment|// ensure parent directories exist
name|apiMethodFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// set template parameters
name|VelocityContext
name|context
init|=
operator|new
name|VelocityContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"generatedDate"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"packageName"
argument_list|,
name|outPackage
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"enumName"
argument_list|,
name|getEnumName
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"models"
argument_list|,
name|models
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"proxyType"
argument_list|,
name|getProxyType
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"helper"
argument_list|,
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// load velocity template
specifier|final
name|Template
name|template
init|=
name|engine
operator|.
name|getTemplate
argument_list|(
literal|"/api-method-enum.vm"
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
comment|// generate Enumeration
name|BufferedWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|apiMethodFile
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|merge
argument_list|(
name|context
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{}
block|}
block|}
block|}
DECL|method|getSignatureList ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|String
argument_list|>
name|getSignatureList
parameter_list|()
throws|throws
name|MojoExecutionException
function_decl|;
DECL|method|getProxyType ()
specifier|public
name|Class
name|getProxyType
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
name|proxyType
operator|==
literal|null
condition|)
block|{
comment|// load proxy class from Project runtime dependencies
try|try
block|{
name|proxyType
operator|=
name|getProjectClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|proxyClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|proxyType
return|;
block|}
DECL|method|getProjectClassLoader ()
specifier|private
name|ClassLoader
name|getProjectClassLoader
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
name|projectClassLoader
operator|==
literal|null
condition|)
block|{
specifier|final
name|List
name|classpathElements
decl_stmt|;
try|try
block|{
name|classpathElements
operator|=
name|project
operator|.
name|getRuntimeClasspathElements
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|DependencyResolutionRequiredException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|URL
index|[]
name|urls
init|=
operator|new
name|URL
index|[
name|classpathElements
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|classpathElements
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|urls
index|[
name|i
index|]
operator|=
operator|new
name|File
argument_list|(
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|projectClassLoader
operator|=
operator|new
name|URLClassLoader
argument_list|(
name|urls
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|projectClassLoader
return|;
block|}
DECL|method|getApiMethodFile ()
specifier|public
name|File
name|getApiMethodFile
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
specifier|final
name|StringBuilder
name|fileName
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|fileName
operator|.
name|append
argument_list|(
name|outPackage
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
name|File
operator|.
name|separator
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|File
operator|.
name|separator
argument_list|)
expr_stmt|;
name|fileName
operator|.
name|append
argument_list|(
name|getEnumName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".java"
argument_list|)
expr_stmt|;
return|return
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|fileName
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getEnumName ()
specifier|private
name|String
name|getEnumName
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
return|return
name|getProxyType
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"ApiMethod"
return|;
block|}
DECL|method|getType (Class<?> clazz)
specifier|public
specifier|static
name|String
name|getType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isArray
argument_list|()
condition|)
block|{
comment|// create a zero length array and get the class from the instance
return|return
literal|"new "
operator|+
name|clazz
operator|.
name|getCanonicalName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\[\\]"
argument_list|,
literal|"[0]"
argument_list|)
operator|+
literal|".getClass()"
return|;
block|}
else|else
block|{
return|return
name|clazz
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|".class"
return|;
block|}
block|}
block|}
end_class

end_unit

