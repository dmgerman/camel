begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
operator|.
name|ApiMethodParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
operator|.
name|ArgumentSubstitutionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|VelocityContext
import|;
end_import

begin_comment
comment|/**  * Base Mojo class for ApiMethod generators.  */
end_comment

begin_class
DECL|class|AbstractApiMethodGeneratorMojo
specifier|public
specifier|abstract
class|class
name|AbstractApiMethodGeneratorMojo
extends|extends
name|AbstractGeneratorMojo
block|{
annotation|@
name|Parameter
argument_list|(
name|required
operator|=
literal|true
argument_list|,
name|property
operator|=
name|PREFIX
operator|+
literal|"proxyClass"
argument_list|)
DECL|field|proxyClass
specifier|protected
name|String
name|proxyClass
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
name|PREFIX
operator|+
literal|"substitutions"
argument_list|)
DECL|field|substitutions
specifier|protected
name|Substitution
index|[]
name|substitutions
init|=
operator|new
name|Substitution
index|[
literal|0
index|]
decl_stmt|;
comment|// cached fields
DECL|field|proxyType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|proxyType
decl_stmt|;
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
comment|// load proxy class and get enumeration file to generate
specifier|final
name|Class
name|proxyType
init|=
name|getProxyType
argument_list|()
decl_stmt|;
comment|// create parser
name|ApiMethodParser
name|parser
init|=
name|createAdapterParser
argument_list|(
name|proxyType
argument_list|)
decl_stmt|;
name|parser
operator|.
name|setSignatures
argument_list|(
name|getSignatureList
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setClassLoader
argument_list|(
name|getProjectClassLoader
argument_list|()
argument_list|)
expr_stmt|;
comment|// parse signatures
specifier|final
name|List
argument_list|<
name|ApiMethodParser
operator|.
name|ApiMethodModel
argument_list|>
name|models
init|=
name|parser
operator|.
name|parse
argument_list|()
decl_stmt|;
comment|// generate enumeration from model
name|mergeTemplate
argument_list|(
name|getApiMethodContext
argument_list|(
name|models
argument_list|)
argument_list|,
name|getApiMethodFile
argument_list|()
argument_list|,
literal|"/api-method-enum.vm"
argument_list|)
expr_stmt|;
block|}
DECL|method|createAdapterParser (Class proxyType)
specifier|protected
name|ApiMethodParser
name|createAdapterParser
parameter_list|(
name|Class
name|proxyType
parameter_list|)
block|{
return|return
operator|new
name|ArgumentSubstitutionParser
argument_list|(
name|proxyType
argument_list|,
name|getArgumentSubstitutions
argument_list|()
argument_list|)
block|{}
return|;
block|}
DECL|method|getApiMethodContext (List<ApiMethodParser.ApiMethodModel> models)
specifier|private
name|VelocityContext
name|getApiMethodContext
parameter_list|(
name|List
argument_list|<
name|ApiMethodParser
operator|.
name|ApiMethodModel
argument_list|>
name|models
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|VelocityContext
name|context
init|=
operator|new
name|VelocityContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"packageName"
argument_list|,
name|outPackage
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"enumName"
argument_list|,
name|getEnumName
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"models"
argument_list|,
name|models
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"proxyType"
argument_list|,
name|getProxyType
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"helper"
argument_list|,
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|getSignatureList ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|String
argument_list|>
name|getSignatureList
parameter_list|()
throws|throws
name|MojoExecutionException
function_decl|;
DECL|method|getProxyType ()
specifier|public
name|Class
name|getProxyType
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
name|proxyType
operator|==
literal|null
condition|)
block|{
comment|// load proxy class from Project runtime dependencies
try|try
block|{
name|proxyType
operator|=
name|getProjectClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|proxyClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|proxyType
return|;
block|}
DECL|method|getApiMethodFile ()
specifier|public
name|File
name|getApiMethodFile
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
specifier|final
name|StringBuilder
name|fileName
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|fileName
operator|.
name|append
argument_list|(
name|outPackage
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
name|File
operator|.
name|separator
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|File
operator|.
name|separator
argument_list|)
expr_stmt|;
name|fileName
operator|.
name|append
argument_list|(
name|getEnumName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".java"
argument_list|)
expr_stmt|;
return|return
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|fileName
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getEnumName ()
specifier|private
name|String
name|getEnumName
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
return|return
name|getProxyType
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"ApiMethod"
return|;
block|}
DECL|method|getType (Class<?> clazz)
specifier|public
specifier|static
name|String
name|getType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isArray
argument_list|()
condition|)
block|{
comment|// create a zero length array and get the class from the instance
return|return
literal|"new "
operator|+
name|clazz
operator|.
name|getCanonicalName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\[\\]"
argument_list|,
literal|"[0]"
argument_list|)
operator|+
literal|".getClass()"
return|;
block|}
else|else
block|{
return|return
name|clazz
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|".class"
return|;
block|}
block|}
DECL|method|getArgumentSubstitutions ()
specifier|public
name|ArgumentSubstitutionParser
operator|.
name|Substitution
index|[]
name|getArgumentSubstitutions
parameter_list|()
block|{
name|ArgumentSubstitutionParser
operator|.
name|Substitution
index|[]
name|subs
init|=
operator|new
name|ArgumentSubstitutionParser
operator|.
name|Substitution
index|[
name|substitutions
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|substitutions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|subs
index|[
name|i
index|]
operator|=
operator|new
name|ArgumentSubstitutionParser
operator|.
name|Substitution
argument_list|(
name|substitutions
index|[
name|i
index|]
operator|.
name|getMethod
argument_list|()
argument_list|,
name|substitutions
index|[
name|i
index|]
operator|.
name|getArgName
argument_list|()
argument_list|,
name|substitutions
index|[
name|i
index|]
operator|.
name|getArgType
argument_list|()
argument_list|,
name|substitutions
index|[
name|i
index|]
operator|.
name|getReplacement
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|subs
return|;
block|}
block|}
end_class

end_unit

