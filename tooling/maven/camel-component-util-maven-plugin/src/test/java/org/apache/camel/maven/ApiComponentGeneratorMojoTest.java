begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|DependencyResolutionRequiredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|app
operator|.
name|VelocityEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests {@link ApiComponentGeneratorMojo}  */
end_comment

begin_class
DECL|class|ApiComponentGeneratorMojoTest
specifier|public
class|class
name|ApiComponentGeneratorMojoTest
extends|extends
name|AbstractGeneratorMojoTest
block|{
DECL|field|COMPONENT_NAME
specifier|private
specifier|static
specifier|final
name|String
name|COMPONENT_NAME
init|=
literal|"TestComponent"
decl_stmt|;
annotation|@
name|Test
DECL|method|testExecute ()
specifier|public
name|void
name|testExecute
parameter_list|()
throws|throws
name|Exception
block|{
comment|// delete target files to begin
specifier|final
name|File
name|outDir
init|=
operator|new
name|File
argument_list|(
name|OUT_DIR
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|removeDir
argument_list|(
name|outDir
argument_list|)
expr_stmt|;
specifier|final
name|File
name|collectionFile
init|=
operator|new
name|File
argument_list|(
name|OUT_DIR
argument_list|,
name|PACKAGE_PATH
operator|+
literal|"/"
operator|+
name|COMPONENT_NAME
operator|+
literal|"ApiCollection.java"
argument_list|)
decl_stmt|;
specifier|final
name|ApiComponentGeneratorMojo
name|mojo
init|=
operator|new
name|ApiComponentGeneratorMojo
argument_list|()
decl_stmt|;
name|mojo
operator|.
name|componentName
operator|=
name|COMPONENT_NAME
expr_stmt|;
name|mojo
operator|.
name|outDir
operator|=
operator|new
name|File
argument_list|(
name|OUT_DIR
argument_list|)
expr_stmt|;
name|mojo
operator|.
name|outPackage
operator|=
name|AbstractGeneratorMojo
operator|.
name|OUT_PACKAGE
expr_stmt|;
name|mojo
operator|.
name|project
operator|=
operator|new
name|MavenProject
argument_list|(
operator|(
name|Model
operator|)
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|List
name|getRuntimeClasspathElements
parameter_list|()
throws|throws
name|DependencyResolutionRequiredException
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
block|}
expr_stmt|;
specifier|final
name|ApiProxy
index|[]
name|proxies
init|=
operator|new
name|ApiProxy
index|[
literal|2
index|]
decl_stmt|;
name|mojo
operator|.
name|apis
operator|=
name|proxies
expr_stmt|;
name|ApiProxy
name|apiProxy
init|=
operator|new
name|ApiProxy
argument_list|()
decl_stmt|;
name|proxies
index|[
literal|0
index|]
operator|=
name|apiProxy
expr_stmt|;
name|apiProxy
operator|.
name|setApiName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|apiProxy
operator|.
name|setProxyClass
argument_list|(
name|TestProxy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|apiProxy
operator|.
name|setSignatureFile
argument_list|(
operator|new
name|File
argument_list|(
literal|"src/test/resources/test-proxy-signatures.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|Substitution
index|[]
name|substitutions
init|=
operator|new
name|Substitution
index|[
literal|1
index|]
decl_stmt|;
name|substitutions
index|[
literal|0
index|]
operator|=
operator|new
name|Substitution
argument_list|(
literal|".+"
argument_list|,
literal|"(.+)"
argument_list|,
literal|"java.util.List"
argument_list|,
literal|"$1List"
argument_list|)
expr_stmt|;
name|apiProxy
operator|.
name|setSubstitutions
argument_list|(
name|substitutions
argument_list|)
expr_stmt|;
name|apiProxy
operator|=
operator|new
name|ApiProxy
argument_list|()
expr_stmt|;
name|proxies
index|[
literal|1
index|]
operator|=
name|apiProxy
expr_stmt|;
name|apiProxy
operator|.
name|setApiName
argument_list|(
literal|"velocity"
argument_list|)
expr_stmt|;
name|apiProxy
operator|.
name|setProxyClass
argument_list|(
name|VelocityEngine
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|mojo
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// check target file was generated
name|assertExists
argument_list|(
name|collectionFile
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

