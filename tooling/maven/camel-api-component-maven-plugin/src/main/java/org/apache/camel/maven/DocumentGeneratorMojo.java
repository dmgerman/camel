begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|component
operator|.
name|ApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|component
operator|.
name|ApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|component
operator|.
name|ApiMethodHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|component
operator|.
name|ApiName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ClassUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|doxia
operator|.
name|siterenderer
operator|.
name|RenderingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|doxia
operator|.
name|siterenderer
operator|.
name|sink
operator|.
name|SiteRendererSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|LifecyclePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|ResolutionScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|reporting
operator|.
name|MavenReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|reporting
operator|.
name|MavenReportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|VelocityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|doxia
operator|.
name|sink
operator|.
name|Sink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Generates documentation for API Component.  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"document"
argument_list|,
name|requiresDependencyResolution
operator|=
name|ResolutionScope
operator|.
name|COMPILE
argument_list|,
name|requiresProject
operator|=
literal|true
argument_list|,
name|defaultPhase
operator|=
name|LifecyclePhase
operator|.
name|SITE
argument_list|,
name|threadSafe
operator|=
literal|true
argument_list|)
DECL|class|DocumentGeneratorMojo
specifier|public
class|class
name|DocumentGeneratorMojo
extends|extends
name|AbstractGeneratorMojo
implements|implements
name|MavenReport
block|{
comment|// document output directory
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
name|PREFIX
operator|+
literal|"reportOutputDirectory"
argument_list|,
name|defaultValue
operator|=
literal|"${project.reporting.outputDirectory}/cameldocs"
argument_list|)
DECL|field|reportOutputDirectory
specifier|private
name|File
name|reportOutputDirectory
decl_stmt|;
comment|// name of destination directory
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
name|PREFIX
operator|+
literal|"destDir"
argument_list|,
name|defaultValue
operator|=
literal|"cameldocs"
argument_list|)
DECL|field|destDir
specifier|private
name|String
name|destDir
decl_stmt|;
comment|/**      * The name of the Camel report to be displayed in the Maven Generated Reports page      * (i.e.<code>project-reports.html</code>).      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"name"
argument_list|)
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
comment|/**      * The description of the Camel report to be displayed in the Maven Generated Reports page      * (i.e.<code>project-reports.html</code>).      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"description"
argument_list|)
DECL|field|description
specifier|private
name|String
name|description
decl_stmt|;
DECL|field|collection
specifier|private
name|ApiCollection
name|collection
decl_stmt|;
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|RenderingContext
name|context
init|=
operator|new
name|RenderingContext
argument_list|(
name|reportOutputDirectory
argument_list|,
name|getOutputName
argument_list|()
operator|+
literal|".html"
argument_list|)
decl_stmt|;
name|SiteRendererSink
name|sink
init|=
operator|new
name|SiteRendererSink
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Locale
name|locale
init|=
name|Locale
operator|.
name|getDefault
argument_list|()
decl_stmt|;
try|try
block|{
name|generate
argument_list|(
name|sink
argument_list|,
name|locale
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MavenReportException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|loadApiCollection ()
specifier|private
name|void
name|loadApiCollection
parameter_list|()
throws|throws
name|MavenReportException
block|{
try|try
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|collectionClass
init|=
name|getProjectClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|outPackage
operator|+
literal|"."
operator|+
name|componentName
operator|+
literal|"ApiCollection"
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|getCollection
init|=
name|collectionClass
operator|.
name|getMethod
argument_list|(
literal|"getCollection"
argument_list|)
decl_stmt|;
name|this
operator|.
name|collection
operator|=
operator|(
name|ApiCollection
operator|)
name|getCollection
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MavenReportException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MavenReportException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MavenReportException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MavenReportException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MojoExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MavenReportException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getDocumentContext ()
specifier|private
name|VelocityContext
name|getDocumentContext
parameter_list|()
throws|throws
name|MavenReportException
block|{
specifier|final
name|VelocityContext
name|context
init|=
operator|new
name|VelocityContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"helper"
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// project GAV
name|context
operator|.
name|put
argument_list|(
literal|"groupId"
argument_list|,
name|project
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"artifactId"
argument_list|,
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|project
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// component URI format
comment|// look for single API, no endpoint-prefix
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|apiNames
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|collection
operator|.
name|getApiNames
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"apiNames"
argument_list|,
name|apiNames
argument_list|)
expr_stmt|;
name|String
name|suffix
decl_stmt|;
if|if
condition|(
name|apiNames
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|(
operator|(
name|Set
operator|)
name|apiNames
operator|)
operator|.
name|contains
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|suffix
operator|=
literal|"://endpoint?[options]"
expr_stmt|;
block|}
else|else
block|{
name|suffix
operator|=
literal|"://endpoint-prefix/endpoint?[options]"
expr_stmt|;
block|}
name|context
operator|.
name|put
argument_list|(
literal|"uriFormat"
argument_list|,
name|scheme
operator|+
name|suffix
argument_list|)
expr_stmt|;
comment|// API helpers
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ApiMethodHelper
argument_list|>
name|apiHelpers
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|element
range|:
name|collection
operator|.
name|getApiHelpers
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|element
decl_stmt|;
name|apiHelpers
operator|.
name|put
argument_list|(
operator|(
operator|(
name|ApiName
operator|)
name|entry
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|ApiMethodHelper
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|put
argument_list|(
literal|"apiHelpers"
argument_list|,
name|apiHelpers
argument_list|)
expr_stmt|;
comment|// API methods and endpoint configurations
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
argument_list|>
name|apiMethods
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|apiConfigs
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|element
range|:
name|collection
operator|.
name|getApiMethods
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|element
decl_stmt|;
specifier|final
name|String
name|name
init|=
operator|(
operator|(
name|ApiName
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getName
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
name|apiMethod
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|apiMethods
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|apiMethod
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|configClass
decl_stmt|;
try|try
block|{
name|configClass
operator|=
name|getProjectClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|getEndpointConfigName
argument_list|(
name|apiMethod
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MavenReportException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MojoExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MavenReportException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|apiConfigs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|configClass
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|put
argument_list|(
literal|"apiMethods"
argument_list|,
name|apiMethods
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"apiConfigs"
argument_list|,
name|apiConfigs
argument_list|)
expr_stmt|;
comment|// API component properties
name|context
operator|.
name|put
argument_list|(
literal|"scheme"
argument_list|,
name|this
operator|.
name|scheme
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"componentName"
argument_list|,
name|this
operator|.
name|componentName
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|configClass
decl_stmt|;
try|try
block|{
name|configClass
operator|=
name|getProjectClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|getComponentConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MavenReportException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MojoExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MavenReportException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|context
operator|.
name|put
argument_list|(
literal|"componentConfig"
argument_list|,
name|configClass
argument_list|)
expr_stmt|;
comment|// get declared and derived fields for component config
comment|// use get/set methods instead of fields, since this class could inherit others, that have private fields
comment|// so getDeclaredFields() won't work, like it does for generated endpoint config classes!!!
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configFields
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
do|do
block|{
name|IntrospectionSupport
operator|.
name|ClassInfo
name|classInfo
init|=
name|IntrospectionSupport
operator|.
name|cacheClass
argument_list|(
name|configClass
argument_list|)
decl_stmt|;
for|for
control|(
name|IntrospectionSupport
operator|.
name|MethodInfo
name|method
range|:
name|classInfo
operator|.
name|methods
control|)
block|{
if|if
condition|(
name|method
operator|.
name|isSetter
condition|)
block|{
name|configFields
operator|.
name|put
argument_list|(
name|method
operator|.
name|getterOrSetterShorthandName
argument_list|,
name|getCanonicalName
argument_list|(
name|method
operator|.
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|configClass
operator|=
name|configClass
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|configClass
operator|!=
literal|null
operator|&&
operator|!
name|configClass
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
argument_list|)
condition|)
do|;
name|context
operator|.
name|put
argument_list|(
literal|"componentConfigFields"
argument_list|,
name|configFields
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|getComponentConfig ()
specifier|private
name|String
name|getComponentConfig
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|componentPackage
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|componentName
argument_list|)
operator|.
name|append
argument_list|(
literal|"Configuration"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getEndpointConfigName (Class<? extends ApiMethod> apiMethod)
specifier|private
name|String
name|getEndpointConfigName
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
name|apiMethod
parameter_list|)
block|{
specifier|final
name|String
name|simpleName
init|=
name|apiMethod
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|componentPackage
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|simpleName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|simpleName
operator|.
name|indexOf
argument_list|(
literal|"ApiMethod"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"EndpointConfiguration"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getDocumentFile ()
specifier|private
name|File
name|getDocumentFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|getReportOutputDirectory
argument_list|()
argument_list|,
name|getDocumentName
argument_list|()
operator|+
literal|".html"
argument_list|)
return|;
block|}
DECL|method|getDocumentName ()
specifier|private
name|String
name|getDocumentName
parameter_list|()
block|{
return|return
name|this
operator|.
name|componentName
operator|+
literal|"Component"
return|;
block|}
annotation|@
name|Override
DECL|method|generate (Sink sink, Locale locale)
specifier|public
name|void
name|generate
parameter_list|(
name|Sink
name|sink
parameter_list|,
name|Locale
name|locale
parameter_list|)
throws|throws
name|MavenReportException
block|{
comment|// load APICollection
name|loadApiCollection
argument_list|()
expr_stmt|;
try|try
block|{
name|mergeTemplate
argument_list|(
name|getDocumentContext
argument_list|()
argument_list|,
name|getDocumentFile
argument_list|()
argument_list|,
literal|"/api-document.vm"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MojoExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MavenReportException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getOutputName ()
specifier|public
name|String
name|getOutputName
parameter_list|()
block|{
return|return
name|this
operator|.
name|destDir
operator|+
literal|"/"
operator|+
name|getDocumentName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCategoryName ()
specifier|public
name|String
name|getCategoryName
parameter_list|()
block|{
return|return
name|CATEGORY_PROJECT_REPORTS
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName (Locale locale)
specifier|public
name|String
name|getName
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|getBundle
argument_list|(
name|locale
argument_list|)
operator|.
name|getString
argument_list|(
literal|"report.cameldoc.name"
argument_list|)
return|;
block|}
return|return
name|name
return|;
block|}
DECL|method|setDescription (String description)
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDescription (Locale locale)
specifier|public
name|String
name|getDescription
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|description
argument_list|)
condition|)
block|{
return|return
name|getBundle
argument_list|(
name|locale
argument_list|)
operator|.
name|getString
argument_list|(
literal|"report.cameldoc.description"
argument_list|)
return|;
block|}
return|return
name|description
return|;
block|}
annotation|@
name|Override
DECL|method|getReportOutputDirectory ()
specifier|public
name|File
name|getReportOutputDirectory
parameter_list|()
block|{
return|return
name|reportOutputDirectory
return|;
block|}
annotation|@
name|Override
DECL|method|setReportOutputDirectory (File reportOutputDirectory)
specifier|public
name|void
name|setReportOutputDirectory
parameter_list|(
name|File
name|reportOutputDirectory
parameter_list|)
block|{
name|updateReportOutputDirectory
argument_list|(
name|reportOutputDirectory
argument_list|)
expr_stmt|;
block|}
DECL|method|updateReportOutputDirectory (File reportOutputDirectory)
specifier|private
name|void
name|updateReportOutputDirectory
parameter_list|(
name|File
name|reportOutputDirectory
parameter_list|)
block|{
comment|// append destDir if needed
if|if
condition|(
name|this
operator|.
name|destDir
operator|!=
literal|null
operator|&&
name|reportOutputDirectory
operator|!=
literal|null
operator|&&
operator|!
name|reportOutputDirectory
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|endsWith
argument_list|(
name|destDir
argument_list|)
condition|)
block|{
name|this
operator|.
name|reportOutputDirectory
operator|=
operator|new
name|File
argument_list|(
name|reportOutputDirectory
argument_list|,
name|destDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|reportOutputDirectory
operator|=
name|reportOutputDirectory
expr_stmt|;
block|}
block|}
DECL|method|getDestDir ()
specifier|public
name|String
name|getDestDir
parameter_list|()
block|{
return|return
name|destDir
return|;
block|}
DECL|method|setDestDir (String destDir)
specifier|public
name|void
name|setDestDir
parameter_list|(
name|String
name|destDir
parameter_list|)
block|{
name|this
operator|.
name|destDir
operator|=
name|destDir
expr_stmt|;
name|updateReportOutputDirectory
argument_list|(
name|this
operator|.
name|reportOutputDirectory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isExternalReport ()
specifier|public
name|boolean
name|isExternalReport
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|canGenerateReport ()
specifier|public
name|boolean
name|canGenerateReport
parameter_list|()
block|{
comment|// TODO check for class availability??
return|return
literal|true
return|;
block|}
DECL|method|getBundle (Locale locale)
specifier|private
name|ResourceBundle
name|getBundle
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
return|return
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
literal|"cameldoc-report"
argument_list|,
name|locale
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getEndpoints (Class<? extends ApiMethod> apiMethod, ApiMethodHelper<?> helper, Class<?> endpointConfig)
specifier|public
specifier|static
name|List
argument_list|<
name|EndpointInfo
argument_list|>
name|getEndpoints
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
name|apiMethod
parameter_list|,
name|ApiMethodHelper
argument_list|<
name|?
argument_list|>
name|helper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|endpointConfig
parameter_list|)
block|{
comment|// get list of valid options
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|validOptions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|endpointConfig
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|validOptions
operator|.
name|add
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// create method name map
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ApiMethod
argument_list|>
argument_list|>
name|methodMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ApiMethod
name|method
range|:
name|apiMethod
operator|.
name|getEnumConstants
argument_list|()
control|)
block|{
name|String
name|methodName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ApiMethod
argument_list|>
name|apiMethods
init|=
name|methodMap
operator|.
name|get
argument_list|(
name|methodName
argument_list|)
decl_stmt|;
if|if
condition|(
name|apiMethods
operator|==
literal|null
condition|)
block|{
name|apiMethods
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|methodMap
operator|.
name|put
argument_list|(
name|methodName
argument_list|,
name|apiMethods
argument_list|)
expr_stmt|;
block|}
name|apiMethods
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
comment|// create method name to alias name map
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|aliasMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|aliasToMethodMap
init|=
name|helper
operator|.
name|getAliases
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|aliasToMethodMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|alias
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|method
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|aliases
init|=
name|aliasMap
operator|.
name|get
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|aliases
operator|==
literal|null
condition|)
block|{
name|aliases
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
name|aliasMap
operator|.
name|put
argument_list|(
name|method
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
block|}
name|aliases
operator|.
name|add
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
block|}
comment|// create options map and return type map
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|optionMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|returnType
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ApiMethod
argument_list|>
argument_list|>
name|entry
range|:
name|methodMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ApiMethod
argument_list|>
name|apiMethods
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// count the number of times, every valid option shows up across methods
comment|// and also collect return types
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|optionCount
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|TreeSet
argument_list|<
name|String
argument_list|>
name|resultTypes
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|returnType
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|resultTypes
argument_list|)
expr_stmt|;
for|for
control|(
name|ApiMethod
name|method
range|:
name|apiMethods
control|)
block|{
for|for
control|(
name|String
name|arg
range|:
name|method
operator|.
name|getArgNames
argument_list|()
control|)
block|{
if|if
condition|(
name|validOptions
operator|.
name|contains
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|Integer
name|count
init|=
name|optionCount
operator|.
name|get
argument_list|(
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|count
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|count
operator|+=
literal|1
expr_stmt|;
block|}
name|optionCount
operator|.
name|put
argument_list|(
name|arg
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
comment|// wrap primitive result types
name|Class
argument_list|<
name|?
argument_list|>
name|resultType
init|=
name|method
operator|.
name|getResultType
argument_list|()
decl_stmt|;
if|if
condition|(
name|resultType
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|resultType
operator|=
name|ClassUtils
operator|.
name|primitiveToWrapper
argument_list|(
name|resultType
argument_list|)
expr_stmt|;
block|}
name|resultTypes
operator|.
name|add
argument_list|(
name|getCanonicalName
argument_list|(
name|resultType
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// collect method options
specifier|final
name|TreeSet
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|optionMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|options
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|mandatory
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// generate optional and mandatory lists for overloaded methods
name|int
name|nMethods
init|=
name|apiMethods
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|ApiMethod
name|method
range|:
name|apiMethods
control|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|optional
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|arg
range|:
name|method
operator|.
name|getArgNames
argument_list|()
control|)
block|{
if|if
condition|(
name|validOptions
operator|.
name|contains
argument_list|(
name|arg
argument_list|)
condition|)
block|{
specifier|final
name|Integer
name|count
init|=
name|optionCount
operator|.
name|get
argument_list|(
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
name|nMethods
condition|)
block|{
name|mandatory
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|optional
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|optional
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|options
operator|.
name|add
argument_list|(
name|optional
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|mandatory
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// strip [] from mandatory options
specifier|final
name|String
name|mandatoryOptions
init|=
name|mandatory
operator|.
name|toString
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
name|mandatoryOptions
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|mandatoryOptions
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// create endpoint data
specifier|final
name|List
argument_list|<
name|EndpointInfo
argument_list|>
name|infos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ApiMethod
argument_list|>
argument_list|>
name|methodEntry
range|:
name|methodMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|endpoint
init|=
name|methodEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// set endpoint name
name|EndpointInfo
name|info
init|=
operator|new
name|EndpointInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|info
operator|.
name|aliases
operator|=
name|convertSetToString
argument_list|(
name|aliasMap
operator|.
name|get
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|options
operator|=
name|convertSetToString
argument_list|(
name|optionMap
operator|.
name|get
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|resultTypes
init|=
name|returnType
operator|.
name|get
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
comment|// get rid of void results
name|resultTypes
operator|.
name|remove
argument_list|(
literal|"void"
argument_list|)
expr_stmt|;
name|info
operator|.
name|resultTypes
operator|=
name|convertSetToString
argument_list|(
name|resultTypes
argument_list|)
expr_stmt|;
name|infos
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|infos
return|;
block|}
DECL|method|convertSetToString (Set<String> values)
specifier|private
specifier|static
name|String
name|convertSetToString
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|String
name|result
init|=
name|values
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|result
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
DECL|method|getCanonicalName (Field field)
specifier|public
specifier|static
name|String
name|getCanonicalName
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
specifier|final
name|Type
name|fieldType
init|=
name|field
operator|.
name|getGenericType
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldType
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
name|getCanonicalName
argument_list|(
operator|(
name|ParameterizedType
operator|)
name|fieldType
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getCanonicalName
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|getCanonicalName (ParameterizedType fieldType)
specifier|private
specifier|static
name|String
name|getCanonicalName
parameter_list|(
name|ParameterizedType
name|fieldType
parameter_list|)
block|{
specifier|final
name|Type
index|[]
name|typeArguments
init|=
name|fieldType
operator|.
name|getActualTypeArguments
argument_list|()
decl_stmt|;
specifier|final
name|int
name|nArguments
init|=
name|typeArguments
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|nArguments
operator|>
literal|0
condition|)
block|{
specifier|final
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|(
name|getCanonicalName
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|fieldType
operator|.
name|getRawType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"&lt;"
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Type
name|typeArg
range|:
name|typeArguments
control|)
block|{
if|if
condition|(
name|typeArg
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|getCanonicalName
argument_list|(
operator|(
name|ParameterizedType
operator|)
name|typeArg
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
name|getCanonicalName
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|typeArg
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|++
name|i
operator|<
name|nArguments
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|append
argument_list|(
literal|"&gt;"
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|getCanonicalName
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|fieldType
operator|.
name|getRawType
argument_list|()
argument_list|)
return|;
block|}
DECL|class|EndpointInfo
specifier|public
specifier|static
class|class
name|EndpointInfo
block|{
DECL|field|endpoint
specifier|private
name|String
name|endpoint
decl_stmt|;
DECL|field|aliases
specifier|private
name|String
name|aliases
decl_stmt|;
DECL|field|options
specifier|private
name|String
name|options
decl_stmt|;
DECL|field|resultTypes
specifier|private
name|String
name|resultTypes
decl_stmt|;
DECL|method|getEndpoint ()
specifier|public
name|String
name|getEndpoint
parameter_list|()
block|{
return|return
name|endpoint
return|;
block|}
DECL|method|getAliases ()
specifier|public
name|String
name|getAliases
parameter_list|()
block|{
return|return
name|aliases
return|;
block|}
DECL|method|getOptions ()
specifier|public
name|String
name|getOptions
parameter_list|()
block|{
return|return
name|options
return|;
block|}
DECL|method|getResultTypes ()
specifier|public
name|String
name|getResultTypes
parameter_list|()
block|{
return|return
name|resultTypes
return|;
block|}
block|}
block|}
end_class

end_unit

