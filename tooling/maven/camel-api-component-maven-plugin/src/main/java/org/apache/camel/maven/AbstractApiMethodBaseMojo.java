begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_comment
comment|/**  * Base class to share API method generator properties with @{link ApiComponentGeneratorMojo}.  */
end_comment

begin_class
DECL|class|AbstractApiMethodBaseMojo
specifier|public
specifier|abstract
class|class
name|AbstractApiMethodBaseMojo
extends|extends
name|AbstractSourceGeneratorMojo
block|{
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
name|PREFIX
operator|+
literal|"substitutions"
argument_list|)
DECL|field|substitutions
specifier|protected
name|Substitution
index|[]
name|substitutions
init|=
operator|new
name|Substitution
index|[
literal|0
index|]
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
name|PREFIX
operator|+
literal|"excludeConfigNames"
argument_list|)
DECL|field|excludeConfigNames
specifier|protected
name|String
name|excludeConfigNames
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
name|PREFIX
operator|+
literal|"excludeConfigTypes"
argument_list|)
DECL|field|excludeConfigTypes
specifier|protected
name|String
name|excludeConfigTypes
decl_stmt|;
DECL|method|getSubstitutions ()
specifier|public
name|Substitution
index|[]
name|getSubstitutions
parameter_list|()
block|{
return|return
name|substitutions
return|;
block|}
DECL|method|setSubstitutions (Substitution[] substitutions)
specifier|public
name|void
name|setSubstitutions
parameter_list|(
name|Substitution
index|[]
name|substitutions
parameter_list|)
block|{
name|this
operator|.
name|substitutions
operator|=
name|substitutions
expr_stmt|;
block|}
DECL|method|getExcludeConfigNames ()
specifier|public
name|String
name|getExcludeConfigNames
parameter_list|()
block|{
return|return
name|excludeConfigNames
return|;
block|}
DECL|method|setExcludeConfigNames (String excludeConfigNames)
specifier|public
name|void
name|setExcludeConfigNames
parameter_list|(
name|String
name|excludeConfigNames
parameter_list|)
block|{
name|this
operator|.
name|excludeConfigNames
operator|=
name|excludeConfigNames
expr_stmt|;
block|}
DECL|method|getExcludeConfigTypes ()
specifier|public
name|String
name|getExcludeConfigTypes
parameter_list|()
block|{
return|return
name|excludeConfigTypes
return|;
block|}
DECL|method|setExcludeConfigTypes (String excludeConfigTypes)
specifier|public
name|void
name|setExcludeConfigTypes
parameter_list|(
name|String
name|excludeConfigTypes
parameter_list|)
block|{
name|this
operator|.
name|excludeConfigTypes
operator|=
name|excludeConfigTypes
expr_stmt|;
block|}
block|}
end_class

end_unit

