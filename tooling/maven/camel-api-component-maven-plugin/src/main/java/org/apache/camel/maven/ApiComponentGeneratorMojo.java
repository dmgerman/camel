begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|LifecyclePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|ResolutionScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|VelocityContext
import|;
end_import

begin_comment
comment|/**  * Generates Camel Component based on a collection of APIs.  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"fromApis"
argument_list|,
name|requiresDependencyResolution
operator|=
name|ResolutionScope
operator|.
name|COMPILE_PLUS_RUNTIME
argument_list|,
name|requiresProject
operator|=
literal|true
argument_list|,
name|defaultPhase
operator|=
name|LifecyclePhase
operator|.
name|GENERATE_SOURCES
argument_list|)
DECL|class|ApiComponentGeneratorMojo
specifier|public
class|class
name|ApiComponentGeneratorMojo
extends|extends
name|AbstractApiMethodBaseMojo
block|{
comment|/**      * List of API names, proxies and code generation settings.      */
annotation|@
name|Parameter
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|apis
specifier|protected
name|ApiProxy
index|[]
name|apis
decl_stmt|;
comment|/**      * Common Javadoc code generation settings.      */
annotation|@
name|Parameter
DECL|field|fromJavadoc
specifier|protected
name|FromJavadoc
name|fromJavadoc
init|=
operator|new
name|FromJavadoc
argument_list|()
decl_stmt|;
comment|/**      * Method alias patterns for all APIs.      */
annotation|@
name|Parameter
DECL|field|aliases
specifier|private
name|List
argument_list|<
name|ApiMethodAlias
argument_list|>
name|aliases
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
if|if
condition|(
name|apis
operator|==
literal|null
operator|||
name|apis
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"One or more API proxies are required"
argument_list|)
throw|;
block|}
comment|// starting with a new project
name|clearSharedProjectState
argument_list|()
expr_stmt|;
name|setSharedProjectState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
comment|// generate API methods for each API proxy
for|for
control|(
name|ApiProxy
name|api
range|:
name|apis
control|)
block|{
comment|// validate API configuration
name|api
operator|.
name|validate
argument_list|()
expr_stmt|;
comment|// create the appropriate code generator if signatureFile or fromJavaDoc are specified
comment|// this way users can skip generating API classes for duplicate proxy class references
specifier|final
name|AbstractApiMethodGeneratorMojo
name|apiMethodGenerator
init|=
name|getApiMethodGenerator
argument_list|(
name|api
argument_list|)
decl_stmt|;
if|if
condition|(
name|apiMethodGenerator
operator|!=
literal|null
condition|)
block|{
comment|// configure API method properties and generate Proxy classes
name|configureMethodGenerator
argument_list|(
name|apiMethodGenerator
argument_list|,
name|api
argument_list|)
expr_stmt|;
try|try
block|{
name|apiMethodGenerator
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Error generating source for "
operator|+
name|api
operator|.
name|getProxyClass
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// make sure the proxy class is being generated elsewhere
specifier|final
name|String
name|proxyClass
init|=
name|api
operator|.
name|getProxyClass
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ApiProxy
name|other
range|:
name|apis
control|)
block|{
if|if
condition|(
name|other
operator|!=
name|api
operator|&&
name|proxyClass
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getProxyClass
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Missing one of fromSignatureFile or fromJavadoc for "
operator|+
name|proxyClass
argument_list|)
throw|;
block|}
block|}
comment|// set common aliases if needed
if|if
condition|(
operator|!
name|aliases
operator|.
name|isEmpty
argument_list|()
operator|&&
name|api
operator|.
name|getAliases
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|api
operator|.
name|setAliases
argument_list|(
name|aliases
argument_list|)
expr_stmt|;
block|}
block|}
comment|// generate ApiCollection
name|mergeTemplate
argument_list|(
name|getApiContext
argument_list|()
argument_list|,
name|getApiCollectionFile
argument_list|()
argument_list|,
literal|"/api-collection.vm"
argument_list|)
expr_stmt|;
comment|// generate ApiName
name|mergeTemplate
argument_list|(
name|getApiContext
argument_list|()
argument_list|,
name|getApiNameFile
argument_list|()
argument_list|,
literal|"/api-name-enum.vm"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// clear state for next Mojo
name|setSharedProjectState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|clearSharedProjectState
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|configureMethodGenerator (AbstractApiMethodGeneratorMojo mojo, ApiProxy apiProxy)
specifier|private
name|void
name|configureMethodGenerator
parameter_list|(
name|AbstractApiMethodGeneratorMojo
name|mojo
parameter_list|,
name|ApiProxy
name|apiProxy
parameter_list|)
block|{
comment|// set AbstractGeneratorMojo properties
name|mojo
operator|.
name|componentName
operator|=
name|componentName
expr_stmt|;
name|mojo
operator|.
name|scheme
operator|=
name|scheme
expr_stmt|;
name|mojo
operator|.
name|outPackage
operator|=
name|outPackage
expr_stmt|;
name|mojo
operator|.
name|componentPackage
operator|=
name|componentPackage
expr_stmt|;
name|mojo
operator|.
name|project
operator|=
name|project
expr_stmt|;
comment|// set AbstractSourceGeneratorMojo properties
name|mojo
operator|.
name|generatedSrcDir
operator|=
name|generatedSrcDir
expr_stmt|;
name|mojo
operator|.
name|generatedTestDir
operator|=
name|generatedTestDir
expr_stmt|;
comment|// set AbstractAPIMethodBaseMojo properties
name|mojo
operator|.
name|substitutions
operator|=
name|apiProxy
operator|.
name|getSubstitutions
argument_list|()
operator|.
name|length
operator|!=
literal|0
condition|?
name|apiProxy
operator|.
name|getSubstitutions
argument_list|()
else|:
name|substitutions
expr_stmt|;
name|mojo
operator|.
name|excludeConfigNames
operator|=
name|apiProxy
operator|.
name|getExcludeConfigNames
argument_list|()
operator|!=
literal|null
condition|?
name|apiProxy
operator|.
name|getExcludeConfigNames
argument_list|()
else|:
name|excludeConfigNames
expr_stmt|;
name|mojo
operator|.
name|excludeConfigTypes
operator|=
name|apiProxy
operator|.
name|getExcludeConfigTypes
argument_list|()
operator|!=
literal|null
condition|?
name|apiProxy
operator|.
name|getExcludeConfigTypes
argument_list|()
else|:
name|excludeConfigTypes
expr_stmt|;
name|mojo
operator|.
name|extraOptions
operator|=
name|apiProxy
operator|.
name|getExtraOptions
argument_list|()
operator|!=
literal|null
condition|?
name|apiProxy
operator|.
name|getExtraOptions
argument_list|()
else|:
name|extraOptions
expr_stmt|;
comment|// set AbstractAPIMethodGeneratorMojo properties
name|mojo
operator|.
name|proxyClass
operator|=
name|apiProxy
operator|.
name|getProxyClass
argument_list|()
expr_stmt|;
block|}
DECL|method|getApiMethodGenerator (ApiProxy api)
specifier|private
name|AbstractApiMethodGeneratorMojo
name|getApiMethodGenerator
parameter_list|(
name|ApiProxy
name|api
parameter_list|)
block|{
name|AbstractApiMethodGeneratorMojo
name|apiMethodGenerator
init|=
literal|null
decl_stmt|;
specifier|final
name|File
name|signatureFile
init|=
name|api
operator|.
name|getFromSignatureFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|signatureFile
operator|!=
literal|null
condition|)
block|{
specifier|final
name|FileApiMethodGeneratorMojo
name|fileMojo
init|=
operator|new
name|FileApiMethodGeneratorMojo
argument_list|()
decl_stmt|;
name|fileMojo
operator|.
name|signatureFile
operator|=
name|signatureFile
expr_stmt|;
name|apiMethodGenerator
operator|=
name|fileMojo
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|FromJavadoc
name|apiFromJavadoc
init|=
name|api
operator|.
name|getFromJavadoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|apiFromJavadoc
operator|!=
literal|null
condition|)
block|{
specifier|final
name|JavadocApiMethodGeneratorMojo
name|javadocMojo
init|=
operator|new
name|JavadocApiMethodGeneratorMojo
argument_list|()
decl_stmt|;
name|javadocMojo
operator|.
name|excludePackages
operator|=
name|apiFromJavadoc
operator|.
name|getExcludePackages
argument_list|()
operator|!=
literal|null
condition|?
name|apiFromJavadoc
operator|.
name|getExcludePackages
argument_list|()
else|:
name|fromJavadoc
operator|.
name|getExcludePackages
argument_list|()
expr_stmt|;
name|javadocMojo
operator|.
name|excludeClasses
operator|=
name|apiFromJavadoc
operator|.
name|getExcludeClasses
argument_list|()
operator|!=
literal|null
condition|?
name|apiFromJavadoc
operator|.
name|getExcludeClasses
argument_list|()
else|:
name|fromJavadoc
operator|.
name|getExcludeClasses
argument_list|()
expr_stmt|;
name|javadocMojo
operator|.
name|includeMethods
operator|=
name|apiFromJavadoc
operator|.
name|getIncludeMethods
argument_list|()
operator|!=
literal|null
condition|?
name|apiFromJavadoc
operator|.
name|getIncludeMethods
argument_list|()
else|:
name|fromJavadoc
operator|.
name|getIncludeMethods
argument_list|()
expr_stmt|;
name|javadocMojo
operator|.
name|excludeMethods
operator|=
name|apiFromJavadoc
operator|.
name|getExcludeMethods
argument_list|()
operator|!=
literal|null
condition|?
name|apiFromJavadoc
operator|.
name|getExcludeMethods
argument_list|()
else|:
name|fromJavadoc
operator|.
name|getExcludeMethods
argument_list|()
expr_stmt|;
name|javadocMojo
operator|.
name|includeStaticMethods
operator|=
name|apiFromJavadoc
operator|.
name|getIncludeStaticMethods
argument_list|()
operator|!=
literal|null
condition|?
name|apiFromJavadoc
operator|.
name|getIncludeStaticMethods
argument_list|()
else|:
name|fromJavadoc
operator|.
name|getIncludeStaticMethods
argument_list|()
expr_stmt|;
name|apiMethodGenerator
operator|=
name|javadocMojo
expr_stmt|;
block|}
block|}
return|return
name|apiMethodGenerator
return|;
block|}
DECL|method|getApiContext ()
specifier|private
name|VelocityContext
name|getApiContext
parameter_list|()
block|{
specifier|final
name|VelocityContext
name|context
init|=
operator|new
name|VelocityContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"componentName"
argument_list|,
name|componentName
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"componentPackage"
argument_list|,
name|componentPackage
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"apis"
argument_list|,
name|apis
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"helper"
argument_list|,
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"collectionName"
argument_list|,
name|getApiCollectionName
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"apiNameEnum"
argument_list|,
name|getApiNameEnum
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|getApiCollectionName ()
specifier|private
name|String
name|getApiCollectionName
parameter_list|()
block|{
return|return
name|componentName
operator|+
literal|"ApiCollection"
return|;
block|}
DECL|method|getApiNameEnum ()
specifier|private
name|String
name|getApiNameEnum
parameter_list|()
block|{
return|return
name|componentName
operator|+
literal|"ApiName"
return|;
block|}
DECL|method|getApiCollectionFile ()
specifier|private
name|File
name|getApiCollectionFile
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|fileName
init|=
name|getFileBuilder
argument_list|()
decl_stmt|;
name|fileName
operator|.
name|append
argument_list|(
name|getApiCollectionName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".java"
argument_list|)
expr_stmt|;
return|return
operator|new
name|File
argument_list|(
name|generatedSrcDir
argument_list|,
name|fileName
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getApiNameFile ()
specifier|private
name|File
name|getApiNameFile
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|fileName
init|=
name|getFileBuilder
argument_list|()
decl_stmt|;
name|fileName
operator|.
name|append
argument_list|(
name|getApiNameEnum
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".java"
argument_list|)
expr_stmt|;
return|return
operator|new
name|File
argument_list|(
name|generatedSrcDir
argument_list|,
name|fileName
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getFileBuilder ()
specifier|private
name|StringBuilder
name|getFileBuilder
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|fileName
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|fileName
operator|.
name|append
argument_list|(
name|outPackage
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
name|File
operator|.
name|separator
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|File
operator|.
name|separator
argument_list|)
expr_stmt|;
return|return
name|fileName
return|;
block|}
DECL|method|getApiMethod (String proxyClass)
specifier|public
specifier|static
name|String
name|getApiMethod
parameter_list|(
name|String
name|proxyClass
parameter_list|)
block|{
return|return
name|proxyClass
operator|.
name|substring
argument_list|(
name|proxyClass
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
operator|+
literal|"ApiMethod"
return|;
block|}
DECL|method|getEndpointConfig (String proxyClass)
specifier|public
specifier|static
name|String
name|getEndpointConfig
parameter_list|(
name|String
name|proxyClass
parameter_list|)
block|{
return|return
name|proxyClass
operator|.
name|substring
argument_list|(
name|proxyClass
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
operator|+
literal|"EndpointConfiguration"
return|;
block|}
DECL|method|getEnumConstant (String enumValue)
specifier|public
specifier|static
name|String
name|getEnumConstant
parameter_list|(
name|String
name|enumValue
parameter_list|)
block|{
if|if
condition|(
name|enumValue
operator|==
literal|null
operator|||
name|enumValue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|"DEFAULT"
return|;
block|}
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Character
operator|.
name|isJavaIdentifierStart
argument_list|(
name|enumValue
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|char
name|c
range|:
name|enumValue
operator|.
name|toCharArray
argument_list|()
control|)
block|{
name|char
name|upperCase
init|=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|upperCase
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
name|upperCase
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

