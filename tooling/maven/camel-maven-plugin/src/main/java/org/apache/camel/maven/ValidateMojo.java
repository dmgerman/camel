begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|CamelCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|DefaultCamelCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|EndpointValidationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|SimpleValidationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|lucene
operator|.
name|LuceneSuggestionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|maven
operator|.
name|MavenVersionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|helper
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|RouteBuilderParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|XmlRouteParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|model
operator|.
name|CamelEndpointDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|model
operator|.
name|CamelRouteDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|model
operator|.
name|CamelSimpleExpressionDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|mojo
operator|.
name|exec
operator|.
name|AbstractExecMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|Roaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|JavaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|JavaClassSource
import|;
end_import

begin_comment
comment|/**  * Parses the source code and validates the Camel routes has valid endpoint uris and simple expressions.  *  * @goal validate  */
end_comment

begin_class
DECL|class|ValidateMojo
specifier|public
class|class
name|ValidateMojo
extends|extends
name|AbstractExecMojo
block|{
comment|/**      * The maven project.      *      * @parameter property="project"      * @required      * @readonly      */
DECL|field|project
specifier|protected
name|MavenProject
name|project
decl_stmt|;
comment|/**      * Whether to fail if invalid Camel endpoints was found. By default the plugin logs the errors at WARN level      *      * @parameter property="camel.failOnError"      *            default-value="false"      */
DECL|field|failOnError
specifier|private
name|boolean
name|failOnError
decl_stmt|;
comment|/**      * Whether to log endpoint URIs which was un-parsable and therefore not possible to validate      *      * @parameter property="camel.logUnparseable"      *            default-value="false"      */
DECL|field|logUnparseable
specifier|private
name|boolean
name|logUnparseable
decl_stmt|;
comment|/**      * Whether to include Java files to be validated for invalid Camel endpoints      *      * @parameter property="camel.includeJava"      *            default-value="true"      */
DECL|field|includeJava
specifier|private
name|boolean
name|includeJava
decl_stmt|;
comment|/**      * Whether to include XML files to be validated for invalid Camel endpoints      *      * @parameter property="camel.includeXml"      *            default-value="true"      */
DECL|field|includeXml
specifier|private
name|boolean
name|includeXml
decl_stmt|;
comment|/**      * Whether to include test source code      *      * @parameter property="camel.includeTest"      *            default-value="false"      */
DECL|field|includeTest
specifier|private
name|boolean
name|includeTest
decl_stmt|;
comment|/**      * To filter the names of java and xml files to only include files matching any of the given list of patterns (wildcard and regular expression).      * Multiple values can be separated by comma.      *      * @parameter property="camel.includes"      */
DECL|field|includes
specifier|private
name|String
name|includes
decl_stmt|;
comment|/**      * To filter the names of java and xml files to exclude files matching any of the given list of patterns (wildcard and regular expression).      * Multiple values can be separated by comma.      *      * @parameter property="camel.excludes"      */
DECL|field|excludes
specifier|private
name|String
name|excludes
decl_stmt|;
comment|/**      * Whether to ignore unknown components      *      * @parameter property="camel.ignoreUnknownComponent"      *            default-value="true"      */
DECL|field|ignoreUnknownComponent
specifier|private
name|boolean
name|ignoreUnknownComponent
decl_stmt|;
comment|/**      * Whether to ignore incapable of parsing the endpoint uri      *      * @parameter property="camel.ignoreIncapable"      *            default-value="true"      */
DECL|field|ignoreIncapable
specifier|private
name|boolean
name|ignoreIncapable
decl_stmt|;
comment|/**      * Whether to ignore components that uses lenient properties. When this is true, then the uri validation is stricter      * but would fail on properties that are not part of the component but in the uri because of using lenient properties.      * For example using the HTTP components to provide query parameters in the endpoint uri.      *      * @parameter property="camel.ignoreLenientProperties"      *            default-value="true"      */
DECL|field|ignoreLenientProperties
specifier|private
name|boolean
name|ignoreLenientProperties
decl_stmt|;
comment|/**      * Whether to show all endpoints and simple expressions (both invalid and valid).      *      * @parameter property="camel.showAll"      *            default-value="false"      */
DECL|field|showAll
specifier|private
name|boolean
name|showAll
decl_stmt|;
comment|/**      * Whether to allow downloading Camel catalog version from the internet. This is needed if the project      * uses a different Camel version than this plugin is using by default.      *      * @parameter property="camel.downloadVersion"      *            default-value="true"      */
DECL|field|downloadVersion
specifier|private
name|boolean
name|downloadVersion
decl_stmt|;
comment|/**      * Whether to validate for duplicate route ids. Route ids should be unique and if there are duplicates      * then Camel will fail to startup.      *      * @parameter property="camel.duplicateRouteId"      *            default-value="true"      */
DECL|field|duplicateRouteId
specifier|private
name|boolean
name|duplicateRouteId
decl_stmt|;
comment|// CHECKSTYLE:OFF
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|CamelCatalog
name|catalog
init|=
operator|new
name|DefaultCamelCatalog
argument_list|()
decl_stmt|;
comment|// add activemq as known component
name|catalog
operator|.
name|addComponent
argument_list|(
literal|"activemq"
argument_list|,
literal|"org.apache.activemq.camel.component.ActiveMQComponent"
argument_list|)
expr_stmt|;
comment|// enable did you mean
name|catalog
operator|.
name|setSuggestionStrategy
argument_list|(
operator|new
name|LuceneSuggestionStrategy
argument_list|()
argument_list|)
expr_stmt|;
comment|// enable loading other catalog versions dynamically
name|catalog
operator|.
name|setVersionManager
argument_list|(
operator|new
name|MavenVersionManager
argument_list|()
argument_list|)
expr_stmt|;
comment|// enable caching
name|catalog
operator|.
name|enableCache
argument_list|()
expr_stmt|;
if|if
condition|(
name|downloadVersion
condition|)
block|{
name|String
name|catalogVersion
init|=
name|catalog
operator|.
name|getCatalogVersion
argument_list|()
decl_stmt|;
name|String
name|version
init|=
name|findCamelVersion
argument_list|(
name|project
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
operator|&&
operator|!
name|version
operator|.
name|equals
argument_list|(
name|catalogVersion
argument_list|)
condition|)
block|{
comment|// the project uses a different Camel version so attempt to load it
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Downloading Camel version: "
operator|+
name|version
argument_list|)
expr_stmt|;
name|boolean
name|loaded
init|=
name|catalog
operator|.
name|loadVersion
argument_list|(
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|loaded
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Error downloading Camel version: "
operator|+
name|version
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// if using the same version as the camel-maven-plugin we must still load it
if|if
condition|(
name|catalog
operator|.
name|getLoadedVersion
argument_list|()
operator|==
literal|null
condition|)
block|{
name|catalog
operator|.
name|loadVersion
argument_list|(
name|catalog
operator|.
name|getCatalogVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|catalog
operator|.
name|getLoadedVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Using Camel version: "
operator|+
name|catalog
operator|.
name|getLoadedVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// force load version from the camel-maven-plugin
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Using Camel version: "
operator|+
name|catalog
operator|.
name|getCatalogVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|CamelEndpointDetails
argument_list|>
name|endpoints
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CamelSimpleExpressionDetails
argument_list|>
name|simpleExpressions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CamelRouteDetails
argument_list|>
name|routeIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|File
argument_list|>
name|javaFiles
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|File
argument_list|>
name|xmlFiles
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
comment|// find all java route builder classes
if|if
condition|(
name|includeJava
condition|)
block|{
name|List
name|list
init|=
name|project
operator|.
name|getCompileSourceRoots
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|list
control|)
block|{
name|String
name|dir
init|=
operator|(
name|String
operator|)
name|obj
decl_stmt|;
name|findJavaFiles
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|)
argument_list|,
name|javaFiles
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeTest
condition|)
block|{
name|list
operator|=
name|project
operator|.
name|getTestCompileSourceRoots
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|list
control|)
block|{
name|String
name|dir
init|=
operator|(
name|String
operator|)
name|obj
decl_stmt|;
name|findJavaFiles
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|)
argument_list|,
name|javaFiles
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// find all xml routes
if|if
condition|(
name|includeXml
condition|)
block|{
name|List
name|list
init|=
name|project
operator|.
name|getResources
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|list
control|)
block|{
name|Resource
name|dir
init|=
operator|(
name|Resource
operator|)
name|obj
decl_stmt|;
name|findXmlFiles
argument_list|(
operator|new
name|File
argument_list|(
name|dir
operator|.
name|getDirectory
argument_list|()
argument_list|)
argument_list|,
name|xmlFiles
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeTest
condition|)
block|{
name|list
operator|=
name|project
operator|.
name|getTestResources
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|list
control|)
block|{
name|Resource
name|dir
init|=
operator|(
name|Resource
operator|)
name|obj
decl_stmt|;
name|findXmlFiles
argument_list|(
operator|new
name|File
argument_list|(
name|dir
operator|.
name|getDirectory
argument_list|()
argument_list|)
argument_list|,
name|xmlFiles
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|File
name|file
range|:
name|javaFiles
control|)
block|{
if|if
condition|(
name|matchFile
argument_list|(
name|file
argument_list|)
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|CamelEndpointDetails
argument_list|>
name|fileEndpoints
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CamelRouteDetails
argument_list|>
name|fileRouteIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CamelSimpleExpressionDetails
argument_list|>
name|fileSimpleExpressions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|unparsable
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parse the java source code and find Camel RouteBuilder classes
name|String
name|fqn
init|=
name|file
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|baseDir
init|=
literal|"."
decl_stmt|;
name|JavaType
name|out
init|=
name|Roaster
operator|.
name|parse
argument_list|(
name|file
argument_list|)
decl_stmt|;
comment|// we should only parse java classes (not interfaces and enums etc)
if|if
condition|(
name|out
operator|!=
literal|null
operator|&&
name|out
operator|instanceof
name|JavaClassSource
condition|)
block|{
name|JavaClassSource
name|clazz
init|=
operator|(
name|JavaClassSource
operator|)
name|out
decl_stmt|;
name|RouteBuilderParser
operator|.
name|parseRouteBuilderEndpoints
argument_list|(
name|clazz
argument_list|,
name|baseDir
argument_list|,
name|fqn
argument_list|,
name|fileEndpoints
argument_list|,
name|unparsable
argument_list|,
name|includeTest
argument_list|)
expr_stmt|;
name|RouteBuilderParser
operator|.
name|parseRouteBuilderSimpleExpressions
argument_list|(
name|clazz
argument_list|,
name|baseDir
argument_list|,
name|fqn
argument_list|,
name|fileSimpleExpressions
argument_list|)
expr_stmt|;
if|if
condition|(
name|duplicateRouteId
condition|)
block|{
name|RouteBuilderParser
operator|.
name|parseRouteBuilderRouteIds
argument_list|(
name|clazz
argument_list|,
name|baseDir
argument_list|,
name|fqn
argument_list|,
name|fileRouteIds
argument_list|)
expr_stmt|;
block|}
comment|// add what we found in this file to the total list
name|endpoints
operator|.
name|addAll
argument_list|(
name|fileEndpoints
argument_list|)
expr_stmt|;
name|simpleExpressions
operator|.
name|addAll
argument_list|(
name|fileSimpleExpressions
argument_list|)
expr_stmt|;
name|routeIds
operator|.
name|addAll
argument_list|(
name|fileRouteIds
argument_list|)
expr_stmt|;
comment|// was there any unparsable?
if|if
condition|(
name|logUnparseable
operator|&&
operator|!
name|unparsable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|uri
range|:
name|unparsable
control|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Cannot parse endpoint uri "
operator|+
name|uri
operator|+
literal|" in java file "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Error parsing java file "
operator|+
name|file
operator|+
literal|" code due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|File
name|file
range|:
name|xmlFiles
control|)
block|{
if|if
condition|(
name|matchFile
argument_list|(
name|file
argument_list|)
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|CamelEndpointDetails
argument_list|>
name|fileEndpoints
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CamelSimpleExpressionDetails
argument_list|>
name|fileSimpleExpressions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CamelRouteDetails
argument_list|>
name|fileRouteIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parse the xml source code and find Camel routes
name|String
name|fqn
init|=
name|file
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|baseDir
init|=
literal|"."
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|XmlRouteParser
operator|.
name|parseXmlRouteEndpoints
argument_list|(
name|is
argument_list|,
name|baseDir
argument_list|,
name|fqn
argument_list|,
name|fileEndpoints
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// need a new stream
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|XmlRouteParser
operator|.
name|parseXmlRouteSimpleExpressions
argument_list|(
name|is
argument_list|,
name|baseDir
argument_list|,
name|fqn
argument_list|,
name|fileSimpleExpressions
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|duplicateRouteId
condition|)
block|{
comment|// need a new stream
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|XmlRouteParser
operator|.
name|parseXmlRouteRouteIds
argument_list|(
name|is
argument_list|,
name|baseDir
argument_list|,
name|fqn
argument_list|,
name|fileRouteIds
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// add what we found in this file to the total list
name|endpoints
operator|.
name|addAll
argument_list|(
name|fileEndpoints
argument_list|)
expr_stmt|;
name|simpleExpressions
operator|.
name|addAll
argument_list|(
name|fileSimpleExpressions
argument_list|)
expr_stmt|;
name|routeIds
operator|.
name|addAll
argument_list|(
name|fileRouteIds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Error parsing xml file "
operator|+
name|file
operator|+
literal|" code due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|endpointErrors
init|=
literal|0
decl_stmt|;
name|int
name|unknownComponents
init|=
literal|0
decl_stmt|;
name|int
name|incapableErrors
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CamelEndpointDetails
name|detail
range|:
name|endpoints
control|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Validating endpoint: "
operator|+
name|detail
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|EndpointValidationResult
name|result
init|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
name|detail
operator|.
name|getEndpointUri
argument_list|()
argument_list|,
name|ignoreLenientProperties
argument_list|)
decl_stmt|;
name|boolean
name|ok
init|=
name|result
operator|.
name|isSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ok
operator|&&
name|ignoreUnknownComponent
operator|&&
name|result
operator|.
name|getUnknownComponent
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// if we failed due unknown component then be okay if we should ignore that
name|unknownComponents
operator|++
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ok
operator|&&
name|ignoreIncapable
operator|&&
name|result
operator|.
name|getIncapable
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// if we failed due incapable then be okay if we should ignore that
name|incapableErrors
operator|++
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ok
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|getUnknownComponent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|unknownComponents
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|.
name|getIncapable
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|incapableErrors
operator|++
expr_stmt|;
block|}
else|else
block|{
name|endpointErrors
operator|++
expr_stmt|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Endpoint validation error at: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|detail
operator|.
name|getClassName
argument_list|()
operator|!=
literal|null
operator|&&
name|detail
operator|.
name|getLineNumber
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this is from java code
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|detail
operator|.
name|getMethodName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|asSimpleClassName
argument_list|(
name|detail
operator|.
name|getClassName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".java:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getLineNumber
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|detail
operator|.
name|getLineNumber
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this is from xml
name|String
name|fqn
init|=
name|stripRootPath
argument_list|(
name|asRelativeFile
argument_list|(
name|detail
operator|.
name|getFileName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fqn
operator|.
name|endsWith
argument_list|(
literal|".xml"
argument_list|)
condition|)
block|{
name|fqn
operator|=
name|fqn
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fqn
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
name|fqn
operator|=
name|asPackageName
argument_list|(
name|fqn
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|fqn
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|asSimpleClassName
argument_list|(
name|fqn
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".xml:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getLineNumber
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|result
operator|.
name|summaryErrorMessage
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|showAll
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Endpoint validation passsed at: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|detail
operator|.
name|getClassName
argument_list|()
operator|!=
literal|null
operator|&&
name|detail
operator|.
name|getLineNumber
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this is from java code
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|detail
operator|.
name|getMethodName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|asSimpleClassName
argument_list|(
name|detail
operator|.
name|getClassName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".java:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getLineNumber
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|detail
operator|.
name|getLineNumber
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this is from xml
name|String
name|fqn
init|=
name|stripRootPath
argument_list|(
name|asRelativeFile
argument_list|(
name|detail
operator|.
name|getFileName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fqn
operator|.
name|endsWith
argument_list|(
literal|".xml"
argument_list|)
condition|)
block|{
name|fqn
operator|=
name|fqn
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fqn
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
name|fqn
operator|=
name|asPackageName
argument_list|(
name|fqn
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|fqn
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|asSimpleClassName
argument_list|(
name|fqn
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".xml:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getLineNumber
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n\t"
argument_list|)
operator|.
name|append
argument_list|(
name|result
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|endpointSummary
decl_stmt|;
if|if
condition|(
name|endpointErrors
operator|==
literal|0
condition|)
block|{
name|int
name|ok
init|=
name|endpoints
operator|.
name|size
argument_list|()
operator|-
name|endpointErrors
operator|-
name|incapableErrors
operator|-
name|unknownComponents
decl_stmt|;
name|endpointSummary
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"Endpoint validation success: (%s = passed, %s = invalid, %s = incapable, %s = unknown components)"
argument_list|,
name|ok
argument_list|,
name|endpointErrors
argument_list|,
name|incapableErrors
argument_list|,
name|unknownComponents
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|ok
init|=
name|endpoints
operator|.
name|size
argument_list|()
operator|-
name|endpointErrors
operator|-
name|incapableErrors
operator|-
name|unknownComponents
decl_stmt|;
name|endpointSummary
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"Endpoint validation error: (%s = passed, %s = invalid, %s = incapable, %s = unknown components)"
argument_list|,
name|ok
argument_list|,
name|endpointErrors
argument_list|,
name|incapableErrors
argument_list|,
name|unknownComponents
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpointErrors
operator|>
literal|0
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
name|endpointSummary
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
name|endpointSummary
argument_list|)
expr_stmt|;
block|}
name|int
name|simpleErrors
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CamelSimpleExpressionDetails
name|detail
range|:
name|simpleExpressions
control|)
block|{
name|SimpleValidationResult
name|result
decl_stmt|;
name|boolean
name|predicate
init|=
name|detail
operator|.
name|isPredicate
argument_list|()
decl_stmt|;
if|if
condition|(
name|predicate
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Validating simple predicate: "
operator|+
name|detail
operator|.
name|getSimple
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateSimplePredicate
argument_list|(
name|detail
operator|.
name|getSimple
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Validating simple expression: "
operator|+
name|detail
operator|.
name|getSimple
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateSimpleExpression
argument_list|(
name|detail
operator|.
name|getSimple
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|result
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|simpleErrors
operator|++
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Simple validation error at: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|detail
operator|.
name|getClassName
argument_list|()
operator|!=
literal|null
operator|&&
name|detail
operator|.
name|getLineNumber
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this is from java code
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|detail
operator|.
name|getMethodName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|asSimpleClassName
argument_list|(
name|detail
operator|.
name|getClassName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".java:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getLineNumber
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|detail
operator|.
name|getLineNumber
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this is from xml
name|String
name|fqn
init|=
name|stripRootPath
argument_list|(
name|asRelativeFile
argument_list|(
name|detail
operator|.
name|getFileName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fqn
operator|.
name|endsWith
argument_list|(
literal|".xml"
argument_list|)
condition|)
block|{
name|fqn
operator|=
name|fqn
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fqn
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
name|fqn
operator|=
name|asPackageName
argument_list|(
name|fqn
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|fqn
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|asSimpleClassName
argument_list|(
name|fqn
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".xml:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getLineNumber
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|String
index|[]
name|lines
init|=
name|result
operator|.
name|getError
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n\t"
argument_list|)
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|showAll
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Simple validation passed at: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|detail
operator|.
name|getClassName
argument_list|()
operator|!=
literal|null
operator|&&
name|detail
operator|.
name|getLineNumber
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this is from java code
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|detail
operator|.
name|getMethodName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|asSimpleClassName
argument_list|(
name|detail
operator|.
name|getClassName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".java:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getLineNumber
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|detail
operator|.
name|getLineNumber
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this is from xml
name|String
name|fqn
init|=
name|stripRootPath
argument_list|(
name|asRelativeFile
argument_list|(
name|detail
operator|.
name|getFileName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fqn
operator|.
name|endsWith
argument_list|(
literal|".xml"
argument_list|)
condition|)
block|{
name|fqn
operator|=
name|fqn
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fqn
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
name|fqn
operator|=
name|asPackageName
argument_list|(
name|fqn
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|fqn
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|asSimpleClassName
argument_list|(
name|fqn
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".xml:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getLineNumber
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n\t"
argument_list|)
operator|.
name|append
argument_list|(
name|result
operator|.
name|getSimple
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|simpleSummary
decl_stmt|;
if|if
condition|(
name|simpleErrors
operator|==
literal|0
condition|)
block|{
name|int
name|ok
init|=
name|simpleExpressions
operator|.
name|size
argument_list|()
operator|-
name|simpleErrors
decl_stmt|;
name|simpleSummary
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"Simple validation success: (%s = passed, %s = invalid)"
argument_list|,
name|ok
argument_list|,
name|simpleErrors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|ok
init|=
name|simpleExpressions
operator|.
name|size
argument_list|()
operator|-
name|simpleErrors
decl_stmt|;
name|simpleSummary
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"Simple validation error: (%s = passed, %s = invalid)"
argument_list|,
name|ok
argument_list|,
name|simpleErrors
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|simpleErrors
operator|>
literal|0
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
name|simpleSummary
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
name|simpleSummary
argument_list|)
expr_stmt|;
block|}
name|int
name|duplicateRouteIdErrors
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|duplicateRouteId
condition|)
block|{
comment|// filter out all non uniques
for|for
control|(
name|CamelRouteDetails
name|detail
range|:
name|routeIds
control|)
block|{
comment|// skip empty route ids
if|if
condition|(
name|detail
operator|.
name|getRouteId
argument_list|()
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|detail
operator|.
name|getRouteId
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|int
name|count
init|=
name|countRouteId
argument_list|(
name|routeIds
argument_list|,
name|detail
operator|.
name|getRouteId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|1
condition|)
block|{
name|duplicateRouteIdErrors
operator|++
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Duplicate route id validation error at: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|detail
operator|.
name|getClassName
argument_list|()
operator|!=
literal|null
operator|&&
name|detail
operator|.
name|getLineNumber
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this is from java code
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|detail
operator|.
name|getMethodName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|asSimpleClassName
argument_list|(
name|detail
operator|.
name|getClassName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".java:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getLineNumber
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|detail
operator|.
name|getLineNumber
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this is from xml
name|String
name|fqn
init|=
name|stripRootPath
argument_list|(
name|asRelativeFile
argument_list|(
name|detail
operator|.
name|getFileName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fqn
operator|.
name|endsWith
argument_list|(
literal|".xml"
argument_list|)
condition|)
block|{
name|fqn
operator|=
name|fqn
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fqn
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
name|fqn
operator|=
name|asPackageName
argument_list|(
name|fqn
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|fqn
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|asSimpleClassName
argument_list|(
name|fqn
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".xml:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getLineNumber
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n\t"
argument_list|)
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getRouteId
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|showAll
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Duplicate route id validation passed at: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|detail
operator|.
name|getClassName
argument_list|()
operator|!=
literal|null
operator|&&
name|detail
operator|.
name|getLineNumber
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this is from java code
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|detail
operator|.
name|getMethodName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|asSimpleClassName
argument_list|(
name|detail
operator|.
name|getClassName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".java:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getLineNumber
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|detail
operator|.
name|getLineNumber
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this is from xml
name|String
name|fqn
init|=
name|stripRootPath
argument_list|(
name|asRelativeFile
argument_list|(
name|detail
operator|.
name|getFileName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fqn
operator|.
name|endsWith
argument_list|(
literal|".xml"
argument_list|)
condition|)
block|{
name|fqn
operator|=
name|fqn
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fqn
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
name|fqn
operator|=
name|asPackageName
argument_list|(
name|fqn
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|fqn
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|asSimpleClassName
argument_list|(
name|fqn
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".xml:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getLineNumber
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n\t"
argument_list|)
operator|.
name|append
argument_list|(
name|detail
operator|.
name|getRouteId
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|routeIdSummary
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|duplicateRouteId
condition|)
block|{
if|if
condition|(
name|duplicateRouteIdErrors
operator|==
literal|0
condition|)
block|{
name|routeIdSummary
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"Duplicate route id validation success (%s = ids)"
argument_list|,
name|routeIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|routeIdSummary
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"Duplicate route id validation error: (%s = ids, %s = duplicates)"
argument_list|,
name|routeIds
operator|.
name|size
argument_list|()
argument_list|,
name|duplicateRouteIdErrors
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|duplicateRouteIdErrors
operator|>
literal|0
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
name|routeIdSummary
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
name|routeIdSummary
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failOnError
operator|&&
operator|(
name|endpointErrors
operator|>
literal|0
operator|||
name|simpleErrors
operator|>
literal|0
operator|||
name|duplicateRouteIdErrors
operator|>
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|endpointSummary
operator|+
literal|"\n"
operator|+
name|simpleSummary
operator|+
literal|"\n"
operator|+
name|routeIdSummary
argument_list|)
throw|;
block|}
block|}
comment|// CHECKSTYLE:ON
DECL|method|countRouteId (List<CamelRouteDetails> details, String routeId)
specifier|private
specifier|static
name|int
name|countRouteId
parameter_list|(
name|List
argument_list|<
name|CamelRouteDetails
argument_list|>
name|details
parameter_list|,
name|String
name|routeId
parameter_list|)
block|{
name|int
name|answer
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CamelRouteDetails
name|detail
range|:
name|details
control|)
block|{
if|if
condition|(
name|routeId
operator|.
name|equals
argument_list|(
name|detail
operator|.
name|getRouteId
argument_list|()
argument_list|)
condition|)
block|{
name|answer
operator|++
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|findCamelVersion (MavenProject project)
specifier|private
specifier|static
name|String
name|findCamelVersion
parameter_list|(
name|MavenProject
name|project
parameter_list|)
block|{
name|Dependency
name|candidate
init|=
literal|null
decl_stmt|;
name|List
name|list
init|=
name|project
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|list
control|)
block|{
name|Dependency
name|dep
init|=
operator|(
name|Dependency
operator|)
name|obj
decl_stmt|;
if|if
condition|(
literal|"org.apache.camel"
operator|.
name|equals
argument_list|(
name|dep
operator|.
name|getGroupId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"camel-core"
operator|.
name|equals
argument_list|(
name|dep
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
comment|// favor camel-core
name|candidate
operator|=
name|dep
expr_stmt|;
break|break;
block|}
else|else
block|{
name|candidate
operator|=
name|dep
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|candidate
operator|!=
literal|null
condition|)
block|{
return|return
name|candidate
operator|.
name|getVersion
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|findJavaFiles (File dir, Set<File> javaFiles)
specifier|private
name|void
name|findJavaFiles
parameter_list|(
name|File
name|dir
parameter_list|,
name|Set
argument_list|<
name|File
argument_list|>
name|javaFiles
parameter_list|)
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|isDirectory
argument_list|()
condition|?
name|dir
operator|.
name|listFiles
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".java"
argument_list|)
condition|)
block|{
name|javaFiles
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|findJavaFiles
argument_list|(
name|file
argument_list|,
name|javaFiles
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|findXmlFiles (File dir, Set<File> xmlFiles)
specifier|private
name|void
name|findXmlFiles
parameter_list|(
name|File
name|dir
parameter_list|,
name|Set
argument_list|<
name|File
argument_list|>
name|xmlFiles
parameter_list|)
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|isDirectory
argument_list|()
condition|?
name|dir
operator|.
name|listFiles
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".xml"
argument_list|)
condition|)
block|{
name|xmlFiles
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|findXmlFiles
argument_list|(
name|file
argument_list|,
name|xmlFiles
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|matchFile (File file)
specifier|private
name|boolean
name|matchFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
name|excludes
operator|==
literal|null
operator|&&
name|includes
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// exclude take precedence
if|if
condition|(
name|excludes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|exclude
range|:
name|excludes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|exclude
operator|=
name|exclude
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// try both with and without directory in the name
name|String
name|fqn
init|=
name|stripRootPath
argument_list|(
name|asRelativeFile
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|match
init|=
name|EndpointHelper
operator|.
name|matchPattern
argument_list|(
name|fqn
argument_list|,
name|exclude
argument_list|)
operator|||
name|EndpointHelper
operator|.
name|matchPattern
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|,
name|exclude
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
comment|// include
if|if
condition|(
name|includes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|include
range|:
name|includes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|include
operator|=
name|include
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// try both with and without directory in the name
name|String
name|fqn
init|=
name|stripRootPath
argument_list|(
name|asRelativeFile
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|match
init|=
name|EndpointHelper
operator|.
name|matchPattern
argument_list|(
name|fqn
argument_list|,
name|include
argument_list|)
operator|||
name|EndpointHelper
operator|.
name|matchPattern
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|,
name|include
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// did not match any includes
return|return
literal|false
return|;
block|}
comment|// was not excluded nor failed include so its accepted
return|return
literal|true
return|;
block|}
DECL|method|asRelativeFile (String name)
specifier|private
name|String
name|asRelativeFile
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|answer
init|=
name|name
decl_stmt|;
name|String
name|base
init|=
name|project
operator|.
name|getBasedir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|base
argument_list|)
condition|)
block|{
name|answer
operator|=
name|name
operator|.
name|substring
argument_list|(
name|base
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// skip leading slash for relative path
if|if
condition|(
name|answer
operator|.
name|startsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
condition|)
block|{
name|answer
operator|=
name|answer
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|stripRootPath (String name)
specifier|private
name|String
name|stripRootPath
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// strip out any leading source / resource directory
name|List
name|list
init|=
name|project
operator|.
name|getCompileSourceRoots
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|list
control|)
block|{
name|String
name|dir
init|=
operator|(
name|String
operator|)
name|obj
decl_stmt|;
name|dir
operator|=
name|asRelativeFile
argument_list|(
name|dir
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|dir
argument_list|)
condition|)
block|{
return|return
name|name
operator|.
name|substring
argument_list|(
name|dir
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
name|list
operator|=
name|project
operator|.
name|getTestCompileSourceRoots
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|list
control|)
block|{
name|String
name|dir
init|=
operator|(
name|String
operator|)
name|obj
decl_stmt|;
name|dir
operator|=
name|asRelativeFile
argument_list|(
name|dir
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|dir
argument_list|)
condition|)
block|{
return|return
name|name
operator|.
name|substring
argument_list|(
name|dir
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
name|List
name|resources
init|=
name|project
operator|.
name|getResources
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|resources
control|)
block|{
name|Resource
name|resource
init|=
operator|(
name|Resource
operator|)
name|obj
decl_stmt|;
name|String
name|dir
init|=
name|asRelativeFile
argument_list|(
name|resource
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|dir
argument_list|)
condition|)
block|{
return|return
name|name
operator|.
name|substring
argument_list|(
name|dir
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
name|resources
operator|=
name|project
operator|.
name|getTestResources
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|resources
control|)
block|{
name|Resource
name|resource
init|=
operator|(
name|Resource
operator|)
name|obj
decl_stmt|;
name|String
name|dir
init|=
name|asRelativeFile
argument_list|(
name|resource
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|dir
argument_list|)
condition|)
block|{
return|return
name|name
operator|.
name|substring
argument_list|(
name|dir
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
return|return
name|name
return|;
block|}
DECL|method|asPackageName (String name)
specifier|private
specifier|static
name|String
name|asPackageName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separator
argument_list|,
literal|"."
argument_list|)
return|;
block|}
DECL|method|asSimpleClassName (String className)
specifier|private
specifier|static
name|String
name|asSimpleClassName
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|int
name|dot
init|=
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dot
operator|>
literal|0
condition|)
block|{
return|return
name|className
operator|.
name|substring
argument_list|(
name|dot
operator|+
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|className
return|;
block|}
block|}
block|}
end_class

end_unit

