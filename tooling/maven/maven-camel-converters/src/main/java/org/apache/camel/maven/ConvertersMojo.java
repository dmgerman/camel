begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ReportingTypeConverterLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ReportingTypeConverterRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ReportingTypeConverterLoader
operator|.
name|TypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Generate report of available type converstions.  *  * @goal report  *   * @phase verify  */
end_comment

begin_class
DECL|class|ConvertersMojo
specifier|public
class|class
name|ConvertersMojo
extends|extends
name|AbstractMojo
block|{
comment|/**      * Base directory where all reports are written to.      *       * @parameter expression="${project.build.directory}/camel-reports"      */
DECL|field|reportsDirectory
specifier|private
name|File
name|reportsDirectory
decl_stmt|;
comment|/**      * Convenience parameter that allows you to disable report generation.      *      * @parameter expression="${generateReports}" default-value="true"      */
DECL|field|generateReports
specifier|private
name|boolean
name|generateReports
decl_stmt|;
DECL|field|LINE_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|LINE_SEPARATOR
init|=
literal|"-------------------------------------------------------------------------------\n"
decl_stmt|;
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Camel report directory: "
operator|+
name|reportsDirectory
argument_list|)
expr_stmt|;
name|ReportingTypeConverterLoader
name|loader
init|=
operator|new
name|ReportingTypeConverterLoader
argument_list|()
decl_stmt|;
name|ReportingTypeConverterRegistry
name|registry
init|=
operator|new
name|ReportingTypeConverterRegistry
argument_list|()
decl_stmt|;
try|try
block|{
name|loader
operator|.
name|load
argument_list|(
name|registry
argument_list|)
expr_stmt|;
name|String
index|[]
name|errors
init|=
name|registry
operator|.
name|getErrors
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|error
range|:
name|errors
control|)
block|{
name|getLog
argument_list|()
operator|.
name|error
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|generateReports
condition|)
block|{
name|generateReport
argument_list|(
name|loader
operator|.
name|getTypeConversions
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|generateReport (TypeMapping[] mappings)
specifier|protected
name|void
name|generateReport
parameter_list|(
name|TypeMapping
index|[]
name|mappings
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|File
name|f
init|=
name|reportsDirectory
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|f
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|File
name|report
init|=
operator|new
name|File
argument_list|(
name|f
argument_list|,
literal|"camel-converters.txt"
argument_list|)
decl_stmt|;
name|FileWriter
name|fw
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fw
operator|=
operator|new
name|FileWriter
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|fw
operator|.
name|write
argument_list|(
literal|"Camel Type Converter definitions\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|write
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|packages
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|classes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Class
name|prevFrom
init|=
literal|null
decl_stmt|;
name|Class
name|prevTo
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TypeMapping
name|mapping
range|:
name|mappings
control|)
block|{
name|boolean
name|ignored
init|=
literal|false
decl_stmt|;
name|Class
name|from
init|=
name|mapping
operator|.
name|getFromType
argument_list|()
decl_stmt|;
name|Class
name|to
init|=
name|mapping
operator|.
name|getToType
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|from
argument_list|,
name|prevFrom
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|to
argument_list|,
name|prevTo
argument_list|)
condition|)
block|{
name|ignored
operator|=
literal|true
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|prevFrom
operator|=
name|from
expr_stmt|;
name|prevTo
operator|=
name|to
expr_stmt|;
name|Method
name|method
init|=
name|mapping
operator|.
name|getMethod
argument_list|()
decl_stmt|;
name|Class
name|methodClass
init|=
name|method
operator|.
name|getDeclaringClass
argument_list|()
decl_stmt|;
name|packages
operator|.
name|add
argument_list|(
name|methodClass
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|methodClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|from
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"=>"
operator|+
name|to
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" ["
operator|+
name|mapping
operator|.
name|getConverterType
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"("
operator|+
name|methodClass
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"())]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ignored
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" - IGNORED replaced by conversion method above"
argument_list|)
expr_stmt|;
block|}
name|fw
operator|.
name|write
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|String
name|summary
init|=
literal|"Found "
operator|+
name|mappings
operator|.
name|length
operator|+
literal|" type conversion methods in "
operator|+
name|classes
operator|.
name|size
argument_list|()
operator|+
literal|" classes from "
operator|+
name|packages
operator|.
name|size
argument_list|()
operator|+
literal|" packages."
decl_stmt|;
name|fw
operator|.
name|write
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
name|fw
operator|.
name|write
argument_list|(
name|summary
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
name|summary
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error creating report file "
operator|+
name|report
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|fw
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

