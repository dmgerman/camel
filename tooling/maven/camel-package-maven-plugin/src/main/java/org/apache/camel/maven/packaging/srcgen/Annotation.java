begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging.srcgen
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|srcgen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_class
DECL|class|Annotation
specifier|public
class|class
name|Annotation
block|{
DECL|field|type
name|Class
argument_list|<
name|?
extends|extends
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
argument_list|>
name|type
decl_stmt|;
DECL|field|values
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|Annotation (Class<? extends java.lang.annotation.Annotation> type)
specifier|public
name|Annotation
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
argument_list|>
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|getType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|setType (Class<? extends java.lang.annotation.Annotation> type)
specifier|public
name|Annotation
name|setType
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
argument_list|>
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setStringValue (String name, String value)
specifier|public
name|Annotation
name|setStringValue
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|values
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|quote
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setLiteralValue (String name, String value)
specifier|public
name|Annotation
name|setLiteralValue
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|values
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setLiteralValue (String value)
specifier|public
name|Annotation
name|setLiteralValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|setLiteralValue
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|setStringArrayValue (String name, String[] values)
specifier|public
name|Annotation
name|setStringArrayValue
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|setStringValue
argument_list|(
name|name
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|value
init|=
name|Stream
operator|.
name|of
argument_list|(
name|values
argument_list|)
operator|.
name|map
argument_list|(
name|Annotation
operator|::
name|quote
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|,
literal|"{"
argument_list|,
literal|"}"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|setLiteralValue
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
DECL|method|getStringValue (String name)
specifier|public
name|String
name|getStringValue
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|v
init|=
name|values
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|v
operator|!=
literal|null
condition|?
name|unquote
argument_list|(
name|v
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|unquote (String value)
specifier|private
specifier|static
name|String
name|unquote
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|value
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
return|return
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|value
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
DECL|method|quote (String value)
specifier|public
specifier|static
name|String
name|quote
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|value
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'"'
operator|||
name|c
operator|==
literal|'\\'
condition|)
block|{
if|if
condition|(
name|sb
operator|==
literal|null
condition|)
block|{
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\\"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|sb
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sb
operator|==
literal|null
condition|)
block|{
return|return
literal|"\""
operator|+
name|value
operator|+
literal|"\""
return|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

