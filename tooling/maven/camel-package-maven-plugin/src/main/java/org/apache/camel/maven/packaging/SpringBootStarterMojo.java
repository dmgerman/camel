begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpression
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|freemarker
operator|.
name|cache
operator|.
name|URLTemplateLoader
import|;
end_import

begin_import
import|import
name|freemarker
operator|.
name|template
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|freemarker
operator|.
name|template
operator|.
name|Template
import|;
end_import

begin_import
import|import
name|freemarker
operator|.
name|template
operator|.
name|TemplateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|metadata
operator|.
name|ArtifactMetadataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|filter
operator|.
name|ArtifactFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|filter
operator|.
name|ScopeArtifactFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|DependencyNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|DependencyTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|DependencyTreeBuilderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|traversal
operator|.
name|CollectingDependencyNodeVisitor
import|;
end_import

begin_comment
comment|/**  * Generate Spring Boot starter for the component  *  * @goal prepare-spring-boot-starter  * @threadSafe  */
end_comment

begin_class
DECL|class|SpringBootStarterMojo
specifier|public
class|class
name|SpringBootStarterMojo
extends|extends
name|AbstractMojo
block|{
DECL|field|IGNORE_MODULES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|IGNORE_MODULES
init|=
block|{
comment|/* OSGi -> */
literal|"camel-blueprint"
block|,
literal|"camel-core-osgi"
block|,
literal|"camel-eventadmin"
block|,
literal|"camel-paxlogging"
block|,
literal|"camel-scr"
block|,
comment|/* Java EE -> */
literal|"camel-cdi"
block|,
literal|"camel-ejb"
block|,
comment|/* deprecated (and not working perfectly) -> */
literal|"camel-swagger"
block|,
literal|"camel-mina"
block|,
literal|"camel-ibatis"
block|,
literal|"camel-quartz"
block|,
comment|/* currently incompatible */
literal|"camel-spark-rest"
block|,
comment|/* others (not managed) -> */
literal|"camel-core-xml"
block|,
literal|"camel-scala"
block|}
decl_stmt|;
DECL|field|IGNORE_TEST_MODULES
specifier|private
specifier|static
specifier|final
name|boolean
name|IGNORE_TEST_MODULES
init|=
literal|true
decl_stmt|;
DECL|field|GENERATED_SECTION_START
specifier|private
specifier|static
specifier|final
name|String
name|GENERATED_SECTION_START
init|=
literal|"START OF GENERATED CODE"
decl_stmt|;
DECL|field|GENERATED_SECTION_START_COMMENT
specifier|private
specifier|static
specifier|final
name|String
name|GENERATED_SECTION_START_COMMENT
init|=
literal|"<!--"
operator|+
name|GENERATED_SECTION_START
operator|+
literal|"-->"
decl_stmt|;
DECL|field|GENERATED_SECTION_END
specifier|private
specifier|static
specifier|final
name|String
name|GENERATED_SECTION_END
init|=
literal|"END OF GENERATED CODE"
decl_stmt|;
DECL|field|GENERATED_SECTION_END_COMMENT
specifier|private
specifier|static
specifier|final
name|String
name|GENERATED_SECTION_END_COMMENT
init|=
literal|"<!--"
operator|+
name|GENERATED_SECTION_END
operator|+
literal|"-->"
decl_stmt|;
comment|/**      * The maven project.      *      * @parameter property="project"      * @required      * @readonly      */
DECL|field|project
specifier|protected
name|MavenProject
name|project
decl_stmt|;
comment|/**      * Allows using the existing pom.xml file if present.      *      * @parameter property="reuseExistingPom" default-value="true"      */
DECL|field|reuseExistingPom
specifier|protected
name|boolean
name|reuseExistingPom
decl_stmt|;
comment|/**      * The project directory      *      * @parameter default-value="${basedir}"      */
DECL|field|baseDir
specifier|protected
name|File
name|baseDir
decl_stmt|;
comment|/**      * @component      * @required      * @readonly      */
DECL|field|artifactFactory
specifier|protected
name|ArtifactFactory
name|artifactFactory
decl_stmt|;
comment|/**      * @component      * @required      * @readonly      */
DECL|field|artifactMetadataSource
specifier|protected
name|ArtifactMetadataSource
name|artifactMetadataSource
decl_stmt|;
comment|/**      * @component      * @required      * @readonly      */
DECL|field|artifactCollector
specifier|protected
name|ArtifactCollector
name|artifactCollector
decl_stmt|;
comment|/**      * @component      * @required      * @readonly      */
DECL|field|treeBuilder
specifier|protected
name|DependencyTreeBuilder
name|treeBuilder
decl_stmt|;
comment|/**      * @parameter default-value="${localRepository}"      * @readonly      * @required      */
DECL|field|localRepository
specifier|protected
name|ArtifactRepository
name|localRepository
decl_stmt|;
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
if|if
condition|(
operator|!
name|isStarterAllowed
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Spring-Boot-Starter: starter not allowed for module "
operator|+
name|project
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|": skipping."
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
comment|// create the starter directory
name|File
name|starterDir
init|=
name|starterDir
argument_list|()
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Spring-Boot-Starter: starter dir for the component is: "
operator|+
name|starterDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|starterDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|starterDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
comment|// create the base pom.xml
name|Document
name|pom
init|=
name|createBasePom
argument_list|()
decl_stmt|;
comment|// Apply changes to the starter pom
name|fixExcludedDependencies
argument_list|(
name|pom
argument_list|)
expr_stmt|;
name|fixAdditionalDependencies
argument_list|(
name|pom
argument_list|)
expr_stmt|;
name|fixAdditionalRepositories
argument_list|(
name|pom
argument_list|)
expr_stmt|;
comment|// Write the starter pom
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|starterDir
argument_list|,
literal|"pom.xml"
argument_list|)
decl_stmt|;
name|writeXmlFormatted
argument_list|(
name|pom
argument_list|,
name|pomFile
argument_list|)
expr_stmt|;
comment|// write LICENSE, USAGE and spring.provides files
name|writeStaticFiles
argument_list|()
expr_stmt|;
name|writeSpringProvides
argument_list|()
expr_stmt|;
comment|// synchronized all starters with their parent pom 'modules' section
name|synchronizeParentPom
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Unable to create starter"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|starterDir ()
specifier|private
name|File
name|starterDir
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|SpringBootHelper
operator|.
name|starterDir
argument_list|(
name|baseDir
argument_list|,
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|allStartersDir ()
specifier|private
name|File
name|allStartersDir
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|SpringBootHelper
operator|.
name|allStartersDir
argument_list|(
name|baseDir
argument_list|)
return|;
block|}
DECL|method|fixAdditionalDependencies (Document pom)
specifier|private
name|void
name|fixAdditionalDependencies
parameter_list|(
name|Document
name|pom
parameter_list|)
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/spring-boot-fix-dependencies.properties"
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|deps
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|deps
operator|.
name|addAll
argument_list|(
name|csvToSet
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|globalProps
init|=
name|csvToSet
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"global"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|inGlobal
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|gp
range|:
name|globalProps
control|)
block|{
name|String
index|[]
name|comps
init|=
name|gp
operator|.
name|split
argument_list|(
literal|"\\:"
argument_list|)
decl_stmt|;
name|String
name|stdName
init|=
operator|(
name|comps
index|[
literal|0
index|]
operator|+
literal|":"
operator|+
name|comps
index|[
literal|1
index|]
operator|)
operator|.
name|replace
argument_list|(
literal|"-starter"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|stdName
operator|.
name|equals
argument_list|(
name|project
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
name|inGlobal
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|inGlobal
condition|)
block|{
comment|// add global properties for all modules not in global properties
name|deps
operator|.
name|addAll
argument_list|(
name|globalProps
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deps
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"The following dependencies will be added to the starter: "
operator|+
name|deps
argument_list|)
expr_stmt|;
name|XPath
name|xpath
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXPath
argument_list|()
decl_stmt|;
name|Node
name|dependencies
init|=
operator|(
operator|(
name|NodeList
operator|)
name|xpath
operator|.
name|compile
argument_list|(
literal|"/project/dependencies"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|pom
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
operator|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|deps
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|dependencies
operator|.
name|appendChild
argument_list|(
name|pom
operator|.
name|createComment
argument_list|(
name|GENERATED_SECTION_START
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dep
range|:
name|deps
control|)
block|{
name|Element
name|dependency
init|=
name|pom
operator|.
name|createElement
argument_list|(
literal|"dependency"
argument_list|)
decl_stmt|;
name|dependencies
operator|.
name|appendChild
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
name|String
index|[]
name|comps
init|=
name|dep
operator|.
name|split
argument_list|(
literal|"\\:"
argument_list|)
decl_stmt|;
name|String
name|groupIdStr
init|=
name|comps
index|[
literal|0
index|]
decl_stmt|;
name|String
name|artifactIdStr
init|=
name|comps
index|[
literal|1
index|]
decl_stmt|;
name|String
name|versionStr
init|=
name|comps
operator|.
name|length
operator|>
literal|2
condition|?
name|comps
index|[
literal|2
index|]
else|:
literal|null
decl_stmt|;
name|Element
name|groupId
init|=
name|pom
operator|.
name|createElement
argument_list|(
literal|"groupId"
argument_list|)
decl_stmt|;
name|groupId
operator|.
name|setTextContent
argument_list|(
name|groupIdStr
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|appendChild
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|Element
name|artifactId
init|=
name|pom
operator|.
name|createElement
argument_list|(
literal|"artifactId"
argument_list|)
decl_stmt|;
name|artifactId
operator|.
name|setTextContent
argument_list|(
name|artifactIdStr
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|appendChild
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
if|if
condition|(
name|versionStr
operator|!=
literal|null
condition|)
block|{
name|Element
name|version
init|=
name|pom
operator|.
name|createElement
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
name|version
operator|.
name|setTextContent
argument_list|(
name|versionStr
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|appendChild
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
block|}
name|dependencies
operator|.
name|appendChild
argument_list|(
name|pom
operator|.
name|createComment
argument_list|(
name|GENERATED_SECTION_END
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|fixAdditionalRepositories (Document pom)
specifier|private
name|void
name|fixAdditionalRepositories
parameter_list|(
name|Document
name|pom
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|project
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|dbf
operator|.
name|setFeature
argument_list|(
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|originalPom
init|=
name|builder
operator|.
name|parse
argument_list|(
name|project
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|XPath
name|xpath
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXPath
argument_list|()
decl_stmt|;
name|Node
name|repositories
init|=
operator|(
name|Node
operator|)
name|xpath
operator|.
name|compile
argument_list|(
literal|"/project/repositories"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|originalPom
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|repositories
operator|!=
literal|null
condition|)
block|{
name|pom
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|appendChild
argument_list|(
name|pom
operator|.
name|createComment
argument_list|(
name|GENERATED_SECTION_START
argument_list|)
argument_list|)
expr_stmt|;
name|pom
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|appendChild
argument_list|(
name|pom
operator|.
name|importNode
argument_list|(
name|repositories
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|pom
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|appendChild
argument_list|(
name|pom
operator|.
name|createComment
argument_list|(
name|GENERATED_SECTION_END
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Cannot access the project pom file to retrieve repositories"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|appendTextElementIfPresent (Document pom, Element parent, String name, String value)
specifier|private
name|void
name|appendTextElementIfPresent
parameter_list|(
name|Document
name|pom
parameter_list|,
name|Element
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|Element
name|element
init|=
name|pom
operator|.
name|createElement
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|element
operator|.
name|setTextContent
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|parent
operator|.
name|appendChild
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
DECL|method|csvToSet (String csv)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|csvToSet
parameter_list|(
name|String
name|csv
parameter_list|)
block|{
if|if
condition|(
name|csv
operator|==
literal|null
operator|||
name|csv
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|TreeSet
argument_list|<>
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|csv
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|set
return|;
block|}
DECL|method|fixExcludedDependencies (Document pom)
specifier|private
name|void
name|fixExcludedDependencies
parameter_list|(
name|Document
name|pom
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|loggingImpl
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|loggingImpl
operator|.
name|add
argument_list|(
literal|"commons-logging:commons-logging"
argument_list|)
expr_stmt|;
name|loggingImpl
operator|.
name|add
argument_list|(
literal|"log4j:log4j"
argument_list|)
expr_stmt|;
name|loggingImpl
operator|.
name|add
argument_list|(
literal|"log4j:apache-log4j-extras"
argument_list|)
expr_stmt|;
comment|// removing also the default implementation
name|loggingImpl
operator|.
name|add
argument_list|(
literal|"ch.qos.logback:logback-core"
argument_list|)
expr_stmt|;
name|loggingImpl
operator|.
name|add
argument_list|(
literal|"ch.qos.logback:logback-classic"
argument_list|)
expr_stmt|;
name|loggingImpl
operator|.
name|add
argument_list|(
literal|"org.apache.logging.log4j:log4j"
argument_list|)
expr_stmt|;
name|loggingImpl
operator|.
name|add
argument_list|(
literal|"org.apache.logging.log4j:log4j-jcl"
argument_list|)
expr_stmt|;
name|loggingImpl
operator|.
name|add
argument_list|(
literal|"org.apache.logging.log4j:log4j-core"
argument_list|)
expr_stmt|;
name|loggingImpl
operator|.
name|add
argument_list|(
literal|"org.apache.logging.log4j:log4j-slf4j-impl"
argument_list|)
expr_stmt|;
name|loggingImpl
operator|.
name|add
argument_list|(
literal|"org.slf4j:slf4j-jcl"
argument_list|)
expr_stmt|;
name|loggingImpl
operator|.
name|add
argument_list|(
literal|"org.slf4j:slf4j-jdk14"
argument_list|)
expr_stmt|;
name|loggingImpl
operator|.
name|add
argument_list|(
literal|"org.slf4j:slf4j-log4j12"
argument_list|)
expr_stmt|;
name|loggingImpl
operator|.
name|add
argument_list|(
literal|"org.slf4j:slf4j-log4j13"
argument_list|)
expr_stmt|;
name|loggingImpl
operator|.
name|add
argument_list|(
literal|"org.slf4j:slf4j-nop"
argument_list|)
expr_stmt|;
name|loggingImpl
operator|.
name|add
argument_list|(
literal|"org.slf4j:slf4j-simple"
argument_list|)
expr_stmt|;
comment|// excluded dependencies
name|Set
argument_list|<
name|String
argument_list|>
name|configExclusions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/spring-boot-fix-dependencies.properties"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|artExcl
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"exclude_"
operator|+
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Configured exclusions: "
operator|+
name|artExcl
argument_list|)
expr_stmt|;
if|if
condition|(
name|artExcl
operator|!=
literal|null
operator|&&
name|artExcl
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|dep
range|:
name|artExcl
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Adding configured exclusion: "
operator|+
name|dep
argument_list|)
expr_stmt|;
name|configExclusions
operator|.
name|add
argument_list|(
name|dep
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|libsToRemove
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|libsToRemove
operator|.
name|addAll
argument_list|(
name|loggingImpl
argument_list|)
expr_stmt|;
name|libsToRemove
operator|.
name|addAll
argument_list|(
name|configExclusions
argument_list|)
expr_stmt|;
name|libsToRemove
operator|=
name|filterIncludedArtifacts
argument_list|(
name|libsToRemove
argument_list|)
expr_stmt|;
if|if
condition|(
name|libsToRemove
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Spring-Boot-Starter: the following dependencies will be removed from the starter: "
operator|+
name|libsToRemove
argument_list|)
expr_stmt|;
name|XPath
name|xpath
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXPath
argument_list|()
decl_stmt|;
name|Node
name|dependency
init|=
operator|(
operator|(
name|NodeList
operator|)
name|xpath
operator|.
name|compile
argument_list|(
literal|"/project/dependencies/dependency[artifactId/text() = '"
operator|+
name|project
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"']"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|pom
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
operator|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Element
name|exclusions
init|=
name|pom
operator|.
name|createElement
argument_list|(
literal|"exclusions"
argument_list|)
decl_stmt|;
name|dependency
operator|.
name|appendChild
argument_list|(
name|pom
operator|.
name|createComment
argument_list|(
name|GENERATED_SECTION_START
argument_list|)
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|appendChild
argument_list|(
name|exclusions
argument_list|)
expr_stmt|;
name|dependency
operator|.
name|appendChild
argument_list|(
name|pom
operator|.
name|createComment
argument_list|(
name|GENERATED_SECTION_END
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|lib
range|:
name|libsToRemove
control|)
block|{
name|String
name|groupIdStr
init|=
name|lib
operator|.
name|split
argument_list|(
literal|"\\:"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|String
name|artifactIdStr
init|=
name|lib
operator|.
name|split
argument_list|(
literal|"\\:"
argument_list|)
index|[
literal|1
index|]
decl_stmt|;
name|Element
name|exclusion
init|=
name|pom
operator|.
name|createElement
argument_list|(
literal|"exclusion"
argument_list|)
decl_stmt|;
name|Element
name|groupId
init|=
name|pom
operator|.
name|createElement
argument_list|(
literal|"groupId"
argument_list|)
decl_stmt|;
name|groupId
operator|.
name|setTextContent
argument_list|(
name|groupIdStr
argument_list|)
expr_stmt|;
name|exclusion
operator|.
name|appendChild
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|Element
name|artifactId
init|=
name|pom
operator|.
name|createElement
argument_list|(
literal|"artifactId"
argument_list|)
decl_stmt|;
name|artifactId
operator|.
name|setTextContent
argument_list|(
name|artifactIdStr
argument_list|)
expr_stmt|;
name|exclusion
operator|.
name|appendChild
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|exclusions
operator|.
name|appendChild
argument_list|(
name|exclusion
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|filterIncludedArtifacts (Set<String> artifacts)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|filterIncludedArtifacts
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|artifacts
parameter_list|)
throws|throws
name|DependencyTreeBuilderException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|included
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|ArtifactFilter
name|artifactFilter
init|=
operator|new
name|ScopeArtifactFilter
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|DependencyNode
name|node
init|=
name|treeBuilder
operator|.
name|buildDependencyTree
argument_list|(
name|project
argument_list|,
name|localRepository
argument_list|,
name|artifactFactory
argument_list|,
name|artifactMetadataSource
argument_list|,
name|artifactFilter
argument_list|,
name|artifactCollector
argument_list|)
decl_stmt|;
name|CollectingDependencyNodeVisitor
name|visitor
init|=
operator|new
name|CollectingDependencyNodeVisitor
argument_list|()
decl_stmt|;
name|node
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DependencyNode
argument_list|>
name|nodes
init|=
name|visitor
operator|.
name|getNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|DependencyNode
name|dependencyNode
range|:
name|nodes
control|)
block|{
name|Artifact
name|artifact
init|=
name|dependencyNode
operator|.
name|getArtifact
argument_list|()
decl_stmt|;
if|if
condition|(
name|getLog
argument_list|()
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Found dependency node: "
operator|+
name|artifact
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|":"
operator|+
name|artifact
operator|.
name|getVersion
argument_list|()
operator|+
literal|" - scope="
operator|+
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Artifact
operator|.
name|SCOPE_TEST
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|)
operator|&&
operator|!
name|Artifact
operator|.
name|SCOPE_PROVIDED
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|canonicalName
init|=
name|artifact
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
decl_stmt|;
if|if
condition|(
name|artifacts
operator|.
name|contains
argument_list|(
name|canonicalName
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|canonicalName
operator|+
literal|" marked for exclusion"
argument_list|)
expr_stmt|;
name|included
operator|.
name|add
argument_list|(
name|canonicalName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|included
return|;
block|}
DECL|method|synchronizeParentPom ()
specifier|private
name|void
name|synchronizeParentPom
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|allStartersDir
argument_list|()
argument_list|,
literal|"pom.xml"
argument_list|)
decl_stmt|;
name|DocumentBuilder
name|builder
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|pom
init|=
name|builder
operator|.
name|parse
argument_list|(
name|pomFile
argument_list|)
decl_stmt|;
name|XPath
name|xpath
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXPath
argument_list|()
decl_stmt|;
name|Node
name|modules
init|=
operator|(
operator|(
name|NodeList
operator|)
name|xpath
operator|.
name|compile
argument_list|(
literal|"/project/modules"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|pom
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
operator|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// cleanup current modules
while|while
condition|(
name|modules
operator|.
name|hasChildNodes
argument_list|()
condition|)
block|{
name|modules
operator|.
name|removeChild
argument_list|(
name|modules
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|File
name|starterDir
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|allStartersDir
argument_list|()
operator|.
name|listFiles
argument_list|(
parameter_list|(
name|f
parameter_list|,
name|n
parameter_list|)
lambda|->
operator|(
operator|new
name|File
argument_list|(
name|f
argument_list|,
name|n
argument_list|)
operator|)
operator|.
name|isDirectory
argument_list|()
operator|&&
name|n
operator|.
name|endsWith
argument_list|(
name|SpringBootHelper
operator|.
name|STARTER_SUFFIX
argument_list|)
operator|&&
operator|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|f
argument_list|,
name|n
argument_list|)
argument_list|,
literal|"pom.xml"
argument_list|)
operator|.
name|exists
argument_list|()
operator|)
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
control|)
block|{
name|Node
name|module
operator|=
name|pom
operator|.
name|createElement
argument_list|(
literal|"module"
argument_list|)
block|;
name|module
operator|.
name|setTextContent
argument_list|(
name|starterDir
operator|.
name|getName
argument_list|()
argument_list|)
block|;
name|modules
operator|.
name|appendChild
argument_list|(
name|module
argument_list|)
block|;         }
name|writeXmlFormatted
argument_list|(
name|pom
argument_list|,
name|pomFile
argument_list|)
expr_stmt|;
block|}
DECL|method|createBasePom ()
specifier|private
name|Document
name|createBasePom
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|pom
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reuseExistingPom
condition|)
block|{
name|pom
operator|=
name|createBasePomFromExisting
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pom
operator|==
literal|null
condition|)
block|{
name|pom
operator|=
name|createBasePomFromScratch
argument_list|()
expr_stmt|;
block|}
return|return
name|pom
return|;
block|}
DECL|method|createBasePomFromExisting ()
specifier|private
name|Document
name|createBasePomFromExisting
parameter_list|()
block|{
try|try
block|{
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|starterDir
argument_list|()
argument_list|,
literal|"pom.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pomFile
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
init|(
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|pomFile
argument_list|)
init|)
block|{
name|String
name|content
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|in
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|boolean
name|editablePom
init|=
name|content
operator|.
name|contains
argument_list|(
name|GENERATED_SECTION_START_COMMENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|editablePom
condition|)
block|{
name|content
operator|=
name|removeGeneratedSections
argument_list|(
name|content
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|pom
decl_stmt|;
try|try
init|(
name|InputStream
name|contentIn
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
init|)
block|{
name|pom
operator|=
name|builder
operator|.
name|parse
argument_list|(
name|contentIn
argument_list|)
expr_stmt|;
block|}
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Reusing the existing pom.xml for the starter"
argument_list|)
expr_stmt|;
return|return
name|pom
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Cannot use the existing pom.xml file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|removeGeneratedSections (String pom, int maxNumber)
specifier|private
name|String
name|removeGeneratedSections
parameter_list|(
name|String
name|pom
parameter_list|,
name|int
name|maxNumber
parameter_list|)
block|{
if|if
condition|(
name|maxNumber
operator|>
literal|0
operator|&&
name|pom
operator|.
name|contains
argument_list|(
name|GENERATED_SECTION_START_COMMENT
argument_list|)
condition|)
block|{
name|int
name|start
init|=
name|pom
operator|.
name|indexOf
argument_list|(
name|GENERATED_SECTION_START_COMMENT
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|pom
operator|.
name|indexOf
argument_list|(
name|GENERATED_SECTION_END_COMMENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|<=
name|start
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Generated sections inside the xml document are not well-formed"
argument_list|)
throw|;
block|}
name|String
name|newPom
init|=
name|pom
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|start
argument_list|)
operator|+
name|pom
operator|.
name|substring
argument_list|(
name|end
operator|+
name|GENERATED_SECTION_END_COMMENT
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|removeGeneratedSections
argument_list|(
name|newPom
argument_list|,
name|maxNumber
operator|-
literal|1
argument_list|)
return|;
block|}
return|return
name|pom
return|;
block|}
DECL|method|createBasePomFromScratch ()
specifier|private
name|Document
name|createBasePomFromScratch
parameter_list|()
throws|throws
name|Exception
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Creating a new pom.xml for the starter from scratch"
argument_list|)
expr_stmt|;
name|Template
name|pomTemplate
init|=
name|getTemplate
argument_list|(
literal|"spring-boot-starter-template-pom.template"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|project
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"componentId"
argument_list|,
name|getComponentId
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"componentName"
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"componentDescription"
argument_list|,
name|project
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|pomTemplate
operator|.
name|process
argument_list|(
name|props
argument_list|,
name|sw
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|bin
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|DocumentBuilder
name|builder
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|pom
init|=
name|builder
operator|.
name|parse
argument_list|(
name|bin
argument_list|)
decl_stmt|;
return|return
name|pom
return|;
block|}
DECL|method|writeStaticFiles ()
specifier|private
name|void
name|writeStaticFiles
parameter_list|()
throws|throws
name|IOException
throws|,
name|TemplateException
block|{
name|String
name|notice
decl_stmt|;
name|String
name|license
decl_stmt|;
try|try
init|(
name|InputStream
name|isNotice
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/spring-boot-starter-NOTICE.txt"
argument_list|)
init|;
name|InputStream
name|isLicense
operator|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/spring-boot-starter-LICENSE.txt"
argument_list|)
init|)
block|{
name|notice
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|isNotice
argument_list|)
expr_stmt|;
name|license
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|isLicense
argument_list|)
expr_stmt|;
block|}
name|writeIfChanged
argument_list|(
name|notice
argument_list|,
operator|new
name|File
argument_list|(
name|starterDir
argument_list|()
argument_list|,
literal|"src/main/resources/META-INF/NOTICE.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|writeIfChanged
argument_list|(
name|license
argument_list|,
operator|new
name|File
argument_list|(
name|starterDir
argument_list|()
argument_list|,
literal|"src/main/resources/META-INF/LICENSE.txt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeSpringProvides ()
specifier|private
name|void
name|writeSpringProvides
parameter_list|()
throws|throws
name|IOException
throws|,
name|TemplateException
block|{
name|Template
name|fileTemplate
init|=
name|getTemplate
argument_list|(
literal|"spring-boot-starter-template-spring.provides"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"artifactId"
argument_list|,
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|outDir
init|=
operator|new
name|File
argument_list|(
name|starterDir
argument_list|()
argument_list|,
literal|"src/main/resources/META-INF"
argument_list|)
decl_stmt|;
name|outDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
literal|"spring.provides"
argument_list|)
decl_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|fileTemplate
operator|.
name|process
argument_list|(
name|props
argument_list|,
name|sw
argument_list|)
expr_stmt|;
name|sw
operator|.
name|close
argument_list|()
expr_stmt|;
name|writeIfChanged
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|,
name|outFile
argument_list|)
expr_stmt|;
block|}
DECL|method|getTemplate (String name)
specifier|private
name|Template
name|getTemplate
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|cfg
init|=
operator|new
name|Configuration
argument_list|(
name|Configuration
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|setTemplateLoader
argument_list|(
operator|new
name|URLTemplateLoader
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|URL
name|getURL
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|SpringBootStarterMojo
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/"
operator|+
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setDefaultEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Template
name|template
init|=
name|cfg
operator|.
name|getTemplate
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|template
return|;
block|}
DECL|method|isStarterAllowed ()
specifier|private
name|boolean
name|isStarterAllowed
parameter_list|()
block|{
for|for
control|(
name|String
name|ignored
range|:
name|IGNORE_MODULES
control|)
block|{
if|if
condition|(
name|ignored
operator|.
name|equals
argument_list|(
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Component inside ignore list"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|IGNORE_TEST_MODULES
operator|&&
operator|(
name|project
operator|.
name|getArtifactId
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"camel-test"
argument_list|)
operator|||
name|project
operator|.
name|getArtifactId
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"camel-testng"
argument_list|)
operator|||
name|project
operator|.
name|getArtifactId
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"camel-testcontainers"
argument_list|)
operator|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Test components are ignored"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|project
operator|.
name|getPackaging
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|project
operator|.
name|getPackaging
argument_list|()
operator|.
name|equals
argument_list|(
literal|"jar"
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Ignored for wrong packaging"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// include 'camel-core'
if|if
condition|(
name|baseDir
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"camel-core"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Build a starter for all components under the 'components' dir and include submodules ending with '-component'
if|if
condition|(
name|baseDir
operator|.
name|getParentFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"components"
argument_list|)
operator|||
name|baseDir
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"-component"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Component directory mismatch"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|getComponentId ()
specifier|private
name|String
name|getComponentId
parameter_list|()
block|{
name|String
name|componentName
init|=
name|project
operator|.
name|getArtifact
argument_list|()
operator|.
name|getArtifactId
argument_list|()
decl_stmt|;
name|String
name|componentId
init|=
name|componentName
operator|.
name|replace
argument_list|(
literal|"camel-"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
return|return
name|componentId
return|;
block|}
DECL|method|writeXmlFormatted (Document pom, File destination)
specifier|private
name|void
name|writeXmlFormatted
parameter_list|(
name|Document
name|pom
parameter_list|,
name|File
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
name|XPathExpression
name|xpath
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXPath
argument_list|()
operator|.
name|compile
argument_list|(
literal|"//text()[normalize-space(.) = '']"
argument_list|)
decl_stmt|;
name|NodeList
name|emptyNodes
init|=
operator|(
name|NodeList
operator|)
name|xpath
operator|.
name|evaluate
argument_list|(
name|pom
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
comment|// Remove empty text nodes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|emptyNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|emptyNode
init|=
name|emptyNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|emptyNode
operator|.
name|getParentNode
argument_list|()
operator|.
name|removeChild
argument_list|(
name|emptyNode
argument_list|)
expr_stmt|;
block|}
name|pom
operator|.
name|setXmlStandalone
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TransformerFactory
name|transformerFactory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|transformerFactory
operator|.
name|setFeature
argument_list|(
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|Transformer
name|transformer
init|=
name|transformerFactory
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|METHOD
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
literal|"{http://xml.apache.org/xslt}indent-amount"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|DOMSource
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|pom
argument_list|)
decl_stmt|;
name|String
name|content
decl_stmt|;
try|try
init|(
name|StringWriter
name|out
init|=
operator|new
name|StringWriter
argument_list|()
init|)
block|{
name|StreamResult
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|source
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|content
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// Fix header formatting problem
name|content
operator|=
name|content
operator|.
name|replaceFirst
argument_list|(
literal|"-->"
argument_list|,
literal|"-->\n"
argument_list|)
operator|.
name|replaceFirst
argument_list|(
literal|"\\?><!--"
argument_list|,
literal|"\\?>\n<!--"
argument_list|)
expr_stmt|;
name|writeIfChanged
argument_list|(
name|content
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
DECL|method|writeIfChanged (String content, File file)
specifier|private
name|void
name|writeIfChanged
parameter_list|(
name|String
name|content
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|write
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
init|(
name|FileReader
name|fr
init|=
operator|new
name|FileReader
argument_list|(
name|file
argument_list|)
init|)
block|{
name|String
name|oldContent
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|fr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|content
operator|.
name|equals
argument_list|(
name|oldContent
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Writing new file "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|fr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"File "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" has been left unchanged"
argument_list|)
expr_stmt|;
name|write
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Create the structure
name|File
name|parent
init|=
name|file
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|parent
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|write
condition|)
block|{
try|try
init|(
name|FileWriter
name|fw
init|=
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|write
argument_list|(
name|content
argument_list|,
name|fw
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

