begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOError
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|generics
operator|.
name|GenericsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|ComponentModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|ComponentOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|EndpointOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|srcgen
operator|.
name|GenericType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|srcgen
operator|.
name|GenericType
operator|.
name|BoundType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|srcgen
operator|.
name|JavaClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|srcgen
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|LifecyclePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|ResolutionScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|AbstractGeneratorMojo
operator|.
name|updateResource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|JSonSchemaHelper
operator|.
name|getSafeValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|PackageHelper
operator|.
name|findCamelDirectory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|PackageHelper
operator|.
name|loadText
import|;
end_import

begin_comment
comment|/**  * Generate Spring Boot auto configuration files for Camel components and data  * formats.  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"generate-endpoint-dsl"
argument_list|,
name|threadSafe
operator|=
literal|true
argument_list|,
name|requiresDependencyResolution
operator|=
name|ResolutionScope
operator|.
name|COMPILE_PLUS_RUNTIME
argument_list|,
name|defaultPhase
operator|=
name|LifecyclePhase
operator|.
name|PROCESS_CLASSES
argument_list|)
DECL|class|EndpointDslMojo
specifier|public
class|class
name|EndpointDslMojo
extends|extends
name|AbstractMojo
block|{
DECL|field|PRIMITIVEMAP
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|PRIMITIVEMAP
decl_stmt|;
static|static
block|{
name|PRIMITIVEMAP
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"boolean"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"char"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Character
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"long"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"integer"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"byte"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"short"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Short
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"double"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**      * The maven project.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"project"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|readonly
operator|=
literal|true
argument_list|)
DECL|field|project
specifier|protected
name|MavenProject
name|project
decl_stmt|;
comment|/**      * The project build directory      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}"
argument_list|)
DECL|field|buildDir
specifier|protected
name|File
name|buildDir
decl_stmt|;
comment|/**      * The base directory      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${basedir}"
argument_list|)
DECL|field|baseDir
specifier|protected
name|File
name|baseDir
decl_stmt|;
annotation|@
name|Parameter
DECL|field|outputDir
specifier|protected
name|File
name|outputDir
decl_stmt|;
annotation|@
name|Parameter
DECL|field|packageName
specifier|protected
name|String
name|packageName
init|=
literal|"org.apache.camel.builder.endpoint.dsl"
decl_stmt|;
DECL|field|projectClassLoader
name|DynamicClassLoader
name|projectClassLoader
decl_stmt|;
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
try|try
block|{
name|projectClassLoader
operator|=
name|DynamicClassLoader
operator|.
name|createDynamicClassLoader
argument_list|(
name|project
operator|.
name|getTestClasspathElements
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|DependencyResolutionRequiredException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|outputDir
operator|==
literal|null
condition|)
block|{
name|outputDir
operator|=
name|findCamelDirectory
argument_list|(
name|baseDir
argument_list|,
literal|"core/camel-endpointdsl/src/main/java"
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|File
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|files
init|=
name|PackageHelper
operator|.
name|findJsonFiles
argument_list|(
name|buildDir
argument_list|,
name|p
lambda|->
name|p
operator|.
name|isDirectory
argument_list|()
operator|||
name|p
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".json"
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|s
lambda|->
name|cache
argument_list|(
parameter_list|()
lambda|->
name|loadJson
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|executeComponent
argument_list|(
name|files
argument_list|)
expr_stmt|;
block|}
DECL|method|loadJson (File file)
specifier|private
specifier|static
name|String
name|loadJson
parameter_list|(
name|File
name|file
parameter_list|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
return|return
name|loadText
argument_list|(
name|is
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|cache (Supplier<T> supplier)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Supplier
argument_list|<
name|T
argument_list|>
name|cache
parameter_list|(
name|Supplier
argument_list|<
name|T
argument_list|>
name|supplier
parameter_list|)
block|{
return|return
operator|new
name|Supplier
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
name|T
name|value
decl_stmt|;
annotation|@
name|Override
specifier|public
name|T
name|get
parameter_list|()
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|supplier
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
block|}
return|;
block|}
DECL|method|executeComponent (Map<File, Supplier<String>> jsonFiles)
specifier|private
name|void
name|executeComponent
parameter_list|(
name|Map
argument_list|<
name|File
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|jsonFiles
parameter_list|)
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
comment|// find the component names
name|Set
argument_list|<
name|String
argument_list|>
name|componentNames
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|findComponentNames
argument_list|(
name|buildDir
argument_list|,
name|componentNames
argument_list|)
expr_stmt|;
comment|// create auto configuration for the components
if|if
condition|(
operator|!
name|componentNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|componentNames
operator|.
name|size
argument_list|()
operator|+
literal|" components"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ComponentModel
argument_list|>
name|allModels
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|componentName
range|:
name|componentNames
control|)
block|{
name|String
name|json
init|=
name|loadComponentJson
argument_list|(
name|jsonFiles
argument_list|,
name|componentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|ComponentModel
name|model
init|=
name|generateComponentModel
argument_list|(
name|componentName
argument_list|,
name|json
argument_list|)
decl_stmt|;
name|allModels
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Group the models by implementing classes
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ComponentModel
argument_list|>
argument_list|>
name|grModels
init|=
name|allModels
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|ComponentModel
operator|::
name|getJavaType
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|componentClass
range|:
name|grModels
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ComponentModel
argument_list|>
name|compModels
init|=
name|grModels
operator|.
name|get
argument_list|(
name|componentClass
argument_list|)
decl_stmt|;
name|ComponentModel
name|model
init|=
name|compModels
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// They should be
comment|// equivalent
name|List
argument_list|<
name|String
argument_list|>
name|aliases
init|=
name|compModels
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ComponentModel
operator|::
name|getScheme
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|overrideComponentName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|aliases
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// determine component name when there are multiple ones
name|overrideComponentName
operator|=
name|model
operator|.
name|getArtifactId
argument_list|()
operator|.
name|replace
argument_list|(
literal|"camel-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|createEndpointDsl
argument_list|(
name|packageName
argument_list|,
name|model
argument_list|,
name|overrideComponentName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createEndpointDsl (String packageName, ComponentModel model, String overrideComponentName)
specifier|private
name|void
name|createEndpointDsl
parameter_list|(
name|String
name|packageName
parameter_list|,
name|ComponentModel
name|model
parameter_list|,
name|String
name|overrideComponentName
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|String
name|componentClassName
init|=
name|model
operator|.
name|getJavaType
argument_list|()
decl_stmt|;
name|String
name|builderName
init|=
name|getEndpointName
argument_list|(
name|componentClassName
argument_list|)
decl_stmt|;
name|String
name|methodName
init|=
name|getMethodName
argument_list|(
name|componentClassName
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|realComponentClass
init|=
name|loadClass
argument_list|(
name|componentClassName
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|realEndpointClass
init|=
name|loadClass
argument_list|(
name|findEndpointClassName
argument_list|(
name|componentClassName
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|JavaClass
name|javaClass
init|=
operator|new
name|JavaClass
argument_list|(
name|getProjectClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|javaClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|setName
argument_list|(
name|builderName
operator|+
literal|"Factory"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|setClass
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.builder.EndpointConsumerBuilder"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.builder.EndpointProducerBuilder"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.builder.endpoint.AbstractEndpointBuilder"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|JavaClass
argument_list|>
name|enumClasses
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|advanced
init|=
literal|false
decl_stmt|;
for|for
control|(
name|EndpointOptionModel
name|option
range|:
name|model
operator|.
name|getEndpointOptions
argument_list|()
control|)
block|{
if|if
condition|(
name|option
operator|.
name|getLabel
argument_list|()
operator|.
name|contains
argument_list|(
literal|"advanced"
argument_list|)
condition|)
block|{
name|advanced
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|JavaClass
name|consumerClass
init|=
literal|null
decl_stmt|;
name|JavaClass
name|advancedConsumerClass
init|=
literal|null
decl_stmt|;
name|JavaClass
name|producerClass
init|=
literal|null
decl_stmt|;
name|JavaClass
name|advancedProducerClass
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|realEndpointClass
operator|.
name|getAnnotation
argument_list|(
name|UriEndpoint
operator|.
name|class
argument_list|)
operator|.
name|producerOnly
argument_list|()
operator|&&
operator|!
name|realEndpointClass
operator|.
name|getAnnotation
argument_list|(
name|UriEndpoint
operator|.
name|class
argument_list|)
operator|.
name|consumerOnly
argument_list|()
condition|)
block|{
name|String
name|consumerName
init|=
name|builderName
operator|.
name|replace
argument_list|(
literal|"Endpoint"
argument_list|,
literal|"EndpointConsumer"
argument_list|)
decl_stmt|;
name|consumerClass
operator|=
name|javaClass
operator|.
name|addNestedType
argument_list|()
operator|.
name|setPublic
argument_list|()
operator|.
name|setClass
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|consumerClass
operator|.
name|setName
argument_list|(
name|consumerName
argument_list|)
expr_stmt|;
name|consumerClass
operator|.
name|implementInterface
argument_list|(
literal|"EndpointConsumerBuilder"
argument_list|)
expr_stmt|;
name|generateDummyClass
argument_list|(
name|consumerClass
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|consumerClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setText
argument_list|(
literal|"Builder for endpoint consumers for the "
operator|+
name|model
operator|.
name|getTitle
argument_list|()
operator|+
literal|" component."
argument_list|)
expr_stmt|;
if|if
condition|(
name|advanced
condition|)
block|{
name|advancedConsumerClass
operator|=
name|javaClass
operator|.
name|addNestedType
argument_list|()
operator|.
name|setPublic
argument_list|()
operator|.
name|setClass
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|advancedConsumerClass
operator|.
name|setName
argument_list|(
literal|"Advanced"
operator|+
name|consumerName
argument_list|)
expr_stmt|;
name|advancedConsumerClass
operator|.
name|implementInterface
argument_list|(
literal|"EndpointConsumerBuilder"
argument_list|)
expr_stmt|;
name|generateDummyClass
argument_list|(
name|advancedConsumerClass
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|advancedConsumerClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setText
argument_list|(
literal|"Advanced builder for endpoint consumers for the "
operator|+
name|model
operator|.
name|getTitle
argument_list|()
operator|+
literal|" component."
argument_list|)
expr_stmt|;
name|consumerClass
operator|.
name|addMethod
argument_list|()
operator|.
name|setName
argument_list|(
literal|"advanced"
argument_list|)
operator|.
name|setReturnType
argument_list|(
name|loadClass
argument_list|(
name|advancedConsumerClass
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setDefault
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"return (Advanced"
operator|+
name|consumerName
operator|+
literal|") this;"
argument_list|)
expr_stmt|;
name|advancedConsumerClass
operator|.
name|addMethod
argument_list|()
operator|.
name|setName
argument_list|(
literal|"basic"
argument_list|)
operator|.
name|setReturnType
argument_list|(
name|loadClass
argument_list|(
name|consumerClass
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setDefault
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"return ("
operator|+
name|consumerName
operator|+
literal|") this;"
argument_list|)
expr_stmt|;
block|}
name|String
name|producerName
init|=
name|builderName
operator|.
name|replace
argument_list|(
literal|"Endpoint"
argument_list|,
literal|"EndpointProducer"
argument_list|)
decl_stmt|;
name|producerClass
operator|=
name|javaClass
operator|.
name|addNestedType
argument_list|()
operator|.
name|setPublic
argument_list|()
operator|.
name|setClass
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|producerClass
operator|.
name|setName
argument_list|(
name|producerName
argument_list|)
expr_stmt|;
name|producerClass
operator|.
name|implementInterface
argument_list|(
literal|"EndpointProducerBuilder"
argument_list|)
expr_stmt|;
name|generateDummyClass
argument_list|(
name|producerClass
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|producerClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setText
argument_list|(
literal|"Builder for endpoint producers for the "
operator|+
name|model
operator|.
name|getTitle
argument_list|()
operator|+
literal|" component."
argument_list|)
expr_stmt|;
if|if
condition|(
name|advanced
condition|)
block|{
name|advancedProducerClass
operator|=
name|javaClass
operator|.
name|addNestedType
argument_list|()
operator|.
name|setPublic
argument_list|()
operator|.
name|setClass
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|advancedProducerClass
operator|.
name|setName
argument_list|(
literal|"Advanced"
operator|+
name|producerName
argument_list|)
expr_stmt|;
name|advancedProducerClass
operator|.
name|implementInterface
argument_list|(
literal|"EndpointProducerBuilder"
argument_list|)
expr_stmt|;
name|generateDummyClass
argument_list|(
name|advancedProducerClass
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|advancedProducerClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setText
argument_list|(
literal|"Advanced builder for endpoint producers for the "
operator|+
name|model
operator|.
name|getTitle
argument_list|()
operator|+
literal|" component."
argument_list|)
expr_stmt|;
name|producerClass
operator|.
name|addMethod
argument_list|()
operator|.
name|setName
argument_list|(
literal|"advanced"
argument_list|)
operator|.
name|setReturnType
argument_list|(
name|loadClass
argument_list|(
name|advancedProducerClass
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setDefault
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"return (Advanced"
operator|+
name|producerName
operator|+
literal|") this;"
argument_list|)
expr_stmt|;
name|advancedProducerClass
operator|.
name|addMethod
argument_list|()
operator|.
name|setName
argument_list|(
literal|"basic"
argument_list|)
operator|.
name|setReturnType
argument_list|(
name|loadClass
argument_list|(
name|producerClass
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setDefault
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"return ("
operator|+
name|producerName
operator|+
literal|") this;"
argument_list|)
expr_stmt|;
block|}
block|}
name|JavaClass
name|builderClass
decl_stmt|;
name|JavaClass
name|advancedBuilderClass
init|=
literal|null
decl_stmt|;
name|builderClass
operator|=
name|javaClass
operator|.
name|addNestedType
argument_list|()
operator|.
name|setPublic
argument_list|()
operator|.
name|setClass
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|builderClass
operator|.
name|setName
argument_list|(
name|builderName
argument_list|)
expr_stmt|;
if|if
condition|(
name|realEndpointClass
operator|.
name|getAnnotation
argument_list|(
name|UriEndpoint
operator|.
name|class
argument_list|)
operator|.
name|producerOnly
argument_list|()
condition|)
block|{
name|builderClass
operator|.
name|implementInterface
argument_list|(
literal|"EndpointProducerBuilder"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|realEndpointClass
operator|.
name|getAnnotation
argument_list|(
name|UriEndpoint
operator|.
name|class
argument_list|)
operator|.
name|consumerOnly
argument_list|()
condition|)
block|{
name|builderClass
operator|.
name|implementInterface
argument_list|(
literal|"EndpointConsumerBuilder"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builderClass
operator|.
name|implementInterface
argument_list|(
name|consumerClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builderClass
operator|.
name|implementInterface
argument_list|(
name|producerClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|generateDummyClass
argument_list|(
name|builderClass
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|builderClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setText
argument_list|(
literal|"Builder for endpoint for the "
operator|+
name|model
operator|.
name|getTitle
argument_list|()
operator|+
literal|" component."
argument_list|)
expr_stmt|;
if|if
condition|(
name|advanced
condition|)
block|{
name|advancedBuilderClass
operator|=
name|javaClass
operator|.
name|addNestedType
argument_list|()
operator|.
name|setPublic
argument_list|()
operator|.
name|setClass
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|advancedBuilderClass
operator|.
name|setName
argument_list|(
literal|"Advanced"
operator|+
name|builderName
argument_list|)
expr_stmt|;
if|if
condition|(
name|realEndpointClass
operator|.
name|getAnnotation
argument_list|(
name|UriEndpoint
operator|.
name|class
argument_list|)
operator|.
name|producerOnly
argument_list|()
condition|)
block|{
name|advancedBuilderClass
operator|.
name|implementInterface
argument_list|(
literal|"EndpointProducerBuilder"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|realEndpointClass
operator|.
name|getAnnotation
argument_list|(
name|UriEndpoint
operator|.
name|class
argument_list|)
operator|.
name|consumerOnly
argument_list|()
condition|)
block|{
name|advancedBuilderClass
operator|.
name|implementInterface
argument_list|(
literal|"EndpointConsumerBuilder"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|advancedBuilderClass
operator|.
name|implementInterface
argument_list|(
name|advancedConsumerClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|advancedBuilderClass
operator|.
name|implementInterface
argument_list|(
name|advancedProducerClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|generateDummyClass
argument_list|(
name|advancedBuilderClass
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|advancedBuilderClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setText
argument_list|(
literal|"Advanced builder for endpoint for the "
operator|+
name|model
operator|.
name|getTitle
argument_list|()
operator|+
literal|" component."
argument_list|)
expr_stmt|;
name|builderClass
operator|.
name|addMethod
argument_list|()
operator|.
name|setName
argument_list|(
literal|"advanced"
argument_list|)
operator|.
name|setReturnType
argument_list|(
name|loadClass
argument_list|(
name|advancedBuilderClass
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setDefault
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"return (Advanced"
operator|+
name|builderName
operator|+
literal|") this;"
argument_list|)
expr_stmt|;
name|advancedBuilderClass
operator|.
name|addMethod
argument_list|()
operator|.
name|setName
argument_list|(
literal|"basic"
argument_list|)
operator|.
name|setReturnType
argument_list|(
name|loadClass
argument_list|(
name|builderClass
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setDefault
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"return ("
operator|+
name|builderName
operator|+
literal|") this;"
argument_list|)
expr_stmt|;
block|}
name|generateDummyClass
argument_list|(
name|packageName
operator|+
literal|".T"
argument_list|)
expr_stmt|;
name|String
name|doc
init|=
literal|"Generated by camel-package-maven-plugin - do not edit this file!"
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|model
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|doc
operator|=
name|model
operator|.
name|getDescription
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|doc
expr_stmt|;
block|}
name|javaClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setText
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Generated
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"value"
argument_list|,
name|EndpointDslMojo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|EndpointOptionModel
name|option
range|:
name|model
operator|.
name|getEndpointOptions
argument_list|()
control|)
block|{
name|List
argument_list|<
name|JavaClass
argument_list|>
name|targets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|option
operator|.
name|getLabel
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|option
operator|.
name|getLabel
argument_list|()
operator|.
name|contains
argument_list|(
literal|"producer"
argument_list|)
condition|)
block|{
if|if
condition|(
name|option
operator|.
name|getLabel
argument_list|()
operator|.
name|contains
argument_list|(
literal|"advanced"
argument_list|)
condition|)
block|{
name|targets
operator|.
name|add
argument_list|(
name|advancedProducerClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|targets
operator|.
name|add
argument_list|(
name|producerClass
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|option
operator|.
name|getLabel
argument_list|()
operator|.
name|contains
argument_list|(
literal|"consumer"
argument_list|)
condition|)
block|{
if|if
condition|(
name|option
operator|.
name|getLabel
argument_list|()
operator|.
name|contains
argument_list|(
literal|"advanced"
argument_list|)
condition|)
block|{
name|targets
operator|.
name|add
argument_list|(
name|advancedConsumerClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|targets
operator|.
name|add
argument_list|(
name|consumerClass
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|option
operator|.
name|getLabel
argument_list|()
operator|.
name|contains
argument_list|(
literal|"advanced"
argument_list|)
condition|)
block|{
name|targets
operator|.
name|add
argument_list|(
name|advancedConsumerClass
argument_list|)
expr_stmt|;
name|targets
operator|.
name|add
argument_list|(
name|advancedProducerClass
argument_list|)
expr_stmt|;
name|targets
operator|.
name|add
argument_list|(
name|advancedBuilderClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|targets
operator|.
name|add
argument_list|(
name|consumerClass
argument_list|)
expr_stmt|;
name|targets
operator|.
name|add
argument_list|(
name|producerClass
argument_list|)
expr_stmt|;
name|targets
operator|.
name|add
argument_list|(
name|builderClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|GenericType
name|ogtype
decl_stmt|;
name|GenericType
name|gtype
decl_stmt|;
try|try
block|{
name|Field
name|field
init|=
name|findField
argument_list|(
name|realComponentClass
argument_list|,
name|realEndpointClass
argument_list|,
name|option
argument_list|)
decl_stmt|;
name|ogtype
operator|=
operator|new
name|GenericType
argument_list|(
name|GenericsUtil
operator|.
name|resolveType
argument_list|(
name|realEndpointClass
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|gtype
operator|=
name|getType
argument_list|(
name|javaClass
argument_list|,
name|enumClasses
argument_list|,
name|option
operator|.
name|getEnums
argument_list|()
argument_list|,
name|ogtype
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|JavaClass
name|target
range|:
name|targets
control|)
block|{
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Method
name|fluent
init|=
name|target
operator|.
name|addMethod
argument_list|()
operator|.
name|setDefault
argument_list|()
operator|.
name|setName
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setReturnType
argument_list|(
operator|new
name|GenericType
argument_list|(
name|loadClass
argument_list|(
name|target
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addParameter
argument_list|(
name|isPrimitive
argument_list|(
name|ogtype
operator|.
name|toString
argument_list|()
argument_list|)
condition|?
name|ogtype
else|:
name|gtype
argument_list|,
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setBody
argument_list|(
literal|"setProperty(\""
operator|+
name|option
operator|.
name|getName
argument_list|()
operator|+
literal|"\", "
operator|+
name|option
operator|.
name|getName
argument_list|()
operator|+
literal|");\n"
operator|+
literal|"return this;\n"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getDeprecated
argument_list|()
argument_list|)
condition|)
block|{
name|fluent
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|desc
init|=
name|option
operator|.
name|getDescription
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|desc
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|desc
operator|+=
literal|"."
expr_stmt|;
block|}
name|desc
operator|+=
literal|"\nThe option is a<code>"
operator|+
name|ogtype
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"<"
argument_list|,
literal|"&lt;"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|">"
argument_list|,
literal|"&gt;"
argument_list|)
operator|+
literal|"</code> type."
expr_stmt|;
name|desc
operator|+=
literal|"\n@group "
operator|+
name|option
operator|.
name|getGroup
argument_list|()
expr_stmt|;
name|fluent
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ogtype
operator|.
name|getRawClass
argument_list|()
operator|!=
name|String
operator|.
name|class
condition|)
block|{
name|fluent
operator|=
name|target
operator|.
name|addMethod
argument_list|()
operator|.
name|setDefault
argument_list|()
operator|.
name|setName
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setReturnType
argument_list|(
operator|new
name|GenericType
argument_list|(
name|loadClass
argument_list|(
name|target
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addParameter
argument_list|(
operator|new
name|GenericType
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setBody
argument_list|(
literal|"setProperty(\""
operator|+
name|option
operator|.
name|getName
argument_list|()
operator|+
literal|"\", "
operator|+
name|option
operator|.
name|getName
argument_list|()
operator|+
literal|");\n"
operator|+
literal|"return this;\n"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getDeprecated
argument_list|()
argument_list|)
condition|)
block|{
name|fluent
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|desc
init|=
name|option
operator|.
name|getDescription
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|desc
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|desc
operator|+=
literal|"."
expr_stmt|;
block|}
name|desc
operator|+=
literal|"\nThe option will be converted to a<code>"
operator|+
name|ogtype
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"<"
argument_list|,
literal|"&lt;"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|">"
argument_list|,
literal|"&gt;"
argument_list|)
operator|+
literal|"</code> type."
expr_stmt|;
name|desc
operator|+=
literal|"\n@group "
operator|+
name|option
operator|.
name|getGroup
argument_list|()
expr_stmt|;
name|fluent
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|javaClass
operator|.
name|removeImport
argument_list|(
literal|"T"
argument_list|)
expr_stmt|;
name|Method
name|method
init|=
name|javaClass
operator|.
name|addMethod
argument_list|()
operator|.
name|setDefault
argument_list|()
operator|.
name|setName
argument_list|(
name|methodName
argument_list|)
operator|.
name|addParameter
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"path"
argument_list|)
operator|.
name|setReturnType
argument_list|(
operator|new
name|GenericType
argument_list|(
name|loadClass
argument_list|(
name|builderClass
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setBody
argument_list|(
literal|"class "
operator|+
name|builderName
operator|+
literal|"Impl extends AbstractEndpointBuilder implements "
operator|+
name|builderName
operator|+
literal|", Advanced"
operator|+
name|builderName
operator|+
literal|" {\n"
operator|+
literal|"    public "
operator|+
name|builderName
operator|+
literal|"Impl(String path) {\n"
operator|+
literal|"        super(\""
operator|+
name|model
operator|.
name|getScheme
argument_list|()
operator|+
literal|"\", path);\n"
operator|+
literal|"    }\n"
operator|+
literal|"}\n"
operator|+
literal|"return new "
operator|+
name|builderName
operator|+
literal|"Impl(path);\n"
argument_list|)
decl_stmt|;
name|method
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setText
argument_list|(
operator|(
name|StringHelper
operator|.
name|isEmpty
argument_list|(
name|model
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|?
literal|""
else|:
name|model
operator|.
name|getDescription
argument_list|()
operator|+
literal|" "
operator|)
operator|+
literal|"\nMaven coordinates: "
operator|+
name|project
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|builderName
operator|+
literal|"Factory.java"
decl_stmt|;
name|writeSourceIfChanged
argument_list|(
name|javaClass
argument_list|,
name|fileName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|getMethodName (String type)
specifier|private
name|String
name|getMethodName
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|String
name|builderName
init|=
name|getEndpointName
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|String
name|methodName
init|=
name|builderName
operator|.
name|replace
argument_list|(
literal|"EndpointBuilder"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|methodName
operator|=
name|methodName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|methodName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|"org.apache.camel.component.rest.RestComponent"
case|:
return|return
literal|"restEndpoint"
return|;
case|case
literal|"org.apache.camel.component.beanclass.ClassComponent"
case|:
return|return
literal|"classEndpoint"
return|;
default|default:
return|return
name|methodName
return|;
block|}
block|}
DECL|method|getEndpointName (String type)
specifier|private
name|String
name|getEndpointName
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|int
name|pos
init|=
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|type
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Component"
argument_list|,
literal|"EndpointBuilder"
argument_list|)
decl_stmt|;
comment|//
comment|// HACKS
comment|//
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|"org.apache.camel.component.atmosphere.websocket.WebsocketComponent"
case|:
return|return
literal|"AtmosphereWebsocketEndpointBuilder"
return|;
case|case
literal|"org.apache.camel.component.zookeepermaster.MasterComponent"
case|:
return|return
literal|"ZooKeeperMasterEndpointBuilder"
return|;
default|default:
return|return
name|name
return|;
block|}
block|}
DECL|method|findEndpointClassName (String type)
specifier|private
name|String
name|findEndpointClassName
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|String
name|endpointName
init|=
name|type
operator|.
name|replaceFirst
argument_list|(
literal|"Component"
argument_list|,
literal|"Endpoint"
argument_list|)
decl_stmt|;
comment|//
comment|// HACKS
comment|//
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|"org.apache.camel.component.disruptor.vm.DisruptorVmComponent"
case|:
return|return
literal|"org.apache.camel.component.disruptor.DisruptorEndpoint"
return|;
case|case
literal|"org.apache.camel.component.etcd.EtcdComponent"
case|:
return|return
literal|"org.apache.camel.component.etcd.AbstractEtcdPollingEndpoint"
return|;
case|case
literal|"org.apache.camel.websocket.jsr356.JSR356WebSocketComponent"
case|:
return|return
literal|"org.apache.camel.websocket.jsr356.JSR356Endpoint"
return|;
default|default:
return|return
name|endpointName
return|;
block|}
block|}
DECL|method|findField (Class<?> realComponentClass, Class<?> realEndpointClass, EndpointOptionModel option)
specifier|private
name|Field
name|findField
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|realComponentClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|realEndpointClass
parameter_list|,
name|EndpointOptionModel
name|option
parameter_list|)
throws|throws
name|NoSuchFieldException
block|{
name|Field
name|field
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|realComponentClass
argument_list|)
expr_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|realEndpointClass
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Class
name|cl
init|=
name|classes
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|cl
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|String
name|n
init|=
name|f
operator|.
name|getName
argument_list|()
decl_stmt|;
name|UriPath
name|path
init|=
name|f
operator|.
name|getAnnotation
argument_list|(
name|UriPath
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|path
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|n
operator|=
name|path
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
name|UriParam
name|param
init|=
name|f
operator|.
name|getAnnotation
argument_list|(
name|UriParam
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|param
operator|!=
literal|null
operator|&&
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|param
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|n
operator|=
name|param
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|field
operator|=
name|f
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|f
operator|.
name|getType
argument_list|()
operator|.
name|isAnnotationPresent
argument_list|(
name|UriParams
operator|.
name|class
argument_list|)
condition|)
block|{
name|classes
operator|.
name|add
argument_list|(
name|f
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
name|cl
operator|=
name|cl
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
if|if
condition|(
name|cl
operator|!=
literal|null
condition|)
block|{
name|classes
operator|.
name|add
argument_list|(
name|cl
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchFieldException
argument_list|(
literal|"Could not find field for option "
operator|+
name|option
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|field
return|;
block|}
DECL|method|isPrimitive (String type)
specifier|static
name|boolean
name|isPrimitive
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|PRIMITIVEMAP
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|loadClass (String loadClassName)
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|loadClassName
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|optionClass
decl_stmt|;
name|String
name|org
init|=
name|loadClassName
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|optionClass
operator|=
name|getProjectClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|loadClassName
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|int
name|dotIndex
init|=
name|loadClassName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotIndex
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|org
argument_list|)
throw|;
block|}
else|else
block|{
name|loadClassName
operator|=
name|loadClassName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotIndex
argument_list|)
operator|+
literal|"$"
operator|+
name|loadClassName
operator|.
name|substring
argument_list|(
name|dotIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|optionClass
return|;
block|}
DECL|method|getType (JavaClass javaClass, Map<String, JavaClass> enumClasses, String enums, String type)
specifier|private
name|GenericType
name|getType
parameter_list|(
name|JavaClass
name|javaClass
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|JavaClass
argument_list|>
name|enumClasses
parameter_list|,
name|String
name|enums
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|type
operator|=
name|type
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// Check if this is an array
if|if
condition|(
name|type
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|)
block|{
name|GenericType
name|t
init|=
name|getType
argument_list|(
name|javaClass
argument_list|,
name|enumClasses
argument_list|,
name|enums
argument_list|,
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|type
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|GenericType
argument_list|(
name|Array
operator|.
name|newInstance
argument_list|(
name|t
operator|.
name|getRawClass
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|,
name|t
argument_list|)
return|;
block|}
comment|// Check if this is a generic
name|int
name|genericIndex
init|=
name|type
operator|.
name|indexOf
argument_list|(
literal|'<'
argument_list|)
decl_stmt|;
if|if
condition|(
name|genericIndex
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|endsWith
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can not load type: "
operator|+
name|type
argument_list|)
throw|;
block|}
name|GenericType
name|base
init|=
name|getType
argument_list|(
name|javaClass
argument_list|,
name|enumClasses
argument_list|,
name|enums
argument_list|,
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|genericIndex
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|.
name|getRawClass
argument_list|()
operator|==
name|Object
operator|.
name|class
condition|)
block|{
return|return
name|base
return|;
block|}
name|String
index|[]
name|params
init|=
name|splitParams
argument_list|(
name|type
operator|.
name|substring
argument_list|(
name|genericIndex
operator|+
literal|1
argument_list|,
name|type
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|GenericType
index|[]
name|types
init|=
operator|new
name|GenericType
index|[
name|params
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
name|getType
argument_list|(
name|javaClass
argument_list|,
name|enumClasses
argument_list|,
name|enums
argument_list|,
name|params
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|GenericType
argument_list|(
name|base
operator|.
name|getRawClass
argument_list|()
argument_list|,
name|types
argument_list|)
return|;
block|}
comment|// Primitive
if|if
condition|(
name|isPrimitive
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
operator|new
name|GenericType
argument_list|(
name|PRIMITIVEMAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
comment|// Extends
if|if
condition|(
name|type
operator|.
name|startsWith
argument_list|(
literal|"? extends "
argument_list|)
condition|)
block|{
name|String
name|raw
init|=
name|type
operator|.
name|substring
argument_list|(
literal|"? extends "
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|GenericType
argument_list|(
name|loadClass
argument_list|(
name|raw
argument_list|)
argument_list|,
name|BoundType
operator|.
name|Extends
argument_list|)
return|;
block|}
comment|// Super
if|if
condition|(
name|type
operator|.
name|startsWith
argument_list|(
literal|"? super "
argument_list|)
condition|)
block|{
name|String
name|raw
init|=
name|type
operator|.
name|substring
argument_list|(
literal|"? extends "
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|GenericType
argument_list|(
name|loadClass
argument_list|(
name|raw
argument_list|)
argument_list|,
name|BoundType
operator|.
name|Super
argument_list|)
return|;
block|}
comment|// Wildcard
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
return|return
operator|new
name|GenericType
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|BoundType
operator|.
name|Extends
argument_list|)
return|;
block|}
if|if
condition|(
name|loadClass
argument_list|(
name|type
argument_list|)
operator|.
name|isEnum
argument_list|()
operator|&&
operator|!
name|isCamelCoreType
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|String
name|enumClassName
init|=
name|type
operator|.
name|substring
argument_list|(
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|enumClassName
operator|.
name|contains
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
name|enumClassName
operator|=
name|enumClassName
operator|.
name|substring
argument_list|(
name|enumClassName
operator|.
name|indexOf
argument_list|(
literal|'$'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|JavaClass
name|enumClass
init|=
name|enumClasses
operator|.
name|get
argument_list|(
name|enumClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|enumClass
operator|==
literal|null
condition|)
block|{
name|enumClass
operator|=
name|javaClass
operator|.
name|addNestedType
argument_list|()
operator|.
name|setPackagePrivate
argument_list|()
operator|.
name|setName
argument_list|(
name|enumClassName
argument_list|)
operator|.
name|setEnum
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|enumClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setText
argument_list|(
literal|"Proxy enum for<code>"
operator|+
name|type
operator|+
literal|"</code> enum."
argument_list|)
expr_stmt|;
name|enumClasses
operator|.
name|put
argument_list|(
name|enumClassName
argument_list|,
name|enumClass
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|loadClass
argument_list|(
name|type
argument_list|)
operator|.
name|getEnumConstants
argument_list|()
control|)
block|{
name|enumClass
operator|.
name|addValue
argument_list|(
name|value
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'_'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|type
operator|=
name|javaClass
operator|.
name|getPackage
argument_list|()
operator|+
literal|"."
operator|+
name|javaClass
operator|.
name|getName
argument_list|()
operator|+
literal|"$"
operator|+
name|enumClassName
expr_stmt|;
return|return
operator|new
name|GenericType
argument_list|(
name|generateDummyClass
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|isCamelCoreType
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Substituting java.lang.Object to "
operator|+
name|type
argument_list|)
expr_stmt|;
return|return
operator|new
name|GenericType
argument_list|(
name|Object
operator|.
name|class
argument_list|)
return|;
block|}
return|return
operator|new
name|GenericType
argument_list|(
name|loadClass
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
DECL|method|splitParams (String string)
specifier|private
name|String
index|[]
name|splitParams
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|cur
init|=
literal|0
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|opened
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|nextComma
init|=
name|string
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|,
name|cur
argument_list|)
decl_stmt|;
name|int
name|nextOpen
init|=
name|string
operator|.
name|indexOf
argument_list|(
literal|'<'
argument_list|,
name|cur
argument_list|)
decl_stmt|;
name|int
name|nextClose
init|=
name|string
operator|.
name|indexOf
argument_list|(
literal|'>'
argument_list|,
name|cur
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextComma
operator|<
literal|0
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|string
operator|.
name|substring
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|params
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|nextOpen
operator|<
literal|0
operator|||
name|nextComma
operator|<
name|nextOpen
operator|)
operator|&&
operator|(
name|nextClose
operator|<
literal|0
operator|||
name|nextComma
operator|<
name|nextClose
operator|)
operator|&&
name|opened
operator|==
literal|0
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|string
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|nextComma
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
name|cur
operator|=
name|nextComma
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nextOpen
operator|<
literal|0
condition|)
block|{
if|if
condition|(
operator|--
name|opened
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
name|cur
operator|=
name|nextClose
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nextClose
operator|<
literal|0
operator|||
name|nextOpen
operator|<
name|nextClose
condition|)
block|{
operator|++
name|opened
expr_stmt|;
name|cur
operator|=
name|nextOpen
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|--
name|opened
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
name|cur
operator|=
name|nextClose
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
DECL|method|isCamelCoreType (String type)
specifier|private
name|boolean
name|isCamelCoreType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|startsWith
argument_list|(
literal|"java."
argument_list|)
operator|||
name|type
operator|.
name|matches
argument_list|(
literal|"org\\.apache\\.camel\\.(spi\\.)?([A-Za-z]+)"
argument_list|)
return|;
block|}
DECL|method|generateDummyClass (String clazzName)
specifier|private
name|Class
name|generateDummyClass
parameter_list|(
name|String
name|clazzName
parameter_list|)
block|{
return|return
name|getProjectClassLoader
argument_list|()
operator|.
name|generateDummyClass
argument_list|(
name|clazzName
argument_list|)
return|;
block|}
DECL|method|getProjectClassLoader ()
specifier|private
name|DynamicClassLoader
name|getProjectClassLoader
parameter_list|()
block|{
return|return
name|projectClassLoader
return|;
block|}
DECL|method|loadComponentJson (Map<File, Supplier<String>> jsonFiles, String componentName)
specifier|private
specifier|static
name|String
name|loadComponentJson
parameter_list|(
name|Map
argument_list|<
name|File
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|jsonFiles
parameter_list|,
name|String
name|componentName
parameter_list|)
block|{
return|return
name|loadJsonOfType
argument_list|(
name|jsonFiles
argument_list|,
name|componentName
argument_list|,
literal|"component"
argument_list|)
return|;
block|}
DECL|method|loadJsonOfType (Map<File, Supplier<String>> jsonFiles, String modelName, String type)
specifier|private
specifier|static
name|String
name|loadJsonOfType
parameter_list|(
name|Map
argument_list|<
name|File
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|jsonFiles
parameter_list|,
name|String
name|modelName
parameter_list|,
name|String
name|type
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|File
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|jsonFiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|modelName
operator|+
literal|".json"
argument_list|)
condition|)
block|{
name|String
name|json
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|json
operator|.
name|contains
argument_list|(
literal|"\"kind\": \""
operator|+
name|type
operator|+
literal|"\""
argument_list|)
condition|)
block|{
return|return
name|json
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|generateComponentModel (String componentName, String json)
specifier|private
specifier|static
name|ComponentModel
name|generateComponentModel
parameter_list|(
name|String
name|componentName
parameter_list|,
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"component"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ComponentModel
name|component
init|=
operator|new
name|ComponentModel
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|component
operator|.
name|setScheme
argument_list|(
name|getSafeValue
argument_list|(
literal|"scheme"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setSyntax
argument_list|(
name|getSafeValue
argument_list|(
literal|"syntax"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setAlternativeSyntax
argument_list|(
name|getSafeValue
argument_list|(
literal|"alternativeSyntax"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setTitle
argument_list|(
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setFirstVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"firstVersion"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setLabel
argument_list|(
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setConsumerOnly
argument_list|(
name|getSafeValue
argument_list|(
literal|"consumerOnly"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setProducerOnly
argument_list|(
name|getSafeValue
argument_list|(
literal|"producerOnly"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setGroupId
argument_list|(
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setArtifactId
argument_list|(
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setVersion
argument_list|(
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"componentProperties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|ComponentOptionModel
name|option
init|=
operator|new
name|ComponentOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDisplayName
argument_list|(
name|getSafeValue
argument_list|(
literal|"displayName"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnums
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|addComponentOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|EndpointOptionModel
name|option
init|=
operator|new
name|EndpointOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDisplayName
argument_list|(
name|getSafeValue
argument_list|(
literal|"displayName"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setGroup
argument_list|(
name|getSafeValue
argument_list|(
literal|"group"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setLabel
argument_list|(
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setRequired
argument_list|(
name|getSafeValue
argument_list|(
literal|"required"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnums
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setPrefix
argument_list|(
name|getSafeValue
argument_list|(
literal|"prefix"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setMultiValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"multiValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnumValues
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|addEndpointOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
return|return
name|component
return|;
block|}
DECL|method|findComponentNames (File dir, Set<String> componentNames)
specifier|private
name|void
name|findComponentNames
parameter_list|(
name|File
name|dir
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|componentNames
parameter_list|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"classes/META-INF/services/org/apache/camel/component"
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
comment|// skip directories as there may be a sub .resolver
comment|// directory
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'.'
condition|)
block|{
name|componentNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|writeSourceIfChanged (JavaClass source, String fileName, boolean innerClassesLast)
specifier|private
name|void
name|writeSourceIfChanged
parameter_list|(
name|JavaClass
name|source
parameter_list|,
name|String
name|fileName
parameter_list|,
name|boolean
name|innerClassesLast
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|writeSourceIfChanged
argument_list|(
name|source
operator|.
name|printClass
argument_list|(
name|innerClassesLast
argument_list|)
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
DECL|method|writeSourceIfChanged (String source, String fileName)
specifier|private
name|void
name|writeSourceIfChanged
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|outputDir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|header
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"license-header-java.txt"
argument_list|)
init|)
block|{
name|header
operator|=
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|String
name|code
init|=
name|header
operator|+
name|source
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Source code generated:\n"
operator|+
name|code
argument_list|)
expr_stmt|;
name|updateResource
argument_list|(
literal|null
argument_list|,
name|target
operator|.
name|toPath
argument_list|()
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"IOError with file "
operator|+
name|target
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

