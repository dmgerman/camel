begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging.generics
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|generics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericDeclaration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|TypeVariable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|// CHECKSTYLE:OFF
end_comment

begin_class
DECL|class|OwbTypeVariableImpl
specifier|public
class|class
name|OwbTypeVariableImpl
block|{
DECL|field|TYPE_VARIABLE_TYPES
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|TYPE_VARIABLE_TYPES
init|=
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|TypeVariable
operator|.
name|class
block|}
empty_stmt|;
comment|/**      * Java TypeVariable is different in various JDK versions. Thus it is not      * possible to e.g. write a custom TypeVariable which works in either Java7      * and Java8 as they introduced new methods in Java8 which have return      * generics which only exist in Java8 :( As workaround we dynamically crate      * a proxy to wrap this and do the delegation manually. This is of course      * slower, but as we do not use it often it might not have much impact.      *      * @param typeVariable      * @param bounds      * @return the typeVariable with the defined bounds.      */
DECL|method|createTypeVariable (TypeVariable typeVariable, Type... bounds)
specifier|public
specifier|static
name|TypeVariable
name|createTypeVariable
parameter_list|(
name|TypeVariable
name|typeVariable
parameter_list|,
name|Type
modifier|...
name|bounds
parameter_list|)
block|{
name|TypeVariable
name|tv
init|=
operator|(
name|TypeVariable
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|OwbTypeVariableImpl
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|TYPE_VARIABLE_TYPES
argument_list|,
operator|new
name|OwbTypeVariableInvocationHandler
argument_list|(
name|typeVariable
argument_list|,
name|bounds
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|tv
return|;
block|}
DECL|class|OwbTypeVariableInvocationHandler
specifier|public
specifier|static
class|class
name|OwbTypeVariableInvocationHandler
implements|implements
name|InvocationHandler
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|genericDeclaration
specifier|private
name|GenericDeclaration
name|genericDeclaration
decl_stmt|;
DECL|field|bounds
specifier|private
name|Type
index|[]
name|bounds
decl_stmt|;
DECL|method|OwbTypeVariableInvocationHandler (TypeVariable typeVariable, Type... bounds)
specifier|public
name|OwbTypeVariableInvocationHandler
parameter_list|(
name|TypeVariable
name|typeVariable
parameter_list|,
name|Type
modifier|...
name|bounds
parameter_list|)
block|{
name|name
operator|=
name|typeVariable
operator|.
name|getName
argument_list|()
expr_stmt|;
name|genericDeclaration
operator|=
name|typeVariable
operator|.
name|getGenericDeclaration
argument_list|()
expr_stmt|;
if|if
condition|(
name|bounds
operator|==
literal|null
operator|||
name|bounds
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|bounds
operator|=
name|typeVariable
operator|.
name|getBounds
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|bounds
operator|=
name|bounds
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|invoke (Object proxy, Method method, Object[] args)
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|methodName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"equals"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
return|return
name|typeVariableEquals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"hashCode"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
return|return
name|typeVariableHashCode
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"toString"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
return|return
name|typeVariableToString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"getName"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
return|return
name|getName
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"getGenericDeclaration"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
return|return
name|getGenericDeclaration
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"getBounds"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
return|return
name|getBounds
argument_list|()
return|;
block|}
comment|// new method from java8...
return|return
literal|null
return|;
block|}
comment|/** method from TypeVariable */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/** method from TypeVariable */
DECL|method|getGenericDeclaration ()
specifier|public
name|GenericDeclaration
name|getGenericDeclaration
parameter_list|()
block|{
return|return
name|genericDeclaration
return|;
block|}
comment|/** method from TypeVariable */
DECL|method|getBounds ()
specifier|public
name|Type
index|[]
name|getBounds
parameter_list|()
block|{
return|return
name|bounds
operator|.
name|clone
argument_list|()
return|;
block|}
comment|/** method from TypeVariable */
DECL|method|typeVariableHashCode ()
specifier|public
name|int
name|typeVariableHashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|bounds
argument_list|)
operator|^
name|name
operator|.
name|hashCode
argument_list|()
operator|^
name|genericDeclaration
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/** method from TypeVariable */
DECL|method|typeVariableEquals (Object object)
specifier|public
name|boolean
name|typeVariableEquals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|object
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|TypeVariable
condition|)
block|{
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|that
init|=
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
return|return
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|genericDeclaration
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getGenericDeclaration
argument_list|()
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|bounds
argument_list|,
name|that
operator|.
name|getBounds
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/** method from TypeVariable */
DECL|method|typeVariableToString ()
specifier|public
name|String
name|typeVariableToString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|bounds
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" extends "
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Type
name|bound
range|:
name|bounds
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|bound
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

