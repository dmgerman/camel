begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging.generics
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|generics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|TypeVariable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|WildcardType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Utility classes with respect to the class operations.  *  * @author<a href="mailto:gurkanerdogdu@yahoo.com">Gurkan Erdogdu</a>  * @since 1.0  */
end_comment

begin_class
DECL|class|ClassUtil
specifier|public
specifier|final
class|class
name|ClassUtil
block|{
DECL|field|PRIMITIVE_TO_WRAPPERS_MAP
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|PRIMITIVE_TO_WRAPPERS_MAP
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|primitiveToWrappersMap
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|primitiveToWrappersMap
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|primitiveToWrappersMap
operator|.
name|put
argument_list|(
name|Float
operator|.
name|TYPE
argument_list|,
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
name|primitiveToWrappersMap
operator|.
name|put
argument_list|(
name|Double
operator|.
name|TYPE
argument_list|,
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|primitiveToWrappersMap
operator|.
name|put
argument_list|(
name|Character
operator|.
name|TYPE
argument_list|,
name|Character
operator|.
name|class
argument_list|)
expr_stmt|;
name|primitiveToWrappersMap
operator|.
name|put
argument_list|(
name|Long
operator|.
name|TYPE
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|primitiveToWrappersMap
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|TYPE
argument_list|,
name|Byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|primitiveToWrappersMap
operator|.
name|put
argument_list|(
name|Short
operator|.
name|TYPE
argument_list|,
name|Short
operator|.
name|class
argument_list|)
expr_stmt|;
name|primitiveToWrappersMap
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|TYPE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|primitiveToWrappersMap
operator|.
name|put
argument_list|(
name|Void
operator|.
name|TYPE
argument_list|,
name|Void
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_TO_WRAPPERS_MAP
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|primitiveToWrappersMap
argument_list|)
expr_stmt|;
block|}
DECL|field|NO_TYPES
specifier|public
specifier|static
specifier|final
name|Type
index|[]
name|NO_TYPES
init|=
operator|new
name|Type
index|[
literal|0
index|]
decl_stmt|;
comment|/*      * Private constructor      */
DECL|method|ClassUtil ()
specifier|private
name|ClassUtil
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|isSame (Type type1, Type type2)
specifier|public
specifier|static
name|boolean
name|isSame
parameter_list|(
name|Type
name|type1
parameter_list|,
name|Type
name|type2
parameter_list|)
block|{
if|if
condition|(
operator|(
name|type1
operator|instanceof
name|Class
operator|)
operator|&&
operator|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|type1
operator|)
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|type1
operator|=
name|PRIMITIVE_TO_WRAPPERS_MAP
operator|.
name|get
argument_list|(
name|type1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|type2
operator|instanceof
name|Class
operator|)
operator|&&
operator|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|type2
operator|)
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|type2
operator|=
name|PRIMITIVE_TO_WRAPPERS_MAP
operator|.
name|get
argument_list|(
name|type2
argument_list|)
expr_stmt|;
block|}
return|return
name|type1
operator|==
name|type2
return|;
block|}
DECL|method|getPrimitiveWrapper (Class<?> clazz)
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getPrimitiveWrapper
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|PRIMITIVE_TO_WRAPPERS_MAP
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
return|;
block|}
comment|/**      * Gets the class of the given type arguments.      *<p>      * If the given type {@link Type} parameters is an instance of the      * {@link ParameterizedType}, it returns the raw type otherwise it return      * the casted {@link Class} of the type argument.      *</p>      *       * @param type class or parametrized type      * @return      */
DECL|method|getClass (Type type)
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getClass
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
return|return
name|getClazz
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * Returns true if type is an instance of<code>ParameterizedType</code>      * else otherwise.      *       * @param type type of the artifact      * @return true if type is an instance of<code>ParameterizedType</code>      */
DECL|method|isParametrizedType (Type type)
specifier|public
specifier|static
name|boolean
name|isParametrizedType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
return|return
name|type
operator|instanceof
name|ParameterizedType
return|;
block|}
comment|/**      * Returns true if type is an instance of<code>WildcardType</code>      * else otherwise.      *       * @param type type of the artifact      * @return true if type is an instance of<code>WildcardType</code>      */
DECL|method|isWildCardType (Type type)
specifier|public
specifier|static
name|boolean
name|isWildCardType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
return|return
name|type
operator|instanceof
name|WildcardType
return|;
block|}
comment|/**      * Returns true if rhs is assignable type      * to the lhs, false otherwise.      *       * @param lhs left hand side class      * @param rhs right hand side class      * @return true if rhs is assignable to lhs      */
DECL|method|isClassAssignableFrom (Class<?> lhs, Class<?> rhs)
specifier|public
specifier|static
name|boolean
name|isClassAssignableFrom
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|lhs
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|lhs
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|lhs
operator|=
name|getPrimitiveWrapper
argument_list|(
name|lhs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rhs
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|rhs
operator|=
name|getPrimitiveWrapper
argument_list|(
name|rhs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lhs
operator|.
name|isAssignableFrom
argument_list|(
name|rhs
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Return raw class type for given type.      *      * @param type base type instance      * @return class type for given type      */
DECL|method|getClazz (Type type)
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getClazz
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|pt
init|=
operator|(
name|ParameterizedType
operator|)
name|type
decl_stmt|;
return|return
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|pt
operator|.
name|getRawType
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|type
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|GenericArrayType
name|arrayType
init|=
operator|(
name|GenericArrayType
operator|)
name|type
decl_stmt|;
return|return
name|Array
operator|.
name|newInstance
argument_list|(
name|getClazz
argument_list|(
name|arrayType
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|WildcardType
condition|)
block|{
name|WildcardType
name|wildcardType
init|=
operator|(
name|WildcardType
operator|)
name|type
decl_stmt|;
name|Type
index|[]
name|bounds
init|=
name|wildcardType
operator|.
name|getUpperBounds
argument_list|()
decl_stmt|;
if|if
condition|(
name|bounds
operator|.
name|length
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal use of wild card type with more than one upper bound: "
operator|+
name|wildcardType
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|bounds
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|Object
operator|.
name|class
return|;
block|}
else|else
block|{
return|return
name|getClass
argument_list|(
name|bounds
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|TypeVariable
condition|)
block|{
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|typeVariable
init|=
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|type
decl_stmt|;
if|if
condition|(
name|typeVariable
operator|.
name|getBounds
argument_list|()
operator|.
name|length
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal use of type variable with more than one bound: "
operator|+
name|typeVariable
argument_list|)
throw|;
block|}
else|else
block|{
name|Type
index|[]
name|bounds
init|=
name|typeVariable
operator|.
name|getBounds
argument_list|()
decl_stmt|;
if|if
condition|(
name|bounds
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|Object
operator|.
name|class
return|;
block|}
else|else
block|{
return|return
name|getClass
argument_list|(
name|bounds
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
DECL|method|isRawClassEquals (Type ipType, Type apiType)
specifier|public
specifier|static
name|boolean
name|isRawClassEquals
parameter_list|(
name|Type
name|ipType
parameter_list|,
name|Type
name|apiType
parameter_list|)
block|{
name|Class
name|ipClass
init|=
name|getRawPrimitiveType
argument_list|(
name|ipType
argument_list|)
decl_stmt|;
name|Class
name|apiClass
init|=
name|getRawPrimitiveType
argument_list|(
name|apiType
argument_list|)
decl_stmt|;
if|if
condition|(
name|ipClass
operator|==
literal|null
operator|||
name|apiClass
operator|==
literal|null
condition|)
block|{
comment|// we found some illegal generics
return|return
literal|false
return|;
block|}
return|return
name|ipClass
operator|.
name|equals
argument_list|(
name|apiClass
argument_list|)
return|;
block|}
DECL|method|getRawPrimitiveType (Type type)
specifier|private
specifier|static
name|Class
name|getRawPrimitiveType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|Class
operator|)
name|type
operator|)
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
return|return
name|getPrimitiveWrapper
argument_list|(
operator|(
name|Class
operator|)
name|type
argument_list|)
return|;
block|}
return|return
operator|(
name|Class
operator|)
name|type
return|;
block|}
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
name|getRawPrimitiveType
argument_list|(
operator|(
operator|(
name|ParameterizedType
operator|)
name|type
operator|)
operator|.
name|getRawType
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

