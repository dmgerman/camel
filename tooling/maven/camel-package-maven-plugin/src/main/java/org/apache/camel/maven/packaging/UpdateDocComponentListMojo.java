begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|ComponentModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|DataFormatModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|EipModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|LanguageModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|OtherModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mvel2
operator|.
name|templates
operator|.
name|TemplateRuntime
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|PackageHelper
operator|.
name|loadText
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|PackageHelper
operator|.
name|writeText
import|;
end_import

begin_comment
comment|/**  * Updates the documentation with the component list to be up to date with all the artifacts that Apache Camel ships.  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"update-doc-component-list"
argument_list|,
name|threadSafe
operator|=
literal|true
argument_list|)
DECL|class|UpdateDocComponentListMojo
specifier|public
class|class
name|UpdateDocComponentListMojo
extends|extends
name|AbstractMojo
block|{
comment|/**      * The maven project.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"project"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|readonly
operator|=
literal|true
argument_list|)
DECL|field|project
specifier|protected
name|MavenProject
name|project
decl_stmt|;
comment|/**      * The directory for EIPs (model) catalog      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/classes/org/apache/camel/catalog/models"
argument_list|)
DECL|field|eipsDir
specifier|protected
name|File
name|eipsDir
decl_stmt|;
comment|/**      * The directory for components catalog      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/classes/org/apache/camel/catalog/components"
argument_list|)
DECL|field|componentsDir
specifier|protected
name|File
name|componentsDir
decl_stmt|;
comment|/**      * The directory for data formats catalog      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/classes/org/apache/camel/catalog/dataformats"
argument_list|)
DECL|field|dataFormatsDir
specifier|protected
name|File
name|dataFormatsDir
decl_stmt|;
comment|/**      * The directory for languages catalog      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/classes/org/apache/camel/catalog/languages"
argument_list|)
DECL|field|languagesDir
specifier|protected
name|File
name|languagesDir
decl_stmt|;
comment|/**      * The directory for others catalog      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/classes/org/apache/camel/catalog/others"
argument_list|)
DECL|field|othersDir
specifier|protected
name|File
name|othersDir
decl_stmt|;
comment|/**      * The directory for camel-core      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.directory}/../../../core/camel-core-engine"
argument_list|)
DECL|field|readmeCoreDir
specifier|protected
name|File
name|readmeCoreDir
decl_stmt|;
comment|/**      * The directory for components      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.directory}/../../../components"
argument_list|)
DECL|field|readmeComponentsDir
specifier|protected
name|File
name|readmeComponentsDir
decl_stmt|;
comment|/**      * The website doc for components      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.directory}/../../../docs/components/modules/ROOT/nav.adoc"
argument_list|)
DECL|field|websiteDocFile
specifier|protected
name|File
name|websiteDocFile
decl_stmt|;
comment|/**      * Maven ProjectHelper.      */
annotation|@
name|Component
DECL|field|projectHelper
specifier|private
name|MavenProjectHelper
name|projectHelper
decl_stmt|;
comment|/**      * Execute goal.      *      * @throws MojoExecutionException execution of the main class or one of the      *                                threads it generated failed.      * @throws MojoFailureException   something bad happened...      */
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|executeEipsList
argument_list|()
expr_stmt|;
name|executeComponentsList
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|executeDataFormatsList
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|executeLanguagesList
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|executeComponentsList
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|executeDataFormatsList
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|executeLanguagesList
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|executeOthersReadme
argument_list|()
expr_stmt|;
block|}
DECL|method|executeEipsList ()
specifier|protected
name|void
name|executeEipsList
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|Set
argument_list|<
name|File
argument_list|>
name|eipFiles
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|eipsDir
operator|!=
literal|null
operator|&&
name|eipsDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|eipsDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|eipFiles
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|List
argument_list|<
name|EipModel
argument_list|>
name|models
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|eipFiles
control|)
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|EipModel
name|model
init|=
name|generateEipModel
argument_list|(
name|json
argument_list|)
decl_stmt|;
comment|// we only want actual EIPs from the models
if|if
condition|(
name|model
operator|.
name|getLabel
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"eip"
argument_list|)
condition|)
block|{
name|models
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
comment|// re-order the EIPs so we have them in different categories
comment|// sort the models
name|Collections
operator|.
name|sort
argument_list|(
name|models
argument_list|,
operator|new
name|EipComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// how many deprecated
name|long
name|deprecated
init|=
name|models
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|EipModel
operator|::
name|isDeprecated
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
comment|// update the big readme file in the core dir
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|readmeCoreDir
argument_list|,
literal|"readme-eip.adoc"
argument_list|)
decl_stmt|;
comment|// update regular components
name|boolean
name|exists
init|=
name|file
operator|.
name|exists
argument_list|()
decl_stmt|;
name|String
name|changed
init|=
name|templateEips
argument_list|(
name|models
argument_list|,
name|deprecated
argument_list|)
decl_stmt|;
name|boolean
name|updated
init|=
name|updateEips
argument_list|(
name|file
argument_list|,
name|changed
argument_list|)
decl_stmt|;
if|if
condition|(
name|updated
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated readme-eip.adoc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exists
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to readme-eip.adoc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"No readme-eip.adoc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Error due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|executeComponentsList (boolean coreOnly)
specifier|protected
name|void
name|executeComponentsList
parameter_list|(
name|boolean
name|coreOnly
parameter_list|)
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|Set
argument_list|<
name|File
argument_list|>
name|componentFiles
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|componentsDir
operator|!=
literal|null
operator|&&
name|componentsDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|componentsDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|componentFiles
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|List
argument_list|<
name|ComponentModel
argument_list|>
name|models
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|componentFiles
control|)
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|ComponentModel
name|model
init|=
name|generateComponentModel
argument_list|(
name|json
argument_list|,
name|coreOnly
argument_list|)
decl_stmt|;
comment|// filter out alternative schemas which reuses documentation
name|boolean
name|add
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|model
operator|.
name|getAlternativeSchemes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|first
init|=
name|model
operator|.
name|getAlternativeSchemes
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|model
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|first
argument_list|)
condition|)
block|{
name|add
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|add
condition|)
block|{
name|models
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|// special for camel-mail where we want to refer its imap scheme to mail so its mail.adoc in the doc link
if|if
condition|(
literal|"imap"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|model
operator|.
name|setScheme
argument_list|(
literal|"mail"
argument_list|)
expr_stmt|;
name|model
operator|.
name|setTitle
argument_list|(
literal|"Mail"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// sort the models
name|Collections
operator|.
name|sort
argument_list|(
name|models
argument_list|,
operator|new
name|ComponentComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// filter out unwanted components
name|List
argument_list|<
name|ComponentModel
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ComponentModel
name|model
range|:
name|models
control|)
block|{
if|if
condition|(
name|coreOnly
condition|)
block|{
if|if
condition|(
literal|"camel-core"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
comment|// only include core components
name|components
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// we want to include everything in the big file (also from camel-core)
name|components
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
comment|// how many different artifacts
name|int
name|count
init|=
name|components
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ComponentModel
operator|::
name|getArtifactId
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// how many deprecated
name|long
name|deprecated
init|=
name|components
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|c
lambda|->
literal|"true"
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getDeprecated
argument_list|()
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
comment|// update the big readme file in the core/components dir
name|File
name|file
decl_stmt|;
if|if
condition|(
name|coreOnly
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|readmeCoreDir
argument_list|,
literal|"readme.adoc"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|readmeComponentsDir
argument_list|,
literal|"readme.adoc"
argument_list|)
expr_stmt|;
block|}
comment|// update regular components
name|boolean
name|exists
init|=
name|file
operator|.
name|exists
argument_list|()
decl_stmt|;
name|String
name|changed
init|=
name|templateComponents
argument_list|(
name|components
argument_list|,
name|count
argument_list|,
name|deprecated
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|updated
init|=
name|updateComponents
argument_list|(
name|file
argument_list|,
name|changed
argument_list|)
decl_stmt|;
if|if
condition|(
name|updated
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated readme.adoc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exists
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to readme.adoc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"No readme.adoc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
comment|// update doc in the website dir
name|file
operator|=
name|websiteDocFile
expr_stmt|;
name|exists
operator|=
name|file
operator|.
name|exists
argument_list|()
expr_stmt|;
name|changed
operator|=
name|templateComponents
argument_list|(
name|components
argument_list|,
name|count
argument_list|,
name|deprecated
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|updated
operator|=
name|updateComponents
argument_list|(
name|file
argument_list|,
name|changed
argument_list|)
expr_stmt|;
if|if
condition|(
name|updated
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated website doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exists
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to website doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"No website doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Error due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|executeOthersReadme ()
specifier|protected
name|void
name|executeOthersReadme
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|Set
argument_list|<
name|File
argument_list|>
name|otherFiles
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|othersDir
operator|!=
literal|null
operator|&&
name|othersDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|othersDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|otherFiles
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|List
argument_list|<
name|OtherModel
argument_list|>
name|others
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|otherFiles
control|)
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|OtherModel
name|model
init|=
name|generateOtherModel
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|others
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
comment|// sort the models
name|Collections
operator|.
name|sort
argument_list|(
name|others
argument_list|,
operator|new
name|OtherComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// how many different artifacts
name|int
name|count
init|=
name|others
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|OtherModel
operator|::
name|getArtifactId
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// how many deprecated
name|long
name|deprecated
init|=
name|others
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|o
lambda|->
literal|"true"
operator|.
name|equals
argument_list|(
name|o
operator|.
name|getDeprecated
argument_list|()
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
comment|// update the big readme file in the components dir
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|readmeComponentsDir
argument_list|,
literal|"readme.adoc"
argument_list|)
decl_stmt|;
comment|// update regular components
name|boolean
name|exists
init|=
name|file
operator|.
name|exists
argument_list|()
decl_stmt|;
name|String
name|changed
init|=
name|templateOthers
argument_list|(
name|others
argument_list|,
name|count
argument_list|,
name|deprecated
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|updated
init|=
name|updateOthers
argument_list|(
name|file
argument_list|,
name|changed
argument_list|)
decl_stmt|;
if|if
condition|(
name|updated
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated readme.adoc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exists
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to readme.adoc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"No readme.adoc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
comment|// update doc in the website dir
name|file
operator|=
name|websiteDocFile
expr_stmt|;
name|exists
operator|=
name|file
operator|.
name|exists
argument_list|()
expr_stmt|;
name|changed
operator|=
name|templateOthers
argument_list|(
name|others
argument_list|,
name|count
argument_list|,
name|deprecated
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|updated
operator|=
name|updateOthers
argument_list|(
name|file
argument_list|,
name|changed
argument_list|)
expr_stmt|;
if|if
condition|(
name|updated
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated website doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exists
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to website doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"No website doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Error due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|executeDataFormatsList (boolean coreOnly)
specifier|protected
name|void
name|executeDataFormatsList
parameter_list|(
name|boolean
name|coreOnly
parameter_list|)
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|Set
argument_list|<
name|File
argument_list|>
name|dataFormatFiles
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataFormatsDir
operator|!=
literal|null
operator|&&
name|dataFormatsDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|dataFormatsDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|dataFormatFiles
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|List
argument_list|<
name|DataFormatModel
argument_list|>
name|models
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|dataFormatFiles
control|)
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|DataFormatModel
name|model
init|=
name|generateDataFormatModel
argument_list|(
name|json
argument_list|,
name|coreOnly
argument_list|)
decl_stmt|;
comment|// special for bindy as we have one common file
if|if
condition|(
name|model
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"bindy"
argument_list|)
condition|)
block|{
name|model
operator|.
name|setName
argument_list|(
literal|"bindy"
argument_list|)
expr_stmt|;
block|}
name|models
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
comment|// sort the models
name|Collections
operator|.
name|sort
argument_list|(
name|models
argument_list|,
operator|new
name|DataFormatComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// how many different artifacts
name|int
name|count
decl_stmt|;
if|if
condition|(
name|coreOnly
condition|)
block|{
name|count
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|count
operator|=
name|models
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|DataFormatModel
operator|::
name|getArtifactId
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|// how many deprecated
name|long
name|deprecated
init|=
name|models
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|m
lambda|->
literal|"true"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getDeprecated
argument_list|()
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
comment|// filter out camel-core
name|List
argument_list|<
name|DataFormatModel
argument_list|>
name|dataFormats
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DataFormatModel
name|model
range|:
name|models
control|)
block|{
if|if
condition|(
name|coreOnly
condition|)
block|{
if|if
condition|(
literal|"camel-core"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
comment|// only include core components
name|dataFormats
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// we want to include everything in the big file (also from camel-core)
name|dataFormats
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
comment|// update the big readme file in the core/components dir
name|File
name|file
decl_stmt|;
if|if
condition|(
name|coreOnly
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|readmeCoreDir
argument_list|,
literal|"readme.adoc"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|readmeComponentsDir
argument_list|,
literal|"readme.adoc"
argument_list|)
expr_stmt|;
block|}
comment|// update regular data formats
name|boolean
name|exists
init|=
name|file
operator|.
name|exists
argument_list|()
decl_stmt|;
name|String
name|changed
init|=
name|templateDataFormats
argument_list|(
name|dataFormats
argument_list|,
name|count
argument_list|,
name|deprecated
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|updated
init|=
name|updateDataFormats
argument_list|(
name|file
argument_list|,
name|changed
argument_list|)
decl_stmt|;
if|if
condition|(
name|updated
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated readme.adoc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exists
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to readme.adoc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"No readme.adoc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
comment|// update doc in the website dir
name|file
operator|=
name|websiteDocFile
expr_stmt|;
name|exists
operator|=
name|file
operator|.
name|exists
argument_list|()
expr_stmt|;
name|changed
operator|=
name|templateDataFormats
argument_list|(
name|dataFormats
argument_list|,
name|count
argument_list|,
name|deprecated
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|updated
operator|=
name|updateDataFormats
argument_list|(
name|file
argument_list|,
name|changed
argument_list|)
expr_stmt|;
if|if
condition|(
name|updated
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated website doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exists
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to website doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"No website doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Error due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|executeLanguagesList (boolean coreOnly)
specifier|protected
name|void
name|executeLanguagesList
parameter_list|(
name|boolean
name|coreOnly
parameter_list|)
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|Set
argument_list|<
name|File
argument_list|>
name|languageFiles
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|languagesDir
operator|!=
literal|null
operator|&&
name|languagesDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|languagesDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|languageFiles
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|List
argument_list|<
name|LanguageModel
argument_list|>
name|models
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|languageFiles
control|)
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|LanguageModel
name|model
init|=
name|generateLanguageModel
argument_list|(
name|json
argument_list|,
name|coreOnly
argument_list|)
decl_stmt|;
name|models
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
comment|// sort the models
name|Collections
operator|.
name|sort
argument_list|(
name|models
argument_list|,
operator|new
name|LanguageComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// filter out camel-core
name|List
argument_list|<
name|LanguageModel
argument_list|>
name|languages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|LanguageModel
name|model
range|:
name|models
control|)
block|{
if|if
condition|(
name|coreOnly
condition|)
block|{
if|if
condition|(
literal|"camel-core"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
comment|// only include core components
name|languages
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// we want to include everything in the big file (also from camel-core)
name|languages
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
comment|// how many different artifacts
name|int
name|count
init|=
name|languages
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|LanguageModel
operator|::
name|getArtifactId
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// how many deprecated
name|long
name|deprecated
init|=
name|languages
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|l
lambda|->
literal|"true"
operator|.
name|equals
argument_list|(
name|l
operator|.
name|getDeprecated
argument_list|()
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
comment|// update the big readme file in the core/components dir
name|File
name|file
decl_stmt|;
if|if
condition|(
name|coreOnly
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|readmeCoreDir
argument_list|,
literal|"readme.adoc"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|readmeComponentsDir
argument_list|,
literal|"readme.adoc"
argument_list|)
expr_stmt|;
block|}
comment|// update regular data formats
name|boolean
name|exists
init|=
name|file
operator|.
name|exists
argument_list|()
decl_stmt|;
name|String
name|changed
init|=
name|templateLanguages
argument_list|(
name|languages
argument_list|,
name|count
argument_list|,
name|deprecated
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|updated
init|=
name|updateLanguages
argument_list|(
name|file
argument_list|,
name|changed
argument_list|)
decl_stmt|;
if|if
condition|(
name|updated
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated readme.adoc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exists
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to readme.adoc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"No readme.adoc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
comment|// update doc in the website dir
name|file
operator|=
name|websiteDocFile
expr_stmt|;
name|exists
operator|=
name|file
operator|.
name|exists
argument_list|()
expr_stmt|;
name|changed
operator|=
name|templateLanguages
argument_list|(
name|languages
argument_list|,
name|count
argument_list|,
name|deprecated
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|updated
operator|=
name|updateLanguages
argument_list|(
name|file
argument_list|,
name|changed
argument_list|)
expr_stmt|;
if|if
condition|(
name|updated
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated website doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exists
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to website doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"No website doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Error due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|templateEips (List<EipModel> models, long deprecated)
specifier|private
name|String
name|templateEips
parameter_list|(
name|List
argument_list|<
name|EipModel
argument_list|>
name|models
parameter_list|,
name|long
name|deprecated
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
try|try
block|{
name|String
name|template
init|=
name|loadText
argument_list|(
name|UpdateReadmeMojo
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"readme-eips.mvel"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"eips"
argument_list|,
name|models
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"numberOfDeprecated"
argument_list|,
name|deprecated
argument_list|)
expr_stmt|;
name|String
name|out
init|=
operator|(
name|String
operator|)
name|TemplateRuntime
operator|.
name|eval
argument_list|(
name|template
argument_list|,
name|map
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"util"
argument_list|,
name|MvelHelper
operator|.
name|INSTANCE
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|out
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error processing mvel template. Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|templateComponents (List<ComponentModel> models, int artifacts, long deprecated, boolean website)
specifier|private
name|String
name|templateComponents
parameter_list|(
name|List
argument_list|<
name|ComponentModel
argument_list|>
name|models
parameter_list|,
name|int
name|artifacts
parameter_list|,
name|long
name|deprecated
parameter_list|,
name|boolean
name|website
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
try|try
block|{
name|String
name|template
decl_stmt|;
if|if
condition|(
name|website
condition|)
block|{
name|template
operator|=
name|loadText
argument_list|(
name|UpdateReadmeMojo
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"website-components-list.mvel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template
operator|=
name|loadText
argument_list|(
name|UpdateReadmeMojo
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"readme-components.mvel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"components"
argument_list|,
name|models
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"numberOfArtifacts"
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"numberOfDeprecated"
argument_list|,
name|deprecated
argument_list|)
expr_stmt|;
name|String
name|out
init|=
operator|(
name|String
operator|)
name|TemplateRuntime
operator|.
name|eval
argument_list|(
name|template
argument_list|,
name|map
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"util"
argument_list|,
name|MvelHelper
operator|.
name|INSTANCE
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|out
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error processing mvel template. Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|templateOthers (List<OtherModel> models, int artifacts, long deprecated, boolean website)
specifier|private
name|String
name|templateOthers
parameter_list|(
name|List
argument_list|<
name|OtherModel
argument_list|>
name|models
parameter_list|,
name|int
name|artifacts
parameter_list|,
name|long
name|deprecated
parameter_list|,
name|boolean
name|website
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
try|try
block|{
name|String
name|template
decl_stmt|;
if|if
condition|(
name|website
condition|)
block|{
name|template
operator|=
name|loadText
argument_list|(
name|UpdateReadmeMojo
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"website-others-list.mvel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template
operator|=
name|loadText
argument_list|(
name|UpdateReadmeMojo
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"readme-others.mvel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"others"
argument_list|,
name|models
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"numberOfArtifacts"
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"numberOfDeprecated"
argument_list|,
name|deprecated
argument_list|)
expr_stmt|;
name|String
name|out
init|=
operator|(
name|String
operator|)
name|TemplateRuntime
operator|.
name|eval
argument_list|(
name|template
argument_list|,
name|map
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"util"
argument_list|,
name|MvelHelper
operator|.
name|INSTANCE
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|out
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error processing mvel template. Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|templateDataFormats (List<DataFormatModel> models, int artifacts, long deprecated, boolean website)
specifier|private
name|String
name|templateDataFormats
parameter_list|(
name|List
argument_list|<
name|DataFormatModel
argument_list|>
name|models
parameter_list|,
name|int
name|artifacts
parameter_list|,
name|long
name|deprecated
parameter_list|,
name|boolean
name|website
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
try|try
block|{
name|String
name|template
decl_stmt|;
if|if
condition|(
name|website
condition|)
block|{
name|template
operator|=
name|loadText
argument_list|(
name|UpdateReadmeMojo
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"website-dataformats-list.mvel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template
operator|=
name|loadText
argument_list|(
name|UpdateReadmeMojo
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"readme-dataformats.mvel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"dataformats"
argument_list|,
name|models
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"numberOfArtifacts"
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"numberOfDeprecated"
argument_list|,
name|deprecated
argument_list|)
expr_stmt|;
name|String
name|out
init|=
operator|(
name|String
operator|)
name|TemplateRuntime
operator|.
name|eval
argument_list|(
name|template
argument_list|,
name|map
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"util"
argument_list|,
name|MvelHelper
operator|.
name|INSTANCE
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|out
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error processing mvel template. Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|templateLanguages (List<LanguageModel> models, int artifacts, long deprecated, boolean website)
specifier|private
name|String
name|templateLanguages
parameter_list|(
name|List
argument_list|<
name|LanguageModel
argument_list|>
name|models
parameter_list|,
name|int
name|artifacts
parameter_list|,
name|long
name|deprecated
parameter_list|,
name|boolean
name|website
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
try|try
block|{
name|String
name|template
decl_stmt|;
if|if
condition|(
name|website
condition|)
block|{
name|template
operator|=
name|loadText
argument_list|(
name|UpdateReadmeMojo
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"website-languages-list.mvel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template
operator|=
name|loadText
argument_list|(
name|UpdateReadmeMojo
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"readme-languages.mvel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"languages"
argument_list|,
name|models
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"numberOfArtifacts"
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"numberOfDeprecated"
argument_list|,
name|deprecated
argument_list|)
expr_stmt|;
name|String
name|out
init|=
operator|(
name|String
operator|)
name|TemplateRuntime
operator|.
name|eval
argument_list|(
name|template
argument_list|,
name|map
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"util"
argument_list|,
name|MvelHelper
operator|.
name|INSTANCE
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|out
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error processing mvel template. Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|updateEips (File file, String changed)
specifier|private
name|boolean
name|updateEips
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|changed
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|String
name|text
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|existing
init|=
name|StringHelper
operator|.
name|between
argument_list|(
name|text
argument_list|,
literal|"// eips: START"
argument_list|,
literal|"// eips: END"
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
comment|// remove leading line breaks etc
name|existing
operator|=
name|existing
operator|.
name|trim
argument_list|()
expr_stmt|;
name|changed
operator|=
name|changed
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|existing
operator|.
name|equals
argument_list|(
name|changed
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|String
name|before
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|text
argument_list|,
literal|"// eips: START"
argument_list|)
decl_stmt|;
name|String
name|after
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|text
argument_list|,
literal|"// eips: END"
argument_list|)
decl_stmt|;
name|text
operator|=
name|before
operator|+
literal|"// eips: START\n"
operator|+
name|changed
operator|+
literal|"\n// eips: END"
operator|+
name|after
expr_stmt|;
name|writeText
argument_list|(
name|file
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Cannot find markers in file "
operator|+
name|file
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Add the following markers"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t// eips: START"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t// eips: END"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error reading file "
operator|+
name|file
operator|+
literal|" Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|updateComponents (File file, String changed)
specifier|private
name|boolean
name|updateComponents
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|changed
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|String
name|text
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|existing
init|=
name|StringHelper
operator|.
name|between
argument_list|(
name|text
argument_list|,
literal|"// components: START"
argument_list|,
literal|"// components: END"
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
comment|// remove leading line breaks etc
name|existing
operator|=
name|existing
operator|.
name|trim
argument_list|()
expr_stmt|;
name|changed
operator|=
name|changed
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|existing
operator|.
name|equals
argument_list|(
name|changed
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|String
name|before
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|text
argument_list|,
literal|"// components: START"
argument_list|)
decl_stmt|;
name|String
name|after
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|text
argument_list|,
literal|"// components: END"
argument_list|)
decl_stmt|;
name|text
operator|=
name|before
operator|+
literal|"// components: START\n"
operator|+
name|changed
operator|+
literal|"\n// components: END"
operator|+
name|after
expr_stmt|;
name|writeText
argument_list|(
name|file
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Cannot find markers in file "
operator|+
name|file
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Add the following markers"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t// components: START"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t// components: END"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error reading file "
operator|+
name|file
operator|+
literal|" Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|updateOthers (File file, String changed)
specifier|private
name|boolean
name|updateOthers
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|changed
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|String
name|text
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|existing
init|=
name|StringHelper
operator|.
name|between
argument_list|(
name|text
argument_list|,
literal|"// others: START"
argument_list|,
literal|"// others: END"
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
comment|// remove leading line breaks etc
name|existing
operator|=
name|existing
operator|.
name|trim
argument_list|()
expr_stmt|;
name|changed
operator|=
name|changed
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|existing
operator|.
name|equals
argument_list|(
name|changed
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|String
name|before
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|text
argument_list|,
literal|"// others: START"
argument_list|)
decl_stmt|;
name|String
name|after
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|text
argument_list|,
literal|"// others: END"
argument_list|)
decl_stmt|;
name|text
operator|=
name|before
operator|+
literal|"// others: START\n"
operator|+
name|changed
operator|+
literal|"\n// others: END"
operator|+
name|after
expr_stmt|;
name|writeText
argument_list|(
name|file
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Cannot find markers in file "
operator|+
name|file
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Add the following markers"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t// others: START"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t// others: END"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error reading file "
operator|+
name|file
operator|+
literal|" Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|updateDataFormats (File file, String changed)
specifier|private
name|boolean
name|updateDataFormats
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|changed
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|String
name|text
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|existing
init|=
name|StringHelper
operator|.
name|between
argument_list|(
name|text
argument_list|,
literal|"// dataformats: START"
argument_list|,
literal|"// dataformats: END"
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
comment|// remove leading line breaks etc
name|existing
operator|=
name|existing
operator|.
name|trim
argument_list|()
expr_stmt|;
name|changed
operator|=
name|changed
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|existing
operator|.
name|equals
argument_list|(
name|changed
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|String
name|before
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|text
argument_list|,
literal|"// dataformats: START"
argument_list|)
decl_stmt|;
name|String
name|after
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|text
argument_list|,
literal|"// dataformats: END"
argument_list|)
decl_stmt|;
name|text
operator|=
name|before
operator|+
literal|"// dataformats: START\n"
operator|+
name|changed
operator|+
literal|"\n// dataformats: END"
operator|+
name|after
expr_stmt|;
name|writeText
argument_list|(
name|file
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Cannot find markers in file "
operator|+
name|file
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Add the following markers"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t// dataformats: START"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t// dataformats: END"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error reading file "
operator|+
name|file
operator|+
literal|" Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|updateLanguages (File file, String changed)
specifier|private
name|boolean
name|updateLanguages
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|changed
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|String
name|text
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|existing
init|=
name|StringHelper
operator|.
name|between
argument_list|(
name|text
argument_list|,
literal|"// languages: START"
argument_list|,
literal|"// languages: END"
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
comment|// remove leading line breaks etc
name|existing
operator|=
name|existing
operator|.
name|trim
argument_list|()
expr_stmt|;
name|changed
operator|=
name|changed
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|existing
operator|.
name|equals
argument_list|(
name|changed
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|String
name|before
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|text
argument_list|,
literal|"// languages: START"
argument_list|)
decl_stmt|;
name|String
name|after
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|text
argument_list|,
literal|"// languages: END"
argument_list|)
decl_stmt|;
name|text
operator|=
name|before
operator|+
literal|"// languages: START\n"
operator|+
name|changed
operator|+
literal|"\n// languages: END"
operator|+
name|after
expr_stmt|;
name|writeText
argument_list|(
name|file
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Cannot find markers in file "
operator|+
name|file
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Add the following markers"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t// languages: START"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t// languages: END"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error reading file "
operator|+
name|file
operator|+
literal|" Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|class|EipComparator
specifier|private
specifier|static
class|class
name|EipComparator
implements|implements
name|Comparator
argument_list|<
name|EipModel
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (EipModel o1, EipModel o2)
specifier|public
name|int
name|compare
parameter_list|(
name|EipModel
name|o1
parameter_list|,
name|EipModel
name|o2
parameter_list|)
block|{
comment|// lets sort by title
return|return
name|o1
operator|.
name|getTitle
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|o2
operator|.
name|getTitle
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|ComponentComparator
specifier|private
specifier|static
class|class
name|ComponentComparator
implements|implements
name|Comparator
argument_list|<
name|ComponentModel
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (ComponentModel o1, ComponentModel o2)
specifier|public
name|int
name|compare
parameter_list|(
name|ComponentModel
name|o1
parameter_list|,
name|ComponentModel
name|o2
parameter_list|)
block|{
comment|// lets sort by title
return|return
name|o1
operator|.
name|getTitle
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|o2
operator|.
name|getTitle
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|OtherComparator
specifier|private
specifier|static
class|class
name|OtherComparator
implements|implements
name|Comparator
argument_list|<
name|OtherModel
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (OtherModel o1, OtherModel o2)
specifier|public
name|int
name|compare
parameter_list|(
name|OtherModel
name|o1
parameter_list|,
name|OtherModel
name|o2
parameter_list|)
block|{
comment|// lets sort by title
return|return
name|o1
operator|.
name|getTitle
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|o2
operator|.
name|getTitle
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|DataFormatComparator
specifier|private
specifier|static
class|class
name|DataFormatComparator
implements|implements
name|Comparator
argument_list|<
name|DataFormatModel
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (DataFormatModel o1, DataFormatModel o2)
specifier|public
name|int
name|compare
parameter_list|(
name|DataFormatModel
name|o1
parameter_list|,
name|DataFormatModel
name|o2
parameter_list|)
block|{
comment|// lets sort by title
return|return
name|o1
operator|.
name|getTitle
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|o2
operator|.
name|getTitle
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|LanguageComparator
specifier|private
specifier|static
class|class
name|LanguageComparator
implements|implements
name|Comparator
argument_list|<
name|LanguageModel
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (LanguageModel o1, LanguageModel o2)
specifier|public
name|int
name|compare
parameter_list|(
name|LanguageModel
name|o1
parameter_list|,
name|LanguageModel
name|o2
parameter_list|)
block|{
comment|// lets sort by title
return|return
name|o1
operator|.
name|getTitle
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|o2
operator|.
name|getTitle
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|generateEipModel (String json)
specifier|private
name|EipModel
name|generateEipModel
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"model"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|EipModel
name|eip
init|=
operator|new
name|EipModel
argument_list|()
decl_stmt|;
name|eip
operator|.
name|setName
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|eip
operator|.
name|setTitle
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|eip
operator|.
name|setDescription
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|eip
operator|.
name|setJavaType
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|eip
operator|.
name|setLabel
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|eip
operator|.
name|setDeprecated
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|eip
operator|.
name|setDeprecationNote
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|eip
operator|.
name|setInput
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"input"
argument_list|,
name|rows
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|eip
operator|.
name|setOutput
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"output"
argument_list|,
name|rows
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|eip
return|;
block|}
DECL|method|generateComponentModel (String json, boolean coreOnly)
specifier|private
name|ComponentModel
name|generateComponentModel
parameter_list|(
name|String
name|json
parameter_list|,
name|boolean
name|coreOnly
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"component"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ComponentModel
name|component
init|=
operator|new
name|ComponentModel
argument_list|(
name|coreOnly
argument_list|)
decl_stmt|;
name|component
operator|.
name|setScheme
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"scheme"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setSyntax
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"syntax"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setAlternativeSyntax
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"alternativeSyntax"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setAlternativeSchemes
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"alternativeSchemes"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setTitle
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDescription
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setFirstVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"firstVersion"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setLabel
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDeprecated
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDeprecationNote
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setConsumerOnly
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"consumerOnly"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setProducerOnly
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"producerOnly"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setJavaType
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setGroupId
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setArtifactId
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|component
return|;
block|}
DECL|method|generateOtherModel (String json)
specifier|private
name|OtherModel
name|generateOtherModel
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"other"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|OtherModel
name|other
init|=
operator|new
name|OtherModel
argument_list|()
decl_stmt|;
name|other
operator|.
name|setName
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setTitle
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setDescription
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setFirstVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"firstVersion"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setLabel
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setDeprecated
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setDeprecationNote
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setGroupId
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setArtifactId
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|other
return|;
block|}
DECL|method|generateDataFormatModel (String json, boolean coreOnly)
specifier|private
name|DataFormatModel
name|generateDataFormatModel
parameter_list|(
name|String
name|json
parameter_list|,
name|boolean
name|coreOnly
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"dataformat"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|DataFormatModel
name|dataFormat
init|=
operator|new
name|DataFormatModel
argument_list|(
name|coreOnly
argument_list|)
decl_stmt|;
name|dataFormat
operator|.
name|setName
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setTitle
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setModelName
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"modelName"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setDescription
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setFirstVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"firstVersion"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setLabel
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setDeprecated
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setDeprecationNote
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setJavaType
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setGroupId
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setArtifactId
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|dataFormat
return|;
block|}
DECL|method|generateLanguageModel (String json, boolean coreOnly)
specifier|private
name|LanguageModel
name|generateLanguageModel
parameter_list|(
name|String
name|json
parameter_list|,
name|boolean
name|coreOnly
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"language"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|LanguageModel
name|language
init|=
operator|new
name|LanguageModel
argument_list|(
name|coreOnly
argument_list|)
decl_stmt|;
name|language
operator|.
name|setTitle
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setName
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setModelName
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"modelName"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setDescription
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setFirstVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"firstVersion"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setLabel
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setDeprecated
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setDeprecationNote
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setJavaType
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setGroupId
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setArtifactId
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|language
return|;
block|}
block|}
end_class

end_unit

