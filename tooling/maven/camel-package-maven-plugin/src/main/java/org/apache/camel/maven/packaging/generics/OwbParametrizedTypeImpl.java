begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging.generics
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|generics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Custom parametrized type implementation.  *  * @version $Rev: 1621935 $ $Date: 2014-09-02 09:07:32 +0200 (Tue, 02 Sep 2014)  *          $  */
end_comment

begin_class
DECL|class|OwbParametrizedTypeImpl
specifier|public
class|class
name|OwbParametrizedTypeImpl
implements|implements
name|ParameterizedType
block|{
comment|/**      * Owner type      */
DECL|field|owner
specifier|private
specifier|final
name|Type
name|owner
decl_stmt|;
comment|/**      * Raw type      */
DECL|field|rawType
specifier|private
specifier|final
name|Type
name|rawType
decl_stmt|;
comment|/**      * Actual type arguments      */
DECL|field|types
specifier|private
specifier|final
name|Type
index|[]
name|types
decl_stmt|;
comment|/**      * New instance.      *      * @param owner owner      * @param raw raw      */
DECL|method|OwbParametrizedTypeImpl (Type owner, Type raw, Type... types)
specifier|public
name|OwbParametrizedTypeImpl
parameter_list|(
name|Type
name|owner
parameter_list|,
name|Type
name|raw
parameter_list|,
name|Type
modifier|...
name|types
parameter_list|)
block|{
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
name|rawType
operator|=
name|raw
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|types
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getActualTypeArguments ()
specifier|public
name|Type
index|[]
name|getActualTypeArguments
parameter_list|()
block|{
return|return
name|types
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getOwnerType ()
specifier|public
name|Type
name|getOwnerType
parameter_list|()
block|{
return|return
name|owner
return|;
block|}
annotation|@
name|Override
DECL|method|getRawType ()
specifier|public
name|Type
name|getRawType
parameter_list|()
block|{
return|return
name|rawType
return|;
block|}
comment|/*      * (non-Javadoc)      * @see java.lang.Object#hashCode()      */
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|types
argument_list|)
operator|^
operator|(
name|owner
operator|==
literal|null
condition|?
literal|0
else|:
name|owner
operator|.
name|hashCode
argument_list|()
operator|)
operator|^
operator|(
name|rawType
operator|==
literal|null
condition|?
literal|0
else|:
name|rawType
operator|.
name|hashCode
argument_list|()
operator|)
return|;
block|}
comment|/*      * (non-Javadoc)      * @see java.lang.Object#equals(java.lang.Object)      */
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|that
init|=
operator|(
name|ParameterizedType
operator|)
name|obj
decl_stmt|;
name|Type
name|thatOwnerType
init|=
name|that
operator|.
name|getOwnerType
argument_list|()
decl_stmt|;
name|Type
name|thatRawType
init|=
name|that
operator|.
name|getRawType
argument_list|()
decl_stmt|;
return|return
operator|(
name|owner
operator|==
literal|null
condition|?
name|thatOwnerType
operator|==
literal|null
else|:
name|owner
operator|.
name|equals
argument_list|(
name|thatOwnerType
argument_list|)
operator|)
operator|&&
operator|(
name|rawType
operator|==
literal|null
condition|?
name|thatRawType
operator|==
literal|null
else|:
name|rawType
operator|.
name|equals
argument_list|(
name|thatRawType
argument_list|)
operator|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|types
argument_list|,
name|that
operator|.
name|getActualTypeArguments
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|rawType
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Type
index|[]
name|actualTypes
init|=
name|getActualTypeArguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|actualTypes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|actualTypes
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|actualTypes
index|[
name|i
index|]
operator|instanceof
name|Class
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|actualTypes
index|[
name|i
index|]
operator|)
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
name|actualTypes
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|!=
name|actualTypes
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

