begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOError
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystemAlreadyExistsException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystems
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlEnum
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|LifecyclePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|jandex
operator|.
name|AnnotationInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|jandex
operator|.
name|AnnotationTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|jandex
operator|.
name|ClassInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|jandex
operator|.
name|DotName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|jandex
operator|.
name|IndexView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|jandex
operator|.
name|Indexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|plexus
operator|.
name|build
operator|.
name|incremental
operator|.
name|BuildContext
import|;
end_import

begin_comment
comment|/**  * Analyses the Camel plugins in a project and generates extra descriptor information for easier auto-discovery in Camel.  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"generate-jaxb-list"
argument_list|,
name|threadSafe
operator|=
literal|true
argument_list|,
name|defaultPhase
operator|=
name|LifecyclePhase
operator|.
name|PROCESS_CLASSES
argument_list|)
DECL|class|PackageJaxbMojo
specifier|public
class|class
name|PackageJaxbMojo
extends|extends
name|AbstractGeneratorMojo
block|{
comment|/**      * The output directory for generated components file      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/generated/camel/jaxb"
argument_list|)
DECL|field|jaxbIndexOutDir
specifier|protected
name|File
name|jaxbIndexOutDir
decl_stmt|;
comment|/**      * Execute goal.      *      * @throws MojoExecutionException execution of the main class or one of the      *                 threads it generated failed.      * @throws MojoFailureException something bad happened...      */
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getOutputDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|processClasses
argument_list|(
name|createIndex
argument_list|(
name|locations
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|jaxbIndexOutDir
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|addResourceDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
DECL|method|processClasses (IndexView index)
specifier|private
name|void
name|processClasses
parameter_list|(
name|IndexView
name|index
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|byPackage
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Stream
operator|.
name|of
argument_list|(
name|XmlRootElement
operator|.
name|class
argument_list|,
name|XmlEnum
operator|.
name|class
argument_list|)
operator|.
name|map
argument_list|(
name|Class
operator|::
name|getName
argument_list|)
operator|.
name|map
argument_list|(
name|DotName
operator|::
name|createSimple
argument_list|)
operator|.
name|map
argument_list|(
name|index
operator|::
name|getAnnotations
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Collection
operator|::
name|stream
argument_list|)
operator|.
name|map
argument_list|(
name|AnnotationInstance
operator|::
name|target
argument_list|)
operator|.
name|map
argument_list|(
name|AnnotationTarget
operator|::
name|asClass
argument_list|)
operator|.
name|map
argument_list|(
name|ClassInfo
operator|::
name|name
argument_list|)
operator|.
name|map
argument_list|(
name|DotName
operator|::
name|toString
argument_list|)
operator|.
name|forEach
argument_list|(
name|name
lambda|->
block|{
name|int
name|idx
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|String
name|p
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|String
name|c
init|=
name|name
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
name|byPackage
operator|.
name|computeIfAbsent
argument_list|(
name|p
argument_list|,
name|s
lambda|->
operator|new
name|TreeSet
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|Path
name|jaxbIndexDir
init|=
name|jaxbIndexOutDir
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|byPackage
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fn
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|"/jaxb.index"
decl_stmt|;
if|if
condition|(
name|project
operator|.
name|getCompileSourceRoots
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Paths
operator|::
name|get
argument_list|)
operator|.
name|map
argument_list|(
name|p
lambda|->
name|p
operator|.
name|resolve
argument_list|(
name|fn
argument_list|)
argument_list|)
operator|.
name|findAny
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Path
name|file
init|=
name|jaxbIndexDir
operator|.
name|resolve
argument_list|(
name|fn
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"# "
operator|+
name|GENERATED_MSG
operator|+
name|NL
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
block|}
name|updateResource
argument_list|(
name|file
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Generated "
operator|+
name|jaxbIndexOutDir
operator|+
literal|" containing "
operator|+
name|count
operator|+
literal|" jaxb.index elements"
argument_list|)
expr_stmt|;
block|}
DECL|method|createIndex (List<String> locations)
specifier|private
name|IndexView
name|createIndex
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|locations
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
try|try
block|{
name|Indexer
name|indexer
init|=
operator|new
name|Indexer
argument_list|()
decl_stmt|;
name|locations
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|asFolder
argument_list|)
operator|.
name|filter
argument_list|(
name|Files
operator|::
name|isDirectory
argument_list|)
operator|.
name|flatMap
argument_list|(
name|this
operator|::
name|walk
argument_list|)
operator|.
name|filter
argument_list|(
name|Files
operator|::
name|isRegularFile
argument_list|)
operator|.
name|filter
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|p
lambda|->
name|index
argument_list|(
name|indexer
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|indexer
operator|.
name|complete
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOError
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|asFolder (String p)
specifier|private
name|Path
name|asFolder
parameter_list|(
name|String
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
name|File
name|fp
init|=
operator|new
name|File
argument_list|(
name|p
argument_list|)
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
return|return
name|FileSystems
operator|.
name|newFileSystem
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"jar:"
operator|+
name|fp
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|env
argument_list|)
operator|.
name|getPath
argument_list|(
literal|"/"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileSystemAlreadyExistsException
name|e
parameter_list|)
block|{
return|return
name|FileSystems
operator|.
name|getFileSystem
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"jar:"
operator|+
name|fp
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getPath
argument_list|(
literal|"/"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|p
argument_list|)
return|;
block|}
block|}
DECL|method|walk (Path p)
specifier|private
name|Stream
argument_list|<
name|Path
argument_list|>
name|walk
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
try|try
block|{
return|return
name|Files
operator|.
name|walk
argument_list|(
name|p
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|index (Indexer indexer, Path p)
specifier|private
name|void
name|index
parameter_list|(
name|Indexer
name|indexer
parameter_list|,
name|Path
name|p
parameter_list|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|p
argument_list|)
init|)
block|{
name|indexer
operator|.
name|index
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

