begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|ClassWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
import|;
end_import

begin_class
DECL|class|DynamicClassLoader
class|class
name|DynamicClassLoader
extends|extends
name|URLClassLoader
block|{
DECL|method|DynamicClassLoader (URL[] urls, ClassLoader parent)
specifier|public
name|DynamicClassLoader
parameter_list|(
name|URL
index|[]
name|urls
parameter_list|,
name|ClassLoader
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|urls
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
DECL|method|createDynamicClassLoader (List<String> classpathElements)
specifier|public
specifier|static
name|DynamicClassLoader
name|createDynamicClassLoader
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|classpathElements
parameter_list|)
block|{
specifier|final
name|URL
index|[]
name|urls
init|=
operator|new
name|URL
index|[
name|classpathElements
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|classpathElements
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|urls
index|[
name|i
index|]
operator|=
operator|new
name|File
argument_list|(
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|final
name|ClassLoader
name|tccl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
return|return
operator|new
name|DynamicClassLoader
argument_list|(
name|urls
argument_list|,
name|tccl
operator|!=
literal|null
condition|?
name|tccl
else|:
name|DynamicClassLoader
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
DECL|method|defineClass (String name, byte[] data)
specifier|public
name|Class
name|defineClass
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|super
operator|.
name|defineClass
argument_list|(
name|name
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|generateDummyClass (String clazzName)
specifier|public
name|Class
name|generateDummyClass
parameter_list|(
name|String
name|clazzName
parameter_list|)
block|{
try|try
block|{
return|return
name|loadClass
argument_list|(
name|clazzName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|ClassWriter
name|cw
init|=
operator|new
name|ClassWriter
argument_list|(
name|ClassWriter
operator|.
name|COMPUTE_FRAMES
argument_list|)
decl_stmt|;
name|cw
operator|.
name|visit
argument_list|(
name|Opcodes
operator|.
name|V1_8
argument_list|,
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
name|clazzName
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"java/lang/Object"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cw
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
return|return
name|defineClass
argument_list|(
name|clazzName
argument_list|,
name|cw
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

