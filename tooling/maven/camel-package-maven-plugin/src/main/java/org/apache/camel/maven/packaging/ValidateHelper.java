begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|PackageHelper
operator|.
name|loadText
import|;
end_import

begin_comment
comment|/**  * Validation helper for validating components, data formats and languages  */
end_comment

begin_class
DECL|class|ValidateHelper
specifier|public
specifier|final
class|class
name|ValidateHelper
block|{
DECL|method|ValidateHelper ()
specifier|private
name|ValidateHelper
parameter_list|()
block|{     }
comment|/**      * Validates the component json file      *      * @param file        the json file      * @param errorDetail details to add errors      */
DECL|method|validate (File file, ErrorDetail errorDetail)
specifier|public
specifier|static
name|void
name|validate
parameter_list|(
name|File
name|file
parameter_list|,
name|ErrorDetail
name|errorDetail
parameter_list|)
block|{
try|try
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isComponent
init|=
name|json
operator|.
name|contains
argument_list|(
literal|"\"kind\": \"component\""
argument_list|)
decl_stmt|;
name|boolean
name|isDataFormat
init|=
name|json
operator|.
name|contains
argument_list|(
literal|"\"kind\": \"dataformat\""
argument_list|)
decl_stmt|;
name|boolean
name|isLanguage
init|=
name|json
operator|.
name|contains
argument_list|(
literal|"\"kind\": \"language\""
argument_list|)
decl_stmt|;
comment|// only check these kind
if|if
condition|(
operator|!
name|isComponent
operator|&&
operator|!
name|isDataFormat
operator|&&
operator|!
name|isLanguage
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|isComponent
condition|)
block|{
name|errorDetail
operator|.
name|setKind
argument_list|(
literal|"component"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isDataFormat
condition|)
block|{
name|errorDetail
operator|.
name|setKind
argument_list|(
literal|"dataformat"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isLanguage
condition|)
block|{
name|errorDetail
operator|.
name|setKind
argument_list|(
literal|"language"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
name|errorDetail
operator|.
name|getKind
argument_list|()
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|label
init|=
literal|false
decl_stmt|;
name|boolean
name|description
init|=
literal|false
decl_stmt|;
name|boolean
name|syntax
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|String
name|value
init|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringHelper
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|label
operator|=
literal|true
expr_stmt|;
block|}
name|value
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|StringHelper
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|description
operator|=
literal|true
expr_stmt|;
block|}
name|value
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"syntax"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|StringHelper
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|syntax
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|label
condition|)
block|{
name|errorDetail
operator|.
name|setMissingLabel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|description
condition|)
block|{
name|errorDetail
operator|.
name|setMissingDescription
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|syntax
condition|)
block|{
name|errorDetail
operator|.
name|setMissingSyntax
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isComponent
condition|)
block|{
comment|// check all the component properties if they have description
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"componentProperties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|String
name|key
init|=
name|row
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|doc
init|=
name|row
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
operator|||
name|doc
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|errorDetail
operator|.
name|addMissingComponentDoc
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// check all the endpoint properties if they have description
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|path
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|String
name|key
init|=
name|row
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|doc
init|=
name|row
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
operator|||
name|doc
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|errorDetail
operator|.
name|addMissingEndpointDoc
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|String
name|kind
init|=
name|row
operator|.
name|get
argument_list|(
literal|"kind"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"path"
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
name|path
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isComponent
operator|&&
operator|!
name|path
condition|)
block|{
comment|// only components can have missing @UriPath
name|errorDetail
operator|.
name|setMissingUriPath
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|/**      * Returns the name of the component, data format or language from the given json file      */
DECL|method|asName (File file)
specifier|public
specifier|static
name|String
name|asName
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".json"
argument_list|)
condition|)
block|{
return|return
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|5
argument_list|)
return|;
block|}
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

