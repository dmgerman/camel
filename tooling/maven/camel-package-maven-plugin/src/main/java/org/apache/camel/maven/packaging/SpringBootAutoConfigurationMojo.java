begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOError
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|ComponentModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|ComponentOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|DataFormatModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|DataFormatOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|EndpointOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|LanguageModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|LanguageOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|OtherModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|OtherOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|srcgen
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|srcgen
operator|.
name|GenericType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|srcgen
operator|.
name|JavaClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|srcgen
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|srcgen
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|LifecyclePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|ResolutionScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|ConfigurableBeanFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|AutoConfigureAfter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnMissingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|DeprecatedConfigurationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|EnableConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|NestedConfigurationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Lazy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Scope
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|AbstractGeneratorMojo
operator|.
name|updateResource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|JSonSchemaHelper
operator|.
name|getPropertyDefaultValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|JSonSchemaHelper
operator|.
name|getPropertyDescriptionValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|JSonSchemaHelper
operator|.
name|getPropertyJavaType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|JSonSchemaHelper
operator|.
name|getPropertyType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|JSonSchemaHelper
operator|.
name|getSafeValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|PackageHelper
operator|.
name|loadText
import|;
end_import

begin_comment
comment|/**  * Generate Spring Boot auto configuration files for Camel components and data  * formats.  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"prepare-spring-boot-auto-configuration"
argument_list|,
name|threadSafe
operator|=
literal|true
argument_list|,
name|requiresDependencyResolution
operator|=
name|ResolutionScope
operator|.
name|COMPILE_PLUS_RUNTIME
argument_list|,
name|defaultPhase
operator|=
name|LifecyclePhase
operator|.
name|PROCESS_CLASSES
argument_list|)
DECL|class|SpringBootAutoConfigurationMojo
specifier|public
class|class
name|SpringBootAutoConfigurationMojo
extends|extends
name|AbstractMojo
block|{
comment|/**      * Useful to move configuration towards starters. Warning: the      * spring.factories files sometimes are used also on the main artifacts.      * Make sure it is not the case before enabling this property.      */
DECL|field|DELETE_FILES_ON_MAIN_ARTIFACTS
specifier|private
specifier|static
specifier|final
name|boolean
name|DELETE_FILES_ON_MAIN_ARTIFACTS
init|=
literal|false
decl_stmt|;
comment|/**      * Suffix used for generating inner classes for nested component properties,      * e.g. endpoint configuration.      */
DECL|field|INNER_TYPE_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|INNER_TYPE_SUFFIX
init|=
literal|"NestedConfiguration"
decl_stmt|;
comment|/**      * Classes to include when adding {@link NestedConfigurationProperty}      * annotations.      */
DECL|field|INCLUDE_INNER_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|INCLUDE_INNER_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"org\\.apache\\.camel\\..*"
argument_list|)
decl_stmt|;
comment|/**      * Whether to enable adding @NestedConfigurationProperty annotations to      * options. This is disabled as the generated options likely is not      * configurable as plain POJOs and there is also no documentation for each      * of the generated options.      */
DECL|field|ADD_NESTED_CONFIGURATION_PROPERTY
specifier|private
specifier|static
specifier|final
name|boolean
name|ADD_NESTED_CONFIGURATION_PROPERTY
init|=
literal|false
decl_stmt|;
DECL|field|PRIMITIVEMAP
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|PRIMITIVEMAP
decl_stmt|;
DECL|field|PRIMITIVE_CLASSES
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Type
argument_list|,
name|Type
argument_list|>
name|PRIMITIVE_CLASSES
decl_stmt|;
static|static
block|{
name|PRIMITIVE_CLASSES
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|PRIMITIVE_CLASSES
operator|.
name|put
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_CLASSES
operator|.
name|put
argument_list|(
name|char
operator|.
name|class
argument_list|,
name|Character
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_CLASSES
operator|.
name|put
argument_list|(
name|long
operator|.
name|class
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_CLASSES
operator|.
name|put
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_CLASSES
operator|.
name|put
argument_list|(
name|byte
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_CLASSES
operator|.
name|put
argument_list|(
name|short
operator|.
name|class
argument_list|,
name|Short
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_CLASSES
operator|.
name|put
argument_list|(
name|double
operator|.
name|class
argument_list|,
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_CLASSES
operator|.
name|put
argument_list|(
name|float
operator|.
name|class
argument_list|,
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"boolean"
argument_list|,
literal|"java.lang.Boolean"
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"char"
argument_list|,
literal|"java.lang.Character"
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"long"
argument_list|,
literal|"java.lang.Long"
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
literal|"java.lang.Integer"
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"integer"
argument_list|,
literal|"java.lang.Integer"
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"byte"
argument_list|,
literal|"java.lang.Byte"
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"short"
argument_list|,
literal|"java.lang.Short"
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"double"
argument_list|,
literal|"java.lang.Double"
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
literal|"java.lang.Float"
argument_list|)
expr_stmt|;
block|}
DECL|field|JAVA_LANG_TYPES
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|JAVA_LANG_TYPES
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Boolean"
argument_list|,
literal|"Byte"
argument_list|,
literal|"Character"
argument_list|,
literal|"Class"
argument_list|,
literal|"Double"
argument_list|,
literal|"Float"
argument_list|,
literal|"Integer"
argument_list|,
literal|"Long"
argument_list|,
literal|"Object"
argument_list|,
literal|"Short"
argument_list|,
literal|"String"
argument_list|)
decl_stmt|;
DECL|field|IGNORE_MODULES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|IGNORE_MODULES
init|=
block|{
comment|/* Non-standard -> */
literal|"camel-grape"
block|}
decl_stmt|;
comment|/**      * The output directory for generated component schema file      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/classes"
argument_list|)
DECL|field|classesDir
specifier|protected
name|File
name|classesDir
decl_stmt|;
comment|/**      * The maven project.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"project"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|readonly
operator|=
literal|true
argument_list|)
DECL|field|project
specifier|protected
name|MavenProject
name|project
decl_stmt|;
comment|/**      * The project build directory      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}"
argument_list|)
DECL|field|buildDir
specifier|protected
name|File
name|buildDir
decl_stmt|;
comment|/**      * The base directory      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${basedir}"
argument_list|)
DECL|field|baseDir
specifier|protected
name|File
name|baseDir
decl_stmt|;
DECL|field|projectClassLoader
name|DynamicClassLoader
name|projectClassLoader
decl_stmt|;
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
comment|// Do not generate code for ignored module
if|if
condition|(
name|Arrays
operator|.
name|asList
argument_list|(
name|IGNORE_MODULES
argument_list|)
operator|.
name|contains
argument_list|(
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Component auto-configuration will not be created: component contained in the ignore list"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Spring-boot configuration has been moved on starters
name|File
name|starterDir
init|=
name|SpringBootHelper
operator|.
name|starterDir
argument_list|(
name|baseDir
argument_list|,
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|starterDir
operator|.
name|exists
argument_list|()
operator|||
operator|!
operator|(
operator|new
name|File
argument_list|(
name|starterDir
argument_list|,
literal|"pom.xml"
argument_list|)
operator|.
name|exists
argument_list|()
operator|)
condition|)
block|{
comment|// If the starter does not exist, no configuration can be created
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Component auto-configuration will not be created: the starter does not exist"
argument_list|)
expr_stmt|;
return|return;
block|}
name|executeAll
argument_list|()
expr_stmt|;
block|}
DECL|method|executeAll ()
specifier|private
name|void
name|executeAll
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|Map
argument_list|<
name|File
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|files
init|=
name|PackageHelper
operator|.
name|findJsonFiles
argument_list|(
name|buildDir
argument_list|,
name|p
lambda|->
name|p
operator|.
name|isDirectory
argument_list|()
operator|||
name|p
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".json"
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|s
lambda|->
name|cache
argument_list|(
parameter_list|()
lambda|->
name|loadJson
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|executeModels
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|executeComponent
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|executeDataFormat
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|executeLanguage
argument_list|(
name|files
argument_list|)
expr_stmt|;
block|}
DECL|method|loadJson (File file)
specifier|private
specifier|static
name|String
name|loadJson
parameter_list|(
name|File
name|file
parameter_list|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
return|return
name|loadText
argument_list|(
name|is
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|cache (Supplier<T> supplier)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Supplier
argument_list|<
name|T
argument_list|>
name|cache
parameter_list|(
name|Supplier
argument_list|<
name|T
argument_list|>
name|supplier
parameter_list|)
block|{
return|return
operator|new
name|Supplier
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
name|T
name|value
decl_stmt|;
annotation|@
name|Override
specifier|public
name|T
name|get
parameter_list|()
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|supplier
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
block|}
return|;
block|}
DECL|method|executeModels (Map<File, Supplier<String>> files)
specifier|private
name|void
name|executeModels
parameter_list|(
name|Map
argument_list|<
name|File
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|files
parameter_list|)
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|String
name|json
decl_stmt|;
comment|// Hystrix
name|json
operator|=
name|loadModelJson
argument_list|(
name|files
argument_list|,
literal|"hystrixConfiguration"
argument_list|)
expr_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|OtherModel
name|model
init|=
name|generateOtherModel
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|pkg
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
literal|".springboot"
decl_stmt|;
comment|// Generate properties, auto-configuration happens in
comment|// camel-hystrix-starter
name|createOtherModelConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
literal|"camel.hystrix"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Consul
name|json
operator|=
name|loadModelJson
argument_list|(
name|files
argument_list|,
literal|"consulServiceDiscovery"
argument_list|)
expr_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|OtherModel
name|model
init|=
name|generateOtherModel
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|pkg
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
literal|".springboot"
decl_stmt|;
comment|// Generate properties, auto-configuration happens in
comment|// camel-consul-starter
name|createOtherModelConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
literal|"camel.cloud.consul.service-discovery"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// DNS
name|json
operator|=
name|loadModelJson
argument_list|(
name|files
argument_list|,
literal|"dnsServiceDiscovery"
argument_list|)
expr_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|OtherModel
name|model
init|=
name|generateOtherModel
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|pkg
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
literal|".springboot"
decl_stmt|;
comment|// Generate properties, auto-configuration happens in
comment|// camel-dns-starter
name|createOtherModelConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
literal|"camel.cloud.dns.service-discovery"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Etcd
name|json
operator|=
name|loadModelJson
argument_list|(
name|files
argument_list|,
literal|"etcdServiceDiscovery"
argument_list|)
expr_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|OtherModel
name|model
init|=
name|generateOtherModel
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|pkg
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
literal|".springboot"
decl_stmt|;
comment|// Generate properties, auto-configuration happens in
comment|// camel-etcd-starter
name|createOtherModelConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
literal|"camel.cloud.etcd.service-discovery"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Kubernetes
name|json
operator|=
name|loadModelJson
argument_list|(
name|files
argument_list|,
literal|"kubernetesServiceDiscovery"
argument_list|)
expr_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|OtherModel
name|model
init|=
name|generateOtherModel
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|pkg
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
literal|".springboot"
decl_stmt|;
comment|// Generate properties, auto-configuration happens in
comment|// camel-kubernetes-starter
name|createOtherModelConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
literal|"camel.cloud.kubernetes.service-discovery"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Ribbon
name|json
operator|=
name|loadModelJson
argument_list|(
name|files
argument_list|,
literal|"ribbonLoadBalancer"
argument_list|)
expr_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|OtherModel
name|model
init|=
name|generateOtherModel
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|pkg
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
literal|".springboot"
decl_stmt|;
comment|// Generate properties, auto-configuration happens in
comment|// camel-kubernetes-starter
name|createOtherModelConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
literal|"camel.cloud.ribbon.load-balancer"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Rest
name|json
operator|=
name|loadModelJson
argument_list|(
name|files
argument_list|,
literal|"restConfiguration"
argument_list|)
expr_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|OtherModel
name|model
init|=
name|generateOtherModel
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|pkg
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
literal|".springboot"
decl_stmt|;
comment|// Generate properties, auto-configuration happens in
comment|// camel-kubernetes-starter
name|createRestConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
literal|"camel.rest"
argument_list|)
expr_stmt|;
name|createRestModuleAutoConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createOtherModelConfigurationSource (String packageName, OtherModel model, String propertiesPrefix, boolean generatedNestedConfig)
specifier|private
name|void
name|createOtherModelConfigurationSource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|OtherModel
name|model
parameter_list|,
name|String
name|propertiesPrefix
parameter_list|,
name|boolean
name|generatedNestedConfig
parameter_list|)
throws|throws
name|MojoFailureException
block|{
specifier|final
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
specifier|final
name|String
name|commonName
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
operator|+
operator|(
name|generatedNestedConfig
condition|?
literal|"Common"
else|:
literal|"Properties"
operator|)
decl_stmt|;
specifier|final
name|String
name|configName
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
operator|+
operator|(
name|generatedNestedConfig
condition|?
literal|"Properties"
else|:
literal|null
operator|)
decl_stmt|;
comment|// Common base class
name|JavaClass
name|commonClass
init|=
operator|new
name|JavaClass
argument_list|(
name|getProjectClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|commonClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
name|commonClass
operator|.
name|setName
argument_list|(
name|commonName
argument_list|)
expr_stmt|;
name|String
name|doc
init|=
literal|"Generated by camel-package-maven-plugin - do not edit this file!"
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|model
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|doc
operator|=
name|model
operator|.
name|getDescription
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|doc
expr_stmt|;
block|}
name|commonClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|commonClass
operator|.
name|addAnnotation
argument_list|(
name|Generated
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"value"
argument_list|,
name|SpringBootAutoConfigurationMojo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|OtherOptionModel
name|option
range|:
name|model
operator|.
name|getOptions
argument_list|()
control|)
block|{
name|String
name|type
init|=
name|option
operator|.
name|getJavaType
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|option
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"id"
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
operator|||
literal|"parent"
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
operator|||
literal|"camelContext"
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// Skip them as they should not be set via spring boot
continue|continue;
block|}
if|if
condition|(
literal|"java.util.List<org.apache.camel.model.PropertyDefinition>"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|type
operator|=
literal|"java.util.Map<java.lang.String, java.lang.String>"
expr_stmt|;
block|}
comment|// generate inner class for non-primitive options
name|Property
name|prop
init|=
name|commonClass
operator|.
name|addProperty
argument_list|(
name|type
argument_list|,
name|option
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"java.lang.String"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setStringInitializer
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
literal|"java.lang.Long"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// the value should be a Long number
name|String
name|value
init|=
name|option
operator|.
name|getDefaultValue
argument_list|()
operator|+
literal|"L"
decl_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"integer"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"boolean"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getEnums
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|enumShortName
init|=
name|type
operator|.
name|substring
argument_list|(
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|enumShortName
operator|+
literal|"."
operator|+
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
name|commonClass
operator|.
name|addImport
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|writeSourceIfChanged
argument_list|(
name|commonClass
argument_list|,
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|commonName
operator|+
literal|".java"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Class
name|commonClazz
init|=
name|generateDummyClass
argument_list|(
name|commonClass
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Config class
if|if
condition|(
name|generatedNestedConfig
condition|)
block|{
name|JavaClass
name|configClass
init|=
operator|new
name|JavaClass
argument_list|(
name|getProjectClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|configClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
name|configClass
operator|.
name|setName
argument_list|(
name|configName
argument_list|)
expr_stmt|;
name|configClass
operator|.
name|extendSuperType
argument_list|(
name|commonClass
argument_list|)
expr_stmt|;
name|configClass
operator|.
name|addAnnotation
argument_list|(
name|Generated
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"value"
argument_list|,
name|SpringBootAutoConfigurationMojo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|configClass
operator|.
name|addAnnotation
argument_list|(
name|loadClass
argument_list|(
literal|"org.springframework.boot.context.properties.ConfigurationProperties"
argument_list|)
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"prefix"
argument_list|,
name|propertiesPrefix
argument_list|)
expr_stmt|;
name|configClass
operator|.
name|addImport
argument_list|(
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|configClass
operator|.
name|addImport
argument_list|(
name|HashMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|configClass
operator|.
name|removeImport
argument_list|(
name|commonClass
argument_list|)
expr_stmt|;
name|configClass
operator|.
name|addField
argument_list|()
operator|.
name|setName
argument_list|(
literal|"enabled"
argument_list|)
operator|.
name|setType
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
operator|.
name|setPrivate
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
literal|"true"
argument_list|)
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
literal|"Enable the component"
argument_list|)
expr_stmt|;
name|configClass
operator|.
name|addField
argument_list|()
operator|.
name|setName
argument_list|(
literal|"configurations"
argument_list|)
operator|.
name|setType
argument_list|(
name|loadType
argument_list|(
literal|"java.util.Map<java.lang.String, "
operator|+
name|packageName
operator|+
literal|"."
operator|+
name|commonName
operator|+
literal|">"
argument_list|)
argument_list|)
operator|.
name|setPrivate
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
literal|"new HashMap<>()"
argument_list|)
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
literal|"Define additional configuration definitions"
argument_list|)
expr_stmt|;
name|Method
name|method
decl_stmt|;
name|method
operator|=
name|configClass
operator|.
name|addMethod
argument_list|()
expr_stmt|;
name|method
operator|.
name|setName
argument_list|(
literal|"getConfigurations"
argument_list|)
expr_stmt|;
name|method
operator|.
name|setReturnType
argument_list|(
name|loadType
argument_list|(
literal|"java.util.Map<java.lang.String, "
operator|+
name|packageName
operator|+
literal|"."
operator|+
name|commonName
operator|+
literal|">"
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setPublic
argument_list|()
expr_stmt|;
name|method
operator|.
name|setBody
argument_list|(
literal|"return configurations;"
argument_list|)
expr_stmt|;
name|method
operator|=
name|configClass
operator|.
name|addMethod
argument_list|()
expr_stmt|;
name|method
operator|.
name|setName
argument_list|(
literal|"isEnabled"
argument_list|)
expr_stmt|;
name|method
operator|.
name|setReturnType
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|method
operator|.
name|setPublic
argument_list|()
expr_stmt|;
name|method
operator|.
name|setBody
argument_list|(
literal|"return enabled;"
argument_list|)
expr_stmt|;
name|method
operator|=
name|configClass
operator|.
name|addMethod
argument_list|()
expr_stmt|;
name|method
operator|.
name|setName
argument_list|(
literal|"setEnabled"
argument_list|)
expr_stmt|;
name|method
operator|.
name|addParameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"enabled"
argument_list|)
expr_stmt|;
name|method
operator|.
name|setPublic
argument_list|()
expr_stmt|;
name|method
operator|.
name|setBody
argument_list|(
literal|"this.enabled = enabled;"
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|configName
operator|+
literal|".java"
decl_stmt|;
name|writeSourceIfChanged
argument_list|(
name|configClass
argument_list|,
name|fileName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createRestConfigurationSource (String packageName, OtherModel model, String propertiesPrefix)
specifier|private
name|void
name|createRestConfigurationSource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|OtherModel
name|model
parameter_list|,
name|String
name|propertiesPrefix
parameter_list|)
throws|throws
name|MojoFailureException
block|{
specifier|final
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
specifier|final
name|String
name|className
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
operator|+
literal|"Properties"
decl_stmt|;
name|generateDummyClass
argument_list|(
name|packageName
operator|+
literal|"."
operator|+
name|className
argument_list|)
expr_stmt|;
comment|// Common base class
name|JavaClass
name|javaClass
init|=
operator|new
name|JavaClass
argument_list|(
name|getProjectClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|javaClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|setName
argument_list|(
name|className
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Generated
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"value"
argument_list|,
name|SpringBootAutoConfigurationMojo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
literal|"org.springframework.boot.context.properties.ConfigurationProperties"
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"prefix"
argument_list|,
name|propertiesPrefix
argument_list|)
expr_stmt|;
name|String
name|doc
init|=
literal|"Generated by camel-package-maven-plugin - do not edit this file!"
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|model
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|doc
operator|=
name|model
operator|.
name|getDescription
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|doc
expr_stmt|;
block|}
name|javaClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|doc
argument_list|)
expr_stmt|;
for|for
control|(
name|OtherOptionModel
name|option
range|:
name|model
operator|.
name|getOptions
argument_list|()
control|)
block|{
name|String
name|type
init|=
name|option
operator|.
name|getJavaType
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|option
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"id"
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
operator|||
literal|"parent"
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
operator|||
literal|"camelContext"
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// Skip them as they should not be set via spring boot
continue|continue;
block|}
if|if
condition|(
literal|"java.util.List<org.apache.camel.model.PropertyDefinition>"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|type
operator|=
literal|"java.util.Map<java.lang.String, java.lang.String>"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"java.util.List<org.apache.camel.model.rest.RestPropertyDefinition>"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|type
operator|=
literal|"java.util.Map<java.lang.String, java.lang.Object>"
expr_stmt|;
block|}
comment|// to avoid ugly names such as c-o-r-s
if|if
condition|(
literal|"enableCORS"
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
literal|"enableCors"
expr_stmt|;
block|}
comment|// generate inner class for non-primitive options
name|Property
name|prop
init|=
name|javaClass
operator|.
name|addProperty
argument_list|(
name|type
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"java.lang.String"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setStringInitializer
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
literal|"java.lang.Long"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// the value should be a Long number
name|String
name|value
init|=
name|option
operator|.
name|getDefaultValue
argument_list|()
operator|+
literal|"L"
decl_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"integer"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"boolean"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getEnums
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|enumShortName
init|=
name|type
operator|.
name|substring
argument_list|(
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|enumShortName
operator|+
literal|"."
operator|+
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|fileName
init|=
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|className
operator|+
literal|".java"
decl_stmt|;
name|writeSourceIfChanged
argument_list|(
name|javaClass
argument_list|,
name|fileName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|createRestModuleAutoConfigurationSource (String packageName, OtherModel model)
specifier|private
name|void
name|createRestModuleAutoConfigurationSource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|OtherModel
name|model
parameter_list|)
throws|throws
name|MojoFailureException
block|{
specifier|final
name|JavaClass
name|javaClass
init|=
operator|new
name|JavaClass
argument_list|(
name|getProjectClassLoader
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
operator|+
literal|"AutoConfiguration"
decl_stmt|;
specifier|final
name|String
name|configType
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
operator|+
literal|"Properties"
decl_stmt|;
name|javaClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|String
name|doc
init|=
literal|"Generated by camel-package-maven-plugin - do not edit this file!"
decl_stmt|;
name|javaClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Generated
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"value"
argument_list|,
name|SpringBootAutoConfigurationMojo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnBean
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"type"
argument_list|,
literal|"org.apache.camel.spring.boot.CamelAutoConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnProperty
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"name"
argument_list|,
literal|"camel.rest.enabled"
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"matchIfMissing"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|AutoConfigureAfter
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"name"
argument_list|,
literal|"org.apache.camel.spring.boot.CamelAutoConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|EnableConfigurationProperties
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"value"
argument_list|,
name|configType
operator|+
literal|".class"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"java.util.Map"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"java.util.HashMap"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.util.CollectionHelper"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.support.IntrospectionSupport"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.util.CamelPropertiesHelper"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.CamelContext"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.model.rest.RestConstants"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spi.RestConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setName
argument_list|(
literal|"camelContext"
argument_list|)
operator|.
name|setType
argument_list|(
name|loadClass
argument_list|(
literal|"org.apache.camel.CamelContext"
argument_list|)
argument_list|)
operator|.
name|setPrivate
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Autowired
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setName
argument_list|(
literal|"config"
argument_list|)
operator|.
name|setType
argument_list|(
name|loadClass
argument_list|(
name|packageName
operator|+
literal|"."
operator|+
name|configType
argument_list|)
argument_list|)
operator|.
name|setPrivate
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Autowired
operator|.
name|class
argument_list|)
expr_stmt|;
name|Method
name|method
decl_stmt|;
comment|// Configuration
name|method
operator|=
name|javaClass
operator|.
name|addMethod
argument_list|()
expr_stmt|;
name|method
operator|.
name|setName
argument_list|(
literal|"configure"
operator|+
name|model
operator|.
name|getShortJavaType
argument_list|()
argument_list|)
expr_stmt|;
name|method
operator|.
name|setPublic
argument_list|()
expr_stmt|;
name|method
operator|.
name|addThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
name|method
operator|.
name|setReturnType
argument_list|(
name|loadClass
argument_list|(
literal|"org.apache.camel.spi.RestConfiguration"
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|Lazy
operator|.
name|class
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|Bean
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"name"
argument_list|,
literal|"RestConstants.DEFAULT_REST_CONFIGURATION_ID"
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnClass
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"value"
argument_list|,
literal|"CamelContext.class"
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnMissingBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|method
operator|.
name|setBody
argument_list|(
literal|""
operator|+
literal|"Map<String, Object> properties = new HashMap<>();\n"
operator|+
literal|"IntrospectionSupport.getProperties(config, properties, null, false);\n"
operator|+
literal|"// These options is configured specially further below, so remove them first\n"
operator|+
literal|"properties.remove(\"enableCors\");\n"
operator|+
literal|"properties.remove(\"apiProperty\");\n"
operator|+
literal|"properties.remove(\"componentProperty\");\n"
operator|+
literal|"properties.remove(\"consumerProperty\");\n"
operator|+
literal|"properties.remove(\"dataFormatProperty\");\n"
operator|+
literal|"properties.remove(\"endpointProperty\");\n"
operator|+
literal|"properties.remove(\"corsHeaders\");\n"
operator|+
literal|"\n"
operator|+
literal|"RestConfiguration definition = new RestConfiguration();\n"
operator|+
literal|"CamelPropertiesHelper.setCamelProperties(camelContext, definition, properties, true);\n"
operator|+
literal|"\n"
operator|+
literal|"// Workaround for spring-boot properties name as It would appear\n"
operator|+
literal|"// as enable-c-o-r-s if left uppercase in Configuration\n"
operator|+
literal|"definition.setEnableCORS(config.getEnableCors());\n"
operator|+
literal|"\n"
operator|+
literal|"if (config.getApiProperty() != null) {\n"
operator|+
literal|"    definition.setApiProperties(new HashMap<>(CollectionHelper.flattenKeysInMap(config.getApiProperty(), \".\")));\n"
operator|+
literal|"}\n"
operator|+
literal|"if (config.getComponentProperty() != null) {\n"
operator|+
literal|"    definition.setComponentProperties(new HashMap<>(CollectionHelper.flattenKeysInMap(config.getComponentProperty(), \".\")));\n"
operator|+
literal|"}\n"
operator|+
literal|"if (config.getConsumerProperty() != null) {\n"
operator|+
literal|"    definition.setConsumerProperties(new HashMap<>(CollectionHelper.flattenKeysInMap(config.getConsumerProperty(), \".\")));\n"
operator|+
literal|"}\n"
operator|+
literal|"if (config.getDataFormatProperty() != null) {\n"
operator|+
literal|"    definition.setDataFormatProperties(new HashMap<>(CollectionHelper.flattenKeysInMap(config.getDataFormatProperty(), \".\")));\n"
operator|+
literal|"}\n"
operator|+
literal|"if (config.getEndpointProperty() != null) {\n"
operator|+
literal|"    definition.setEndpointProperties(new HashMap<>(CollectionHelper.flattenKeysInMap(config.getEndpointProperty(), \".\")));\n"
operator|+
literal|"}\n"
operator|+
literal|"if (config.getCorsHeaders() != null) {\n"
operator|+
literal|"    Map<String, Object> map = CollectionHelper.flattenKeysInMap(config.getCorsHeaders(), \".\");\n"
operator|+
literal|"    Map<String, String> target = new HashMap<>();\n"
operator|+
literal|"    map.forEach((k, v) -> target.put(k, v.toString()));\n"
operator|+
literal|"    definition.setCorsHeaders(target);\n"
operator|+
literal|"}\n"
operator|+
literal|"return definition;"
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".java"
decl_stmt|;
name|writeSourceIfChanged
argument_list|(
name|javaClass
argument_list|,
name|fileName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writeComponentSpringFactorySource
argument_list|(
name|packageName
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|executeComponent (Map<File, Supplier<String>> jsonFiles)
specifier|private
name|void
name|executeComponent
parameter_list|(
name|Map
argument_list|<
name|File
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|jsonFiles
parameter_list|)
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
comment|// find the component names
name|Set
argument_list|<
name|String
argument_list|>
name|componentNames
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|findComponentNames
argument_list|(
name|buildDir
argument_list|,
name|componentNames
argument_list|)
expr_stmt|;
comment|// create auto configuration for the components
if|if
condition|(
operator|!
name|componentNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|componentNames
operator|.
name|size
argument_list|()
operator|+
literal|" components"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ComponentModel
argument_list|>
name|allModels
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|componentName
range|:
name|componentNames
control|)
block|{
name|String
name|json
init|=
name|loadComponentJson
argument_list|(
name|jsonFiles
argument_list|,
name|componentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|ComponentModel
name|model
init|=
name|generateComponentModel
argument_list|(
name|componentName
argument_list|,
name|json
argument_list|)
decl_stmt|;
name|allModels
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Group the models by implementing classes
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ComponentModel
argument_list|>
argument_list|>
name|grModels
init|=
name|allModels
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|ComponentModel
operator|::
name|getJavaType
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|componentClass
range|:
name|grModels
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ComponentModel
argument_list|>
name|compModels
init|=
name|grModels
operator|.
name|get
argument_list|(
name|componentClass
argument_list|)
decl_stmt|;
name|ComponentModel
name|model
init|=
name|compModels
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// They should be
comment|// equivalent
name|List
argument_list|<
name|String
argument_list|>
name|aliases
init|=
name|compModels
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ComponentModel
operator|::
name|getScheme
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
comment|// resolvePropertyPlaceholders is an option which only make
comment|// sense to use if the component has other options
comment|// boolean hasOptions =
comment|// model.getComponentOptions().stream().anyMatch(o ->
comment|// !o.getName().equals("resolvePropertyPlaceholders"));
comment|// use springboot as sub package name so the code is not in
comment|// normal
comment|// package so the Spring Boot JARs can be optional at runtime
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|pkg
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
literal|".springboot"
decl_stmt|;
name|String
name|overrideComponentName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|aliases
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// determine component name when there are multiple ones
name|overrideComponentName
operator|=
name|model
operator|.
name|getArtifactId
argument_list|()
operator|.
name|replace
argument_list|(
literal|"camel-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|createComponentConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
name|overrideComponentName
argument_list|)
expr_stmt|;
name|createComponentAutoConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
name|aliases
argument_list|,
name|overrideComponentName
argument_list|)
expr_stmt|;
name|createComponentSpringFactorySource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|executeDataFormat (Map<File, Supplier<String>> jsonFiles)
specifier|private
name|void
name|executeDataFormat
parameter_list|(
name|Map
argument_list|<
name|File
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|jsonFiles
parameter_list|)
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
comment|// find the data format names
name|List
argument_list|<
name|String
argument_list|>
name|dataFormatNames
init|=
name|findDataFormatNames
argument_list|()
decl_stmt|;
comment|// create auto configuration for the data formats
if|if
condition|(
operator|!
name|dataFormatNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|dataFormatNames
operator|.
name|size
argument_list|()
operator|+
literal|" dataformats"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DataFormatModel
argument_list|>
name|allModels
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dataFormatName
range|:
name|dataFormatNames
control|)
block|{
name|String
name|json
init|=
name|loadDataFormatJson
argument_list|(
name|jsonFiles
argument_list|,
name|dataFormatName
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|DataFormatModel
name|model
init|=
name|generateDataFormatModel
argument_list|(
name|dataFormatName
argument_list|,
name|json
argument_list|)
decl_stmt|;
name|allModels
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Group the models by implementing classes
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DataFormatModel
argument_list|>
argument_list|>
name|grModels
init|=
name|allModels
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|DataFormatModel
operator|::
name|getJavaType
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|dataFormatClass
range|:
name|grModels
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|DataFormatModel
argument_list|>
name|dfModels
init|=
name|grModels
operator|.
name|get
argument_list|(
name|dataFormatClass
argument_list|)
decl_stmt|;
name|DataFormatModel
name|model
init|=
name|dfModels
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// They should be
comment|// equivalent
name|List
argument_list|<
name|String
argument_list|>
name|aliases
init|=
name|dfModels
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|DataFormatModel
operator|::
name|getName
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
comment|// use springboot as sub package name so the code is not in
comment|// normal
comment|// package so the Spring Boot JARs can be optional at runtime
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|pkg
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
literal|".springboot"
decl_stmt|;
name|String
name|overrideDataFormatName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|aliases
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// determine component name when there are multiple ones
name|overrideDataFormatName
operator|=
name|model
operator|.
name|getArtifactId
argument_list|()
operator|.
name|replace
argument_list|(
literal|"camel-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|createDataFormatConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
name|overrideDataFormatName
argument_list|)
expr_stmt|;
name|createDataFormatAutoConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
name|aliases
argument_list|,
name|overrideDataFormatName
argument_list|)
expr_stmt|;
name|createDataFormatSpringFactorySource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|executeLanguage (Map<File, Supplier<String>> jsonFiles)
specifier|private
name|void
name|executeLanguage
parameter_list|(
name|Map
argument_list|<
name|File
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|jsonFiles
parameter_list|)
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
comment|// find the language names
name|List
argument_list|<
name|String
argument_list|>
name|languageNames
init|=
name|findLanguageNames
argument_list|()
decl_stmt|;
comment|// create auto configuration for the languages
if|if
condition|(
operator|!
name|languageNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|languageNames
operator|.
name|size
argument_list|()
operator|+
literal|" languages"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LanguageModel
argument_list|>
name|allModels
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|languageName
range|:
name|languageNames
control|)
block|{
name|String
name|json
init|=
name|loadLanguageJson
argument_list|(
name|jsonFiles
argument_list|,
name|languageName
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|LanguageModel
name|model
init|=
name|generateLanguageModel
argument_list|(
name|languageName
argument_list|,
name|json
argument_list|)
decl_stmt|;
name|allModels
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Group the models by implementing classes
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|LanguageModel
argument_list|>
argument_list|>
name|grModels
init|=
name|allModels
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|LanguageModel
operator|::
name|getJavaType
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|languageClass
range|:
name|grModels
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|LanguageModel
argument_list|>
name|dfModels
init|=
name|grModels
operator|.
name|get
argument_list|(
name|languageClass
argument_list|)
decl_stmt|;
name|LanguageModel
name|model
init|=
name|dfModels
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// They should be
comment|// equivalent
name|List
argument_list|<
name|String
argument_list|>
name|aliases
init|=
name|dfModels
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|LanguageModel
operator|::
name|getName
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
comment|// use springboot as sub package name so the code is not in
comment|// normal
comment|// package so the Spring Boot JARs can be optional at runtime
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|pkg
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
literal|".springboot"
decl_stmt|;
name|String
name|overrideLanguageName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|aliases
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// determine language name when there are multiple ones
name|overrideLanguageName
operator|=
name|model
operator|.
name|getArtifactId
argument_list|()
operator|.
name|replace
argument_list|(
literal|"camel-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|createLanguageConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
name|overrideLanguageName
argument_list|)
expr_stmt|;
name|createLanguageAutoConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
name|aliases
argument_list|,
name|overrideLanguageName
argument_list|)
expr_stmt|;
name|createLanguageSpringFactorySource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createComponentConfigurationSource (String packageName, ComponentModel model, String overrideComponentName)
specifier|private
name|void
name|createComponentConfigurationSource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|ComponentModel
name|model
parameter_list|,
name|String
name|overrideComponentName
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"Component"
argument_list|,
literal|"ComponentConfiguration"
argument_list|)
expr_stmt|;
specifier|final
name|JavaClass
name|javaClass
init|=
operator|new
name|JavaClass
argument_list|(
name|getProjectClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|javaClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|extendSuperType
argument_list|(
literal|"ComponentConfigurationPropertiesCommon"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon"
argument_list|)
expr_stmt|;
comment|// add bogus field for enabled so spring boot tooling can get the
comment|// javadoc as description in its metadata
name|Property
name|bogus
init|=
name|javaClass
operator|.
name|addProperty
argument_list|(
literal|"java.lang.Boolean"
argument_list|,
literal|"enabled"
argument_list|)
decl_stmt|;
name|String
name|scheme
init|=
name|overrideComponentName
operator|!=
literal|null
condition|?
name|overrideComponentName
else|:
name|model
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|bogus
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setText
argument_list|(
literal|"Whether to enable auto configuration of the "
operator|+
name|scheme
operator|+
literal|" component. This is enabled by default."
argument_list|)
expr_stmt|;
name|bogus
operator|.
name|removeAccessor
argument_list|()
expr_stmt|;
name|bogus
operator|.
name|removeMutator
argument_list|()
expr_stmt|;
name|String
name|doc
init|=
literal|"Generated by camel-package-maven-plugin - do not edit this file!"
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|model
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|doc
operator|=
name|model
operator|.
name|getDescription
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|doc
expr_stmt|;
block|}
name|javaClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setText
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
literal|"camel.component."
operator|+
operator|(
name|overrideComponentName
operator|!=
literal|null
condition|?
name|overrideComponentName
else|:
name|model
operator|.
name|getScheme
argument_list|()
operator|)
decl_stmt|;
comment|// make sure prefix is in lower case
name|prefix
operator|=
name|prefix
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Generated
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"value"
argument_list|,
name|SpringBootAutoConfigurationMojo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
literal|"org.springframework.boot.context.properties.ConfigurationProperties"
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"prefix"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|JavaClass
argument_list|>
name|nestedTypes
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ComponentOptionModel
name|option
range|:
name|model
operator|.
name|getComponentOptions
argument_list|()
control|)
block|{
if|if
condition|(
name|skipComponentOption
argument_list|(
name|model
argument_list|,
name|option
argument_list|)
condition|)
block|{
comment|// some component options should be skipped
continue|continue;
block|}
name|String
name|type
init|=
name|option
operator|.
name|getJavaType
argument_list|()
decl_stmt|;
comment|// generate inner class for non-primitive options
name|type
operator|=
name|getSimpleJavaType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|JavaClass
name|javaClassSource
init|=
name|readJavaType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|boolean
name|isNestedProperty
init|=
name|isNestedProperty
argument_list|(
name|nestedTypes
argument_list|,
name|javaClassSource
argument_list|)
operator|||
literal|"org.apache.camel.converter.jaxp.XmlConverter"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNestedProperty
condition|)
block|{
name|type
operator|=
name|packageName
operator|+
literal|"."
operator|+
name|name
operator|+
literal|"$"
operator|+
name|option
operator|.
name|getShortJavaType
argument_list|()
operator|+
name|INNER_TYPE_SUFFIX
expr_stmt|;
block|}
comment|// spring-boot auto configuration does not support complex types
comment|// (unless they are enum, nested)
comment|// and if so then we should use a String type so spring-boot and its
comment|// tooling support that
comment|// as Camel will be able to convert the string value into a lookup
comment|// of the bean in the registry anyway
comment|// and therefore there is no problem, eg
comment|// camel.component.jdbc.data-source = myDataSource
comment|// where the type would have been javax.sql.DataSource
name|boolean
name|complex
init|=
name|isComplexType
argument_list|(
name|option
argument_list|)
operator|&&
operator|!
name|isNestedProperty
operator|&&
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getEnums
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|complex
condition|)
block|{
comment|// force to use a string type
name|type
operator|=
literal|"java.lang.String"
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|packageName
operator|+
literal|"."
operator|+
name|name
operator|+
literal|"$"
operator|+
name|option
operator|.
name|getShortJavaType
argument_list|()
operator|+
name|INNER_TYPE_SUFFIX
argument_list|)
condition|)
block|{
name|Class
name|configClass
init|=
name|generateDummyClass
argument_list|(
name|type
argument_list|)
decl_stmt|;
block|}
name|Property
name|prop
init|=
name|javaClass
operator|.
name|addProperty
argument_list|(
name|type
argument_list|,
name|option
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ADD_NESTED_CONFIGURATION_PROPERTY
condition|)
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|endsWith
argument_list|(
name|INNER_TYPE_SUFFIX
argument_list|)
operator|&&
name|type
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|INCLUDE_INNER_PATTERN
operator|.
name|matcher
argument_list|(
name|type
argument_list|)
operator|.
name|matches
argument_list|()
operator|&&
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getEnums
argument_list|()
argument_list|)
operator|&&
operator|(
name|javaClassSource
operator|==
literal|null
operator|||
operator|(
name|javaClassSource
operator|.
name|isClass
argument_list|()
operator|&&
operator|!
name|javaClassSource
operator|.
name|isAbstract
argument_list|()
operator|)
operator|)
condition|)
block|{
comment|// add nested configuration annotation for complex
comment|// properties
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|NestedConfigurationProperty
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getDeprecated
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getAccessor
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getMutator
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// DeprecatedConfigurationProperty must be on getter when
comment|// deprecated
name|prop
operator|.
name|getAccessor
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|DeprecatedConfigurationProperty
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|desc
init|=
name|option
operator|.
name|getDescription
argument_list|()
decl_stmt|;
if|if
condition|(
name|complex
condition|)
block|{
if|if
condition|(
operator|!
name|desc
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|desc
operator|=
name|desc
operator|+
literal|"."
expr_stmt|;
block|}
name|desc
operator|=
name|desc
operator|+
literal|" The option is a "
operator|+
name|option
operator|.
name|getJavaType
argument_list|()
operator|+
literal|" type."
expr_stmt|;
block|}
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"java.lang.String"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getJavaType
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setStringInitializer
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getJavaType
argument_list|()
argument_list|)
operator|||
literal|"java.lang.Long"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getJavaType
argument_list|()
argument_list|)
condition|)
block|{
comment|// the value should be a Long number
name|String
name|value
init|=
name|option
operator|.
name|getDefaultValue
argument_list|()
operator|+
literal|"L"
decl_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"integer"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"boolean"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getEnums
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|enumShortName
init|=
name|type
operator|.
name|substring
argument_list|(
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|enumShortName
operator|+
literal|"."
operator|+
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|createComponentConfigurationSourceInnerClass
argument_list|(
name|javaClass
argument_list|,
name|nestedTypes
argument_list|,
name|model
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".java"
decl_stmt|;
name|writeSourceIfChanged
argument_list|(
name|javaClass
argument_list|,
name|fileName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|createComponentConfigurationSourceInnerClass (JavaClass javaClass, Set<JavaClass> nestedTypes, ComponentModel model)
specifier|private
name|void
name|createComponentConfigurationSourceInnerClass
parameter_list|(
name|JavaClass
name|javaClass
parameter_list|,
name|Set
argument_list|<
name|JavaClass
argument_list|>
name|nestedTypes
parameter_list|,
name|ComponentModel
name|model
parameter_list|)
throws|throws
name|MojoFailureException
block|{
comment|// add inner classes for nested AutoConfiguration options
for|for
control|(
name|JavaClass
name|nestedType
range|:
name|nestedTypes
control|)
block|{
specifier|final
name|JavaClass
name|innerClass
init|=
name|javaClass
operator|.
name|addNestedType
argument_list|()
operator|.
name|setPublic
argument_list|()
operator|.
name|setStatic
argument_list|(
literal|true
argument_list|)
operator|.
name|setName
argument_list|(
name|nestedType
operator|.
name|getName
argument_list|()
operator|+
name|INNER_TYPE_SUFFIX
argument_list|)
decl_stmt|;
comment|// add source class name as a static field
name|innerClass
operator|.
name|addField
argument_list|()
operator|.
name|setPublic
argument_list|()
operator|.
name|setStatic
argument_list|(
literal|true
argument_list|)
operator|.
name|setFinal
argument_list|(
literal|true
argument_list|)
operator|.
name|setType
argument_list|(
name|Class
operator|.
name|class
argument_list|)
operator|.
name|setName
argument_list|(
literal|"CAMEL_NESTED_CLASS"
argument_list|)
operator|.
name|setLiteralInitializer
argument_list|(
name|nestedType
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|".class"
argument_list|)
expr_stmt|;
comment|// parse option type
for|for
control|(
name|Property
name|sourceProp
range|:
name|getProperties
argument_list|(
name|nestedType
argument_list|)
control|)
block|{
name|GenericType
name|propType
init|=
name|sourceProp
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// skip these types
name|boolean
name|ignore
init|=
name|sourceProp
operator|.
name|hasAnnotation
argument_list|(
name|XmlTransient
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ignore
operator|||
name|propType
operator|.
name|getRawClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"org.apache.camel.CamelContext"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|wt
init|=
name|PRIMITIVEMAP
operator|.
name|get
argument_list|(
name|propType
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|GenericType
name|ptype
init|=
name|wt
operator|!=
literal|null
condition|?
name|loadType
argument_list|(
name|wt
argument_list|)
else|:
name|propType
decl_stmt|;
specifier|final
name|Property
name|prop
init|=
name|innerClass
operator|.
name|addProperty
argument_list|(
name|ptype
argument_list|,
name|sourceProp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceProp
operator|.
name|getField
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setText
argument_list|(
name|sourceProp
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|sourceProp
operator|.
name|getField
argument_list|()
operator|.
name|getLiteralInitializer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ComponentOptionModel
name|com
init|=
name|model
operator|.
name|getComponentOptions
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|o
lambda|->
name|o
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|sourceProp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|EndpointOptionModel
name|eom
init|=
name|Stream
operator|.
name|concat
argument_list|(
name|model
operator|.
name|getEndpointOptions
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|,
name|model
operator|.
name|getEndpointPathOptions
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|o
lambda|->
name|o
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|sourceProp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|String
name|deprecationNote
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|eom
operator|!=
literal|null
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setText
argument_list|(
name|eom
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|asLiteralDefault
argument_list|(
name|sourceProp
operator|.
name|getType
argument_list|()
argument_list|,
name|eom
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|deprecationNote
operator|=
name|eom
operator|.
name|getDeprecationNote
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|com
operator|!=
literal|null
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setText
argument_list|(
name|com
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|asLiteralDefault
argument_list|(
name|sourceProp
operator|.
name|getType
argument_list|()
argument_list|,
name|com
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|deprecationNote
operator|=
name|com
operator|.
name|getDeprecationNote
argument_list|()
expr_stmt|;
block|}
name|boolean
name|anEnum
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|optionClass
decl_stmt|;
if|if
condition|(
operator|!
name|propType
operator|.
name|getRawClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|optionClass
operator|=
name|propType
operator|.
name|getRawClass
argument_list|()
expr_stmt|;
name|anEnum
operator|=
name|optionClass
operator|.
name|isEnum
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|optionClass
operator|=
literal|null
expr_stmt|;
name|anEnum
operator|=
literal|false
expr_stmt|;
block|}
comment|// add nested configuration annotation for complex properties
if|if
condition|(
name|ADD_NESTED_CONFIGURATION_PROPERTY
condition|)
block|{
if|if
condition|(
name|INCLUDE_INNER_PATTERN
operator|.
name|matcher
argument_list|(
name|propType
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
operator|&&
operator|!
name|propType
operator|.
name|getRawClass
argument_list|()
operator|.
name|isArray
argument_list|()
operator|&&
operator|!
name|anEnum
operator|&&
name|optionClass
operator|!=
literal|null
operator|&&
operator|!
name|optionClass
operator|.
name|isInterface
argument_list|()
operator|&&
operator|!
name|optionClass
operator|.
name|isAnnotation
argument_list|()
operator|&&
operator|!
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|optionClass
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|NestedConfigurationProperty
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sourceProp
operator|.
name|hasAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
condition|)
block|{
if|if
condition|(
name|deprecationNote
operator|!=
literal|null
operator|&&
operator|!
name|deprecationNote
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|jd
init|=
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|jd
operator|!=
literal|null
condition|)
block|{
name|jd
operator|+=
literal|"\n\n"
expr_stmt|;
block|}
else|else
block|{
name|jd
operator|=
literal|""
expr_stmt|;
block|}
name|jd
operator|=
literal|"@deprecated "
operator|+
name|deprecationNote
expr_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setText
argument_list|(
name|jd
argument_list|)
expr_stmt|;
block|}
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getAccessor
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getMutator
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// DeprecatedConfigurationProperty must be on getter when
comment|// deprecated
name|prop
operator|.
name|getAccessor
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|DeprecatedConfigurationProperty
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// find description for the nested type on its field/setter
comment|// javadoc or via Camel annotations
name|String
name|description
init|=
literal|null
decl_stmt|;
specifier|final
name|Method
name|mutator
init|=
name|sourceProp
operator|.
name|getMutator
argument_list|()
decl_stmt|;
if|if
condition|(
name|mutator
operator|.
name|hasJavaDoc
argument_list|()
condition|)
block|{
name|description
operator|=
name|mutator
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|getFullText
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sourceProp
operator|.
name|hasField
argument_list|()
condition|)
block|{
name|description
operator|=
name|sourceProp
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|getFullText
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|Strings
operator|.
name|isBlank
argument_list|(
name|description
argument_list|)
operator|&&
name|sourceProp
operator|.
name|hasAnnotation
argument_list|(
name|UriPath
operator|.
name|class
argument_list|)
condition|)
block|{
name|description
operator|=
name|sourceProp
operator|.
name|getAnnotation
argument_list|(
name|UriPath
operator|.
name|class
argument_list|)
operator|.
name|getStringValue
argument_list|(
literal|"description"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Strings
operator|.
name|isBlank
argument_list|(
name|description
argument_list|)
operator|&&
name|sourceProp
operator|.
name|hasAnnotation
argument_list|(
name|UriParam
operator|.
name|class
argument_list|)
condition|)
block|{
name|description
operator|=
name|sourceProp
operator|.
name|getAnnotation
argument_list|(
name|UriParam
operator|.
name|class
argument_list|)
operator|.
name|getStringValue
argument_list|(
literal|"description"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Strings
operator|.
name|isBlank
argument_list|(
name|description
argument_list|)
operator|&&
name|sourceProp
operator|.
name|hasAnnotation
argument_list|(
name|Metadata
operator|.
name|class
argument_list|)
condition|)
block|{
name|description
operator|=
name|sourceProp
operator|.
name|getAnnotation
argument_list|(
name|Metadata
operator|.
name|class
argument_list|)
operator|.
name|getStringValue
argument_list|(
literal|"description"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|description
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|description
argument_list|)
expr_stmt|;
block|}
comment|// try to see if the source is actually reusing a shared Camel
comment|// configuration that that has @UriParam options
comment|// if so we can fetch the default value from the json file as it
comment|// holds the correct value vs the annotation
comment|// as the annotation can refer to a constant field which we wont
comment|// have accessible at this point
if|if
condition|(
name|sourceProp
operator|.
name|hasAnnotation
argument_list|(
name|UriParam
operator|.
name|class
argument_list|)
operator|||
name|sourceProp
operator|.
name|hasAnnotation
argument_list|(
name|UriPath
operator|.
name|class
argument_list|)
condition|)
block|{
name|String
name|defaultValue
init|=
literal|null
decl_stmt|;
name|String
name|javaType
init|=
literal|null
decl_stmt|;
name|String
name|type
init|=
literal|null
decl_stmt|;
name|String
name|fileName
init|=
name|model
operator|.
name|getJavaType
argument_list|()
decl_stmt|;
name|fileName
operator|=
name|fileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|fileName
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|File
name|jsonFile
init|=
operator|new
name|File
argument_list|(
name|classesDir
argument_list|,
name|fileName
operator|+
literal|"/"
operator|+
name|model
operator|.
name|getScheme
argument_list|()
operator|+
literal|".json"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonFile
operator|.
name|isFile
argument_list|()
operator|&&
name|jsonFile
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|String
name|json
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|jsonFile
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// grab name from annotation
name|String
name|optionName
decl_stmt|;
if|if
condition|(
name|sourceProp
operator|.
name|hasAnnotation
argument_list|(
name|UriParam
operator|.
name|class
argument_list|)
condition|)
block|{
name|optionName
operator|=
name|sourceProp
operator|.
name|getAnnotation
argument_list|(
name|UriParam
operator|.
name|class
argument_list|)
operator|.
name|getStringValue
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|optionName
operator|=
name|sourceProp
operator|.
name|getAnnotation
argument_list|(
name|UriPath
operator|.
name|class
argument_list|)
operator|.
name|getStringValue
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|optionName
operator|==
literal|null
condition|)
block|{
name|optionName
operator|=
name|sourceProp
operator|.
name|hasField
argument_list|()
condition|?
name|sourceProp
operator|.
name|getField
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|optionName
operator|!=
literal|null
condition|)
block|{
name|javaType
operator|=
name|getPropertyJavaType
argument_list|(
name|rows
argument_list|,
name|optionName
argument_list|)
expr_stmt|;
name|type
operator|=
name|getPropertyType
argument_list|(
name|rows
argument_list|,
name|optionName
argument_list|)
expr_stmt|;
name|defaultValue
operator|=
name|getPropertyDefaultValue
argument_list|(
name|rows
argument_list|,
name|optionName
argument_list|)
expr_stmt|;
comment|// favour description from the model
name|description
operator|=
name|getPropertyDescriptionValue
argument_list|(
name|rows
argument_list|,
name|optionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|description
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|defaultValue
argument_list|)
condition|)
block|{
comment|// roaster can create the wrong type for some options so
comment|// use the correct type we found in the json schema
name|String
name|wrapperType
init|=
name|getSimpleJavaType
argument_list|(
name|javaType
argument_list|)
decl_stmt|;
if|if
condition|(
name|wrapperType
operator|.
name|startsWith
argument_list|(
literal|"java.lang."
argument_list|)
condition|)
block|{
comment|// skip java.lang. as prefix for wrapper type
name|wrapperType
operator|=
name|wrapperType
operator|.
name|substring
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setType
argument_list|(
name|loadType
argument_list|(
name|wrapperType
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|javaType
argument_list|)
operator|||
literal|"java.lang.Long"
operator|.
name|equals
argument_list|(
name|javaType
argument_list|)
condition|)
block|{
comment|// the value should be a Long number
name|String
name|value
init|=
name|defaultValue
operator|+
literal|"L"
decl_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"integer"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
literal|"boolean"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"string"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setStringInitializer
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|anEnum
condition|)
block|{
name|String
name|enumShortName
init|=
name|optionClass
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|enumShortName
operator|+
literal|"."
operator|+
name|defaultValue
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|isComplexType (ComponentOptionModel option)
specifier|private
name|boolean
name|isComplexType
parameter_list|(
name|ComponentOptionModel
name|option
parameter_list|)
block|{
comment|// all the object types are complex
return|return
literal|"object"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isComplexType (DataFormatOptionModel option)
specifier|private
name|boolean
name|isComplexType
parameter_list|(
name|DataFormatOptionModel
name|option
parameter_list|)
block|{
comment|// all the object types are complex
return|return
literal|"object"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isComplexType (LanguageOptionModel option)
specifier|private
name|boolean
name|isComplexType
parameter_list|(
name|LanguageOptionModel
name|option
parameter_list|)
block|{
comment|// all the object types are complex
return|return
literal|"object"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
comment|// get properties for nested type and super types, only properties with
comment|// setters are supported!!!
DECL|method|getProperties (JavaClass nestedType)
specifier|private
name|List
argument_list|<
name|Property
argument_list|>
name|getProperties
parameter_list|(
name|JavaClass
name|nestedType
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Property
argument_list|>
name|properties
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
do|do
block|{
for|for
control|(
name|Property
name|propertySource
range|:
name|nestedType
operator|.
name|getProperties
argument_list|()
control|)
block|{
comment|// NOTE: fields with no setters are skipped
if|if
condition|(
name|propertySource
operator|.
name|isMutable
argument_list|()
operator|&&
operator|!
name|names
operator|.
name|contains
argument_list|(
name|propertySource
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|properties
operator|.
name|add
argument_list|(
name|propertySource
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|propertySource
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|nestedType
operator|=
name|readJavaType
argument_list|(
name|nestedType
operator|.
name|getSuperType
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|nestedType
operator|!=
literal|null
condition|)
do|;
return|return
name|properties
return|;
block|}
DECL|method|asLiteralDefault (GenericType type, String defaultValue)
specifier|private
name|String
name|asLiteralDefault
parameter_list|(
name|GenericType
name|type
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|defaultValue
operator|!=
literal|null
operator|&&
operator|!
name|defaultValue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|getRawClass
argument_list|()
operator|==
name|String
operator|.
name|class
condition|)
block|{
return|return
name|Annotation
operator|.
name|quote
argument_list|(
name|defaultValue
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getRawClass
argument_list|()
operator|.
name|isEnum
argument_list|()
condition|)
block|{
return|return
name|type
operator|.
name|getRawClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"."
operator|+
name|defaultValue
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getRawClass
argument_list|()
operator|==
name|boolean
operator|.
name|class
operator|||
name|type
operator|.
name|getRawClass
argument_list|()
operator|==
name|Boolean
operator|.
name|class
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getRawClass
argument_list|()
operator|==
name|int
operator|.
name|class
operator|||
name|type
operator|.
name|getRawClass
argument_list|()
operator|==
name|Integer
operator|.
name|class
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getRawClass
argument_list|()
operator|==
name|long
operator|.
name|class
operator|||
name|type
operator|.
name|getRawClass
argument_list|()
operator|==
name|Long
operator|.
name|class
condition|)
block|{
return|return
name|defaultValue
operator|+
literal|"L"
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getRawClass
argument_list|()
operator|==
name|float
operator|.
name|class
operator|||
name|type
operator|.
name|getRawClass
argument_list|()
operator|==
name|Float
operator|.
name|class
condition|)
block|{
return|return
name|defaultValue
operator|+
literal|"f"
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getRawClass
argument_list|()
operator|==
name|double
operator|.
name|class
operator|||
name|type
operator|.
name|getRawClass
argument_list|()
operator|==
name|Double
operator|.
name|class
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getRawClass
argument_list|()
operator|==
name|Class
operator|.
name|class
condition|)
block|{
return|return
name|defaultValue
operator|+
literal|".class"
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|loadType (String type)
specifier|private
name|GenericType
name|loadType
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|MojoFailureException
block|{
try|try
block|{
return|return
name|GenericType
operator|.
name|parse
argument_list|(
name|type
argument_list|,
name|getProjectClassLoader
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Unable to load type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// try loading class, looking for inner classes if needed
DECL|method|loadClass (String loadClassName)
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|loadClassName
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|optionClass
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|optionClass
operator|=
name|getProjectClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|loadClassName
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|int
name|dotIndex
init|=
name|loadClassName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotIndex
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|loadClassName
operator|=
name|loadClassName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotIndex
argument_list|)
operator|+
literal|"$"
operator|+
name|loadClassName
operator|.
name|substring
argument_list|(
name|dotIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|optionClass
return|;
block|}
DECL|method|getProjectClassLoader ()
specifier|protected
name|DynamicClassLoader
name|getProjectClassLoader
parameter_list|()
block|{
if|if
condition|(
name|projectClassLoader
operator|==
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|classpathElements
decl_stmt|;
try|try
block|{
name|classpathElements
operator|=
name|project
operator|.
name|getTestClasspathElements
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|DependencyResolutionRequiredException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|projectClassLoader
operator|=
name|DynamicClassLoader
operator|.
name|createDynamicClassLoader
argument_list|(
name|classpathElements
argument_list|)
expr_stmt|;
block|}
return|return
name|projectClassLoader
return|;
block|}
DECL|method|getSimpleJavaType (String type)
specifier|private
name|String
name|getSimpleJavaType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
comment|// use wrapper types for primitive types so a null mean that the option
comment|// has not been configured
name|String
name|wrapper
init|=
name|PRIMITIVEMAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|wrapper
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|wrapper
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
comment|// it's a nested property if the source exists and it's not an abstract
comment|// class in this project, e.g. endpoint configuration
DECL|method|isNestedProperty (Set<JavaClass> nestedTypes, JavaClass type)
specifier|private
name|boolean
name|isNestedProperty
parameter_list|(
name|Set
argument_list|<
name|JavaClass
argument_list|>
name|nestedTypes
parameter_list|,
name|JavaClass
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
comment|// nested type MUST have some properties of it's own, besides those
comment|// from super class
if|if
condition|(
name|type
operator|.
name|isClass
argument_list|()
operator|&&
operator|!
name|type
operator|.
name|isEnum
argument_list|()
operator|&&
operator|!
name|type
operator|.
name|isAbstract
argument_list|()
operator|&&
operator|!
name|type
operator|.
name|getProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nestedTypes
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|type
operator|!=
literal|null
return|;
block|}
comment|// read java type from project, returns null if not found
DECL|method|readJavaType (String type)
specifier|private
name|JavaClass
name|readJavaType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|startsWith
argument_list|(
literal|"java.lang."
argument_list|)
operator|&&
operator|(
operator|!
name|type
operator|.
name|contains
argument_list|(
literal|"<"
argument_list|)
operator|||
operator|!
name|type
operator|.
name|contains
argument_list|(
literal|">"
argument_list|)
operator|)
condition|)
block|{
specifier|final
name|String
name|fileName
init|=
name|type
operator|.
name|replaceAll
argument_list|(
literal|"[\\[\\]]"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|".java"
decl_stmt|;
name|Path
name|sourcePath
init|=
name|project
operator|.
name|getCompileSourceRoots
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Paths
operator|::
name|get
argument_list|)
operator|.
name|map
argument_list|(
name|p
lambda|->
name|p
operator|.
name|resolve
argument_list|(
name|fileName
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|Files
operator|::
name|isRegularFile
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourcePath
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|sourceCode
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|sourcePath
argument_list|)
init|)
block|{
name|sourceCode
operator|=
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to load source code"
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|getProjectClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|JavaClass
name|nestedType
init|=
operator|new
name|JavaClass
argument_list|(
name|getProjectClassLoader
argument_list|()
argument_list|)
operator|.
name|setPackage
argument_list|(
name|clazz
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|setEnum
argument_list|(
name|clazz
operator|.
name|isEnum
argument_list|()
argument_list|)
operator|.
name|setClass
argument_list|(
operator|!
name|clazz
operator|.
name|isInterface
argument_list|()
argument_list|)
operator|.
name|setAbstract
argument_list|(
operator|(
name|clazz
operator|.
name|getModifiers
argument_list|()
operator|&
name|Modifier
operator|.
name|ABSTRACT
operator|)
operator|!=
literal|0
argument_list|)
operator|.
name|setStatic
argument_list|(
operator|(
name|clazz
operator|.
name|getModifiers
argument_list|()
operator|&
name|Modifier
operator|.
name|STATIC
operator|)
operator|!=
literal|0
argument_list|)
operator|.
name|extendSuperType
argument_list|(
name|clazz
operator|.
name|getGenericSuperclass
argument_list|()
operator|!=
literal|null
condition|?
operator|new
name|GenericType
argument_list|(
name|clazz
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
argument_list|>
name|publicMethods
init|=
name|Stream
operator|.
name|of
argument_list|(
name|clazz
operator|.
name|getDeclaredMethods
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|Modifier
operator|.
name|isPublic
argument_list|(
name|m
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
argument_list|>
name|allSetters
init|=
name|publicMethods
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getReturnType
argument_list|()
operator|==
name|void
operator|.
name|class
operator|||
name|m
operator|.
name|getReturnType
argument_list|()
operator|==
name|clazz
argument_list|)
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getParameterCount
argument_list|()
operator|==
literal|1
argument_list|)
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"set[A-Z][a-zA-Z0-9]*"
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
argument_list|>
name|allGetters
init|=
name|publicMethods
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getReturnType
argument_list|()
operator|!=
name|void
operator|.
name|class
argument_list|)
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getParameterCount
argument_list|()
operator|==
literal|0
argument_list|)
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"(get|is)[A-Z][a-zA-Z0-9]*"
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|allSetters
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|m
lambda|->
name|getSetterPosition
argument_list|(
name|sourceCode
argument_list|,
name|m
argument_list|)
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|m
lambda|->
name|Strings
operator|.
name|uncapitalize
argument_list|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|fn
lambda|->
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|ft
argument_list|;
name|Type
name|wft
decl_stmt|;
name|boolean
name|isBoolean
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
name|field
init|=
name|Stream
operator|.
name|of
argument_list|(
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|f
lambda|->
name|f
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|fn
argument_list|)
argument_list|)
operator|.
name|findAny
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
argument_list|>
name|setters
init|=
name|allSetters
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"set"
operator|+
name|Strings
operator|.
name|capitalize
argument_list|(
name|fn
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
argument_list|>
name|getters
init|=
name|allGetters
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"get"
operator|+
name|Strings
operator|.
name|capitalize
argument_list|(
name|fn
argument_list|)
argument_list|)
operator|||
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"is"
operator|+
name|Strings
operator|.
name|capitalize
argument_list|(
name|fn
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
name|mutator
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
name|accessor
decl_stmt|;
if|if
condition|(
name|setters
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|mutator
operator|=
name|setters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ft
operator|=
name|mutator
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
name|wft
operator|=
name|PRIMITIVE_CLASSES
operator|.
name|getOrDefault
argument_list|(
name|ft
argument_list|,
name|ft
argument_list|)
expr_stmt|;
name|isBoolean
operator|=
name|ft
operator|==
name|boolean
operator|.
name|class
operator|||
name|ft
operator|==
name|Boolean
operator|.
name|class
expr_stmt|;
name|accessor
operator|=
name|allGetters
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"get"
operator|+
name|Strings
operator|.
name|capitalize
argument_list|(
name|fn
argument_list|)
argument_list|)
operator|||
name|isBoolean
operator|&&
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"is"
operator|+
name|Strings
operator|.
name|capitalize
argument_list|(
name|fn
argument_list|)
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|PRIMITIVE_CLASSES
operator|.
name|getOrDefault
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
operator|==
name|wft
argument_list|)
operator|.
name|findAny
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|ft
operator|=
name|field
operator|.
name|getType
argument_list|()
expr_stmt|;
name|wft
operator|=
name|PRIMITIVE_CLASSES
operator|.
name|getOrDefault
argument_list|(
name|ft
argument_list|,
name|ft
argument_list|)
expr_stmt|;
name|isBoolean
operator|=
name|ft
operator|==
name|boolean
operator|.
name|class
operator|||
name|ft
operator|==
name|Boolean
operator|.
name|class
expr_stmt|;
name|mutator
operator|=
name|allSetters
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"set"
operator|+
name|Strings
operator|.
name|capitalize
argument_list|(
name|fn
argument_list|)
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|PRIMITIVE_CLASSES
operator|.
name|getOrDefault
argument_list|(
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
operator|==
name|wft
argument_list|)
operator|.
name|findAny
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|accessor
operator|=
name|allGetters
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"get"
operator|+
name|Strings
operator|.
name|capitalize
argument_list|(
name|fn
argument_list|)
argument_list|)
operator|||
name|isBoolean
operator|&&
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"is"
operator|+
name|Strings
operator|.
name|capitalize
argument_list|(
name|fn
argument_list|)
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|PRIMITIVE_CLASSES
operator|.
name|getOrDefault
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
operator|==
name|wft
argument_list|)
operator|.
name|findAny
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|getters
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|ft
operator|=
name|getters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReturnType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to determine type for property "
operator|+
name|fn
argument_list|)
throw|;
block|}
name|wft
operator|=
name|PRIMITIVE_CLASSES
operator|.
name|getOrDefault
argument_list|(
name|ft
argument_list|,
name|ft
argument_list|)
expr_stmt|;
name|mutator
operator|=
name|setters
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|PRIMITIVE_CLASSES
operator|.
name|getOrDefault
argument_list|(
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
operator|==
name|wft
argument_list|)
operator|.
name|findAny
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|accessor
operator|=
name|getters
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|PRIMITIVE_CLASSES
operator|.
name|getOrDefault
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
operator|==
name|wft
argument_list|)
operator|.
name|findAny
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mutator
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not find mutator for property "
operator|+
name|fn
argument_list|)
throw|;
block|}
name|Property
name|property
init|=
name|nestedType
operator|.
name|addProperty
argument_list|(
operator|new
name|GenericType
argument_list|(
name|wft
argument_list|)
argument_list|,
name|fn
argument_list|)
decl_stmt|;
name|property
operator|.
name|getMutator
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setText
argument_list|(
name|getSetterJavaDoc
argument_list|(
name|sourceCode
argument_list|,
name|fn
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
name|ann
range|:
name|mutator
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
name|addAnnotation
argument_list|(
name|ac
lambda|->
name|property
operator|.
name|getMutator
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|ac
argument_list|)
argument_list|,
name|ann
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|accessor
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
name|ann
range|:
name|accessor
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
name|addAnnotation
argument_list|(
name|ac
lambda|->
name|property
operator|.
name|getAccessor
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|ac
argument_list|)
argument_list|,
name|ann
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|property
operator|.
name|removeAccessor
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
name|ann
range|:
name|field
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
name|addAnnotation
argument_list|(
name|ac
lambda|->
name|property
operator|.
name|getField
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|ac
argument_list|)
argument_list|,
name|ann
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|property
operator|.
name|removeField
argument_list|()
expr_stmt|;
block|}
block|}
block|)
empty_stmt|;
return|return
name|nestedType
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

begin_return
return|return
literal|null
return|;
end_return

begin_function
unit|}      private
DECL|method|getSetterPosition (String sourceCode, java.lang.reflect.Method m)
name|int
name|getSetterPosition
parameter_list|(
name|String
name|sourceCode
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
name|m
parameter_list|)
block|{
name|int
name|i0
init|=
name|sourceCode
operator|.
name|indexOf
argument_list|(
literal|"void "
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|+
literal|"("
argument_list|)
decl_stmt|;
name|int
name|i1
init|=
name|sourceCode
operator|.
name|indexOf
argument_list|(
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" "
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|+
literal|"("
argument_list|)
decl_stmt|;
name|int
name|l
init|=
name|sourceCode
operator|.
name|length
argument_list|()
decl_stmt|;
return|return
name|Math
operator|.
name|min
argument_list|(
name|i0
operator|>
literal|0
condition|?
name|i0
else|:
name|l
argument_list|,
name|i1
operator|>
literal|0
condition|?
name|i1
else|:
name|l
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getSetterJavaDoc (String sourceCode, String name)
specifier|private
name|String
name|getSetterJavaDoc
parameter_list|(
name|String
name|sourceCode
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|int
name|idx
init|=
name|sourceCode
operator|.
name|indexOf
argument_list|(
literal|"public void set"
operator|+
name|Strings
operator|.
name|capitalize
argument_list|(
name|name
argument_list|)
operator|+
literal|"("
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|sourceCode
operator|=
name|sourceCode
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|idx
operator|=
name|sourceCode
operator|.
name|lastIndexOf
argument_list|(
literal|"/**"
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|sourceCode
operator|=
name|sourceCode
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|3
argument_list|)
expr_stmt|;
name|idx
operator|=
name|sourceCode
operator|.
name|indexOf
argument_list|(
literal|"*/"
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|sourceCode
operator|=
name|sourceCode
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|Stream
operator|.
name|of
argument_list|(
name|sourceCode
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|String
operator|::
name|trim
argument_list|)
operator|.
name|map
argument_list|(
name|s
lambda|->
name|s
operator|.
name|startsWith
argument_list|(
literal|"*"
argument_list|)
condition|?
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|s
argument_list|)
operator|.
name|map
argument_list|(
name|String
operator|::
name|trim
argument_list|)
operator|.
name|filter
argument_list|(
name|s
lambda|->
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|lastLine
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|lastLine
operator|<
name|lines
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|lines
operator|.
name|get
argument_list|(
name|lastLine
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"@"
argument_list|)
condition|)
block|{
break|break;
block|}
name|lastLine
operator|++
expr_stmt|;
block|}
name|sourceCode
operator|=
name|lines
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|lastLine
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|s
lambda|->
name|s
operator|.
name|replaceAll
argument_list|(
literal|"  "
argument_list|,
literal|" "
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|String
operator|::
name|trim
argument_list|)
operator|.
name|filter
argument_list|(
name|s
lambda|->
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sourceCode
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
DECL|method|addAnnotation (Function<Class<? extends java.lang.annotation.Annotation>, Annotation> creator, java.lang.annotation.Annotation ann)
specifier|private
name|void
name|addAnnotation
parameter_list|(
name|Function
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
argument_list|>
argument_list|,
name|Annotation
argument_list|>
name|creator
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
name|ann
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
argument_list|>
name|ac
init|=
name|ann
operator|.
name|annotationType
argument_list|()
decl_stmt|;
name|Annotation
name|a
init|=
name|creator
operator|.
name|apply
argument_list|(
name|ac
argument_list|)
decl_stmt|;
for|for
control|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
name|m
range|:
name|ac
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
literal|"equals"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"toString"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"hashCode"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|n
init|=
name|m
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|Object
name|v
init|=
name|m
operator|.
name|invoke
argument_list|(
name|ann
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|setLiteralValue
argument_list|(
name|n
argument_list|,
name|v
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to retrieve annotation value "
operator|+
name|n
operator|+
literal|" on "
operator|+
name|ac
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_function

begin_comment
comment|// CHECKSTYLE:OFF
end_comment

begin_function
DECL|method|skipComponentOption (ComponentModel model, ComponentOptionModel option)
specifier|private
specifier|static
name|boolean
name|skipComponentOption
parameter_list|(
name|ComponentModel
name|model
parameter_list|,
name|ComponentOptionModel
name|option
parameter_list|)
block|{
if|if
condition|(
literal|"netty4-http"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|||
literal|"netty-http"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|option
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"textline"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"delimiter"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"autoAppendDelimiter"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"decoderMaxLineLength"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"encoding"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"allowDefaultCodec"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"udpConnectionlessSending"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"networkInterface"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"clientMode"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"reconnect"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"reconnectInterval"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"useByteBuf"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"udpByteArrayCodec"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"broadcast"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function

begin_comment
comment|// CHECKSTYLE:ON
end_comment

begin_function
DECL|method|createDataFormatConfigurationSource (String packageName, DataFormatModel model, String overrideDataFormatName)
specifier|private
name|void
name|createDataFormatConfigurationSource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|DataFormatModel
name|model
parameter_list|,
name|String
name|overrideDataFormatName
parameter_list|)
throws|throws
name|MojoFailureException
block|{
specifier|final
name|JavaClass
name|javaClass
init|=
operator|new
name|JavaClass
argument_list|(
name|getProjectClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"DataFormat"
argument_list|,
literal|"DataFormatConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|extendSuperType
argument_list|(
literal|"DataFormatConfigurationPropertiesCommon"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.DataFormatConfigurationPropertiesCommon"
argument_list|)
expr_stmt|;
comment|// add bogus field for enabled so spring boot tooling can get the
comment|// javadoc as description in its metadata
name|Property
name|bogus
init|=
name|javaClass
operator|.
name|addProperty
argument_list|(
literal|"java.lang.Boolean"
argument_list|,
literal|"enabled"
argument_list|)
decl_stmt|;
name|bogus
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setText
argument_list|(
literal|"Whether to enable auto configuration of the "
operator|+
name|model
operator|.
name|getName
argument_list|()
operator|+
literal|" data format. This is enabled by default."
argument_list|)
expr_stmt|;
name|bogus
operator|.
name|removeAccessor
argument_list|()
expr_stmt|;
name|bogus
operator|.
name|removeMutator
argument_list|()
expr_stmt|;
name|String
name|doc
init|=
literal|"Generated by camel-package-maven-plugin - do not edit this file!"
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|model
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|doc
operator|=
name|model
operator|.
name|getDescription
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|doc
expr_stmt|;
block|}
name|javaClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
literal|"camel.dataformat."
operator|+
operator|(
name|overrideDataFormatName
operator|!=
literal|null
condition|?
name|overrideDataFormatName
else|:
name|model
operator|.
name|getName
argument_list|()
operator|)
decl_stmt|;
comment|// make sure prefix is in lower case
name|prefix
operator|=
name|prefix
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Generated
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"value"
argument_list|,
name|SpringBootAutoConfigurationMojo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
literal|"org.springframework.boot.context.properties.ConfigurationProperties"
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"prefix"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
for|for
control|(
name|DataFormatOptionModel
name|option
range|:
name|model
operator|.
name|getDataFormatOptions
argument_list|()
control|)
block|{
comment|// skip option with name id in data format as we do not need that
if|if
condition|(
literal|"id"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|type
init|=
name|option
operator|.
name|getJavaType
argument_list|()
decl_stmt|;
name|type
operator|=
name|getSimpleJavaType
argument_list|(
name|type
argument_list|)
expr_stmt|;
comment|// special for bindy
if|if
condition|(
literal|"org.apache.camel.model.dataformat.BindyType"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getJavaType
argument_list|()
argument_list|)
condition|)
block|{
comment|// force to use a string type
name|type
operator|=
literal|"java.lang.String"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|.
name|getJavaType
argument_list|()
operator|.
name|contains
argument_list|(
literal|"org.apache.camel.model.dataformat"
argument_list|)
condition|)
block|{
comment|// skip options that are from the model as they are not possible to configure anyway
continue|continue;
block|}
comment|// spring-boot auto configuration does not support complex types
comment|// (unless they are enum, nested)
comment|// and if so then we should use a String type so spring-boot and its
comment|// tooling support that
comment|// as Camel will be able to convert the string value into a lookup
comment|// of the bean in the registry anyway
comment|// and therefore there is no problem, eg
comment|// camel.component.jdbc.data-source = myDataSource
comment|// where the type would have been javax.sql.DataSource
name|boolean
name|complex
init|=
name|isComplexType
argument_list|(
name|option
argument_list|)
operator|&&
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getEnumValues
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|complex
condition|)
block|{
comment|// force to use a string type
name|type
operator|=
literal|"java.lang.String"
expr_stmt|;
block|}
name|Property
name|prop
init|=
name|javaClass
operator|.
name|addProperty
argument_list|(
name|type
argument_list|,
name|option
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getDeprecated
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getAccessor
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getMutator
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// DeprecatedConfigurationProperty must be on getter when
comment|// deprecated
name|prop
operator|.
name|getAccessor
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|DeprecatedConfigurationProperty
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|desc
init|=
name|option
operator|.
name|getDescription
argument_list|()
decl_stmt|;
if|if
condition|(
name|complex
condition|)
block|{
if|if
condition|(
operator|!
name|desc
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|desc
operator|=
name|desc
operator|+
literal|"."
expr_stmt|;
block|}
name|desc
operator|=
name|desc
operator|+
literal|" The option is a "
operator|+
name|option
operator|.
name|getJavaType
argument_list|()
operator|+
literal|" type."
expr_stmt|;
block|}
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"java.lang.String"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getJavaType
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setStringInitializer
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getJavaType
argument_list|()
argument_list|)
operator|||
literal|"java.lang.Long"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getJavaType
argument_list|()
argument_list|)
condition|)
block|{
comment|// the value should be a Long number
name|String
name|value
init|=
name|option
operator|.
name|getDefaultValue
argument_list|()
operator|+
literal|"L"
decl_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"integer"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"boolean"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getEnumValues
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|enumShortName
init|=
name|type
operator|.
name|substring
argument_list|(
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|enumShortName
operator|+
literal|"."
operator|+
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|fileName
init|=
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".java"
decl_stmt|;
name|writeSourceIfChanged
argument_list|(
name|javaClass
argument_list|,
name|fileName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|createLanguageConfigurationSource (String packageName, LanguageModel model, String overrideLanguageName)
specifier|private
name|void
name|createLanguageConfigurationSource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|LanguageModel
name|model
parameter_list|,
name|String
name|overrideLanguageName
parameter_list|)
throws|throws
name|MojoFailureException
block|{
specifier|final
name|JavaClass
name|javaClass
init|=
operator|new
name|JavaClass
argument_list|(
name|getProjectClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"Language"
argument_list|,
literal|"LanguageConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|extendSuperType
argument_list|(
literal|"LanguageConfigurationPropertiesCommon"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.LanguageConfigurationPropertiesCommon"
argument_list|)
expr_stmt|;
comment|// add bogus field for enabled so spring boot tooling can get the
comment|// javadoc as description in its metadata
name|Property
name|bogus
init|=
name|javaClass
operator|.
name|addProperty
argument_list|(
literal|"java.lang.Boolean"
argument_list|,
literal|"enabled"
argument_list|)
decl_stmt|;
name|bogus
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setText
argument_list|(
literal|"Whether to enable auto configuration of the "
operator|+
name|model
operator|.
name|getName
argument_list|()
operator|+
literal|" language. This is enabled by default."
argument_list|)
expr_stmt|;
name|bogus
operator|.
name|removeAccessor
argument_list|()
expr_stmt|;
name|bogus
operator|.
name|removeMutator
argument_list|()
expr_stmt|;
name|String
name|doc
init|=
literal|"Generated by camel-package-maven-plugin - do not edit this file!"
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|model
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|doc
operator|=
name|model
operator|.
name|getDescription
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|doc
expr_stmt|;
block|}
name|javaClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
literal|"camel.language."
operator|+
operator|(
name|overrideLanguageName
operator|!=
literal|null
condition|?
name|overrideLanguageName
else|:
name|model
operator|.
name|getName
argument_list|()
operator|)
decl_stmt|;
comment|// make sure prefix is in lower case
name|prefix
operator|=
name|prefix
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Generated
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"value"
argument_list|,
name|SpringBootAutoConfigurationMojo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
literal|"org.springframework.boot.context.properties.ConfigurationProperties"
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"prefix"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
for|for
control|(
name|LanguageOptionModel
name|option
range|:
name|model
operator|.
name|getLanguageOptions
argument_list|()
control|)
block|{
comment|// skip option with name id, or expression in language as we do not
comment|// need that and skip resultType as they are not global options
if|if
condition|(
literal|"id"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"expression"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"resultType"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// CHECKSTYLE:OFF
if|if
condition|(
literal|"bean"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// and skip following as they are not global options
if|if
condition|(
literal|"bean"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"ref"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"method"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"beanType"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
literal|"tokenize"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// and skip following as they are not global options
if|if
condition|(
literal|"token"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"endToken"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"inheritNamespaceTagName"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"headerName"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"regex"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"xml"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"includeTokens"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"group"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"skipFirst"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
literal|"xtokenize"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// and skip following as they are not global options
if|if
condition|(
literal|"headerName"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"group"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
literal|"xpath"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// and skip following as they are not global options
if|if
condition|(
literal|"headerName"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
literal|"xquery"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// and skip following as they are not global options
if|if
condition|(
literal|"headerName"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
comment|// CHECKSTYLE:ON
name|String
name|type
init|=
name|option
operator|.
name|getJavaType
argument_list|()
decl_stmt|;
name|type
operator|=
name|getSimpleJavaType
argument_list|(
name|type
argument_list|)
expr_stmt|;
comment|// spring-boot auto configuration does not support complex types
comment|// (unless they are enum, nested)
comment|// and if so then we should use a String type so spring-boot and its
comment|// tooling support that
comment|// as Camel will be able to convert the string value into a lookup
comment|// of the bean in the registry anyway
comment|// and therefore there is no problem, eg
comment|// camel.component.jdbc.data-source = myDataSource
comment|// where the type would have been javax.sql.DataSource
name|boolean
name|complex
init|=
name|isComplexType
argument_list|(
name|option
argument_list|)
operator|&&
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getEnumValues
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|complex
condition|)
block|{
comment|// force to use a string type
name|type
operator|=
literal|"java.lang.String"
expr_stmt|;
block|}
name|Property
name|prop
init|=
name|javaClass
operator|.
name|addProperty
argument_list|(
name|type
argument_list|,
name|option
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getDeprecated
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getAccessor
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getMutator
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// DeprecatedConfigurationProperty must be on getter when
comment|// deprecated
name|prop
operator|.
name|getAccessor
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|DeprecatedConfigurationProperty
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|desc
init|=
name|option
operator|.
name|getDescription
argument_list|()
decl_stmt|;
if|if
condition|(
name|complex
condition|)
block|{
if|if
condition|(
operator|!
name|desc
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|desc
operator|=
name|desc
operator|+
literal|"."
expr_stmt|;
block|}
name|desc
operator|=
name|desc
operator|+
literal|" The option is a "
operator|+
name|option
operator|.
name|getJavaType
argument_list|()
operator|+
literal|" type."
expr_stmt|;
block|}
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"java.lang.String"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getJavaType
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setStringInitializer
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getJavaType
argument_list|()
argument_list|)
operator|||
literal|"java.lang.Long"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getJavaType
argument_list|()
argument_list|)
condition|)
block|{
comment|// the value should be a Long number
name|String
name|value
init|=
name|option
operator|.
name|getDefaultValue
argument_list|()
operator|+
literal|"L"
decl_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"integer"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"boolean"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getEnumValues
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|enumShortName
init|=
name|type
operator|.
name|substring
argument_list|(
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|enumShortName
operator|+
literal|"."
operator|+
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|fileName
init|=
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".java"
decl_stmt|;
name|writeSourceIfChanged
argument_list|(
name|javaClass
argument_list|,
name|fileName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|createComponentAutoConfigurationSource (String packageName, ComponentModel model, List<String> componentAliases, String overrideComponentName)
specifier|private
name|void
name|createComponentAutoConfigurationSource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|ComponentModel
name|model
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|componentAliases
parameter_list|,
name|String
name|overrideComponentName
parameter_list|)
throws|throws
name|MojoFailureException
block|{
specifier|final
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Component"
argument_list|,
literal|"ComponentAutoConfiguration"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|configurationName
init|=
name|name
operator|.
name|replace
argument_list|(
literal|"ComponentAutoConfiguration"
argument_list|,
literal|"ComponentConfiguration"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|componentName
init|=
operator|(
name|overrideComponentName
operator|!=
literal|null
condition|?
name|overrideComponentName
else|:
name|model
operator|.
name|getScheme
argument_list|()
operator|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|Class
name|configClass
init|=
name|generateDummyClass
argument_list|(
name|packageName
operator|+
literal|"."
operator|+
name|configurationName
argument_list|)
decl_stmt|;
specifier|final
name|JavaClass
name|javaClass
init|=
operator|new
name|JavaClass
argument_list|(
name|getProjectClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|javaClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
literal|"Generated by camel-package-maven-plugin - do not edit this file!"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Generated
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"value"
argument_list|,
name|SpringBootAutoConfigurationMojo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Conditional
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"{ConditionalOnCamelContextAndAutoConfigurationBeans.class,\n        "
operator|+
name|name
operator|+
literal|".GroupConditions.class}"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|AutoConfigureAfter
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"CamelAutoConfiguration.class"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|EnableConfigurationProperties
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"{ComponentConfigurationProperties.class,\n        "
operator|+
name|configurationName
operator|+
literal|".class}"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|HashMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|ApplicationContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|ConditionalOnBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.slf4j.Logger"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.slf4j.LoggerFactory"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.CamelContext"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spi.ComponentCustomizer"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.CamelAutoConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.ComponentConfigurationProperties"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.util.CamelPropertiesHelper"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.util.ConditionalOnCamelContextAndAutoConfigurationBeans"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.util.GroupCondition"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.util.HierarchicalPropertiesEvaluator"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.support.IntrospectionSupport"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.util.ObjectHelper"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spi.HasId"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setPrivate
argument_list|()
operator|.
name|setStatic
argument_list|(
literal|true
argument_list|)
operator|.
name|setFinal
argument_list|(
literal|true
argument_list|)
operator|.
name|setName
argument_list|(
literal|"LOGGER"
argument_list|)
operator|.
name|setType
argument_list|(
name|loadClass
argument_list|(
literal|"org.slf4j.Logger"
argument_list|)
argument_list|)
operator|.
name|setLiteralInitializer
argument_list|(
literal|"LoggerFactory\n            .getLogger("
operator|+
name|name
operator|+
literal|".class)"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setPrivate
argument_list|()
operator|.
name|setName
argument_list|(
literal|"applicationContext"
argument_list|)
operator|.
name|setType
argument_list|(
name|ApplicationContext
operator|.
name|class
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|Autowired
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setPrivate
argument_list|()
operator|.
name|setName
argument_list|(
literal|"camelContext"
argument_list|)
operator|.
name|setType
argument_list|(
name|loadClass
argument_list|(
literal|"org.apache.camel.CamelContext"
argument_list|)
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|Autowired
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setPrivate
argument_list|()
operator|.
name|setName
argument_list|(
literal|"configuration"
argument_list|)
operator|.
name|setType
argument_list|(
name|configClass
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|Autowired
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setPrivate
argument_list|()
operator|.
name|setName
argument_list|(
literal|"customizers"
argument_list|)
operator|.
name|setType
argument_list|(
name|loadType
argument_list|(
literal|"java.util.List<org.apache.camel.spi.ComponentCustomizer<"
operator|+
name|model
operator|.
name|getJavaType
argument_list|()
operator|+
literal|">>"
argument_list|)
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|Autowired
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"required"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addNestedType
argument_list|()
operator|.
name|setName
argument_list|(
literal|"GroupConditions"
argument_list|)
operator|.
name|setStatic
argument_list|(
literal|true
argument_list|)
operator|.
name|setPackagePrivate
argument_list|()
operator|.
name|extendSuperType
argument_list|(
literal|"GroupCondition"
argument_list|)
operator|.
name|addMethod
argument_list|()
operator|.
name|setName
argument_list|(
literal|"GroupConditions"
argument_list|)
operator|.
name|setConstructor
argument_list|(
literal|true
argument_list|)
operator|.
name|setPublic
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"super(\"camel.component\", \"camel.component."
operator|+
name|componentName
operator|+
literal|"\");"
argument_list|)
expr_stmt|;
comment|// add method for auto configure
name|String
name|body
init|=
name|createComponentBody
argument_list|(
name|model
operator|.
name|getShortJavaType
argument_list|()
argument_list|,
name|componentName
argument_list|)
decl_stmt|;
name|String
name|methodName
init|=
literal|"configure"
operator|+
name|model
operator|.
name|getShortJavaType
argument_list|()
decl_stmt|;
name|Method
name|method
init|=
name|javaClass
operator|.
name|addMethod
argument_list|()
operator|.
name|setName
argument_list|(
name|methodName
argument_list|)
operator|.
name|setPublic
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
operator|.
name|setReturnType
argument_list|(
name|loadType
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Determine all the aliases
name|String
index|[]
name|springBeanAliases
init|=
name|componentAliases
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|alias
lambda|->
name|alias
operator|+
literal|"-component"
argument_list|)
operator|.
name|toArray
argument_list|(
name|size
lambda|->
operator|new
name|String
index|[
name|size
index|]
argument_list|)
decl_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|Lazy
operator|.
name|class
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|Bean
operator|.
name|class
argument_list|)
operator|.
name|setStringArrayValue
argument_list|(
literal|"name"
argument_list|,
name|springBeanAliases
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnMissingBean
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
name|model
operator|.
name|getShortJavaType
argument_list|()
operator|+
literal|".class"
argument_list|)
expr_stmt|;
name|sortImports
argument_list|(
name|javaClass
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".java"
decl_stmt|;
name|writeSourceIfChanged
argument_list|(
name|javaClass
argument_list|,
name|fileName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|generateDummyClass (String clazzName)
specifier|private
name|Class
name|generateDummyClass
parameter_list|(
name|String
name|clazzName
parameter_list|)
block|{
return|return
name|getProjectClassLoader
argument_list|()
operator|.
name|generateDummyClass
argument_list|(
name|clazzName
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|createDataFormatAutoConfigurationSource (String packageName, DataFormatModel model, List<String> dataFormatAliases, String overrideDataFormatName)
specifier|private
name|void
name|createDataFormatAutoConfigurationSource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|DataFormatModel
name|model
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dataFormatAliases
parameter_list|,
name|String
name|overrideDataFormatName
parameter_list|)
throws|throws
name|MojoFailureException
block|{
specifier|final
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|"DataFormat"
argument_list|,
literal|"DataFormatAutoConfiguration"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|configurationName
init|=
name|name
operator|.
name|replace
argument_list|(
literal|"DataFormatAutoConfiguration"
argument_list|,
literal|"DataFormatConfiguration"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dataformatName
init|=
operator|(
name|overrideDataFormatName
operator|!=
literal|null
condition|?
name|overrideDataFormatName
else|:
name|model
operator|.
name|getName
argument_list|()
operator|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|Class
name|configClass
init|=
name|generateDummyClass
argument_list|(
name|packageName
operator|+
literal|"."
operator|+
name|configurationName
argument_list|)
decl_stmt|;
specifier|final
name|JavaClass
name|javaClass
init|=
operator|new
name|JavaClass
argument_list|(
name|getProjectClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|javaClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
literal|"Generated by camel-package-maven-plugin - do not edit this file!"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Generated
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"value"
argument_list|,
name|SpringBootAutoConfigurationMojo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Conditional
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"{ConditionalOnCamelContextAndAutoConfigurationBeans.class,\n        "
operator|+
name|name
operator|+
literal|".GroupConditions.class}"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|AutoConfigureAfter
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"name"
argument_list|,
literal|"org.apache.camel.spring.boot.CamelAutoConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|EnableConfigurationProperties
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"{DataFormatConfigurationProperties.class,\n        "
operator|+
name|configurationName
operator|+
literal|".class}"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|HashMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|ApplicationContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|ConditionalOnBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.slf4j.Logger"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.slf4j.LoggerFactory"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.CamelContext"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.CamelContextAware"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.CamelAutoConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.DataFormatConfigurationProperties"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.util.CamelPropertiesHelper"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.util.ConditionalOnCamelContextAndAutoConfigurationBeans"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.util.GroupCondition"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.util.HierarchicalPropertiesEvaluator"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.support.IntrospectionSupport"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.util.ObjectHelper"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.RuntimeCamelException"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spi.DataFormat"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spi.DataFormatCustomizer"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spi.DataFormatFactory"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spi.HasId"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setPrivate
argument_list|()
operator|.
name|setStatic
argument_list|(
literal|true
argument_list|)
operator|.
name|setFinal
argument_list|(
literal|true
argument_list|)
operator|.
name|setName
argument_list|(
literal|"LOGGER"
argument_list|)
operator|.
name|setType
argument_list|(
name|loadType
argument_list|(
literal|"org.slf4j.Logger"
argument_list|)
argument_list|)
operator|.
name|setLiteralInitializer
argument_list|(
literal|"LoggerFactory\n            .getLogger("
operator|+
name|name
operator|+
literal|".class)"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setPrivate
argument_list|()
operator|.
name|setName
argument_list|(
literal|"applicationContext"
argument_list|)
operator|.
name|setType
argument_list|(
name|ApplicationContext
operator|.
name|class
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|Autowired
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setPrivate
argument_list|()
operator|.
name|setName
argument_list|(
literal|"camelContext"
argument_list|)
operator|.
name|setType
argument_list|(
name|loadType
argument_list|(
literal|"org.apache.camel.CamelContext"
argument_list|)
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|Autowired
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setPrivate
argument_list|()
operator|.
name|setName
argument_list|(
literal|"configuration"
argument_list|)
operator|.
name|setType
argument_list|(
name|configClass
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|Autowired
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setPrivate
argument_list|()
operator|.
name|setName
argument_list|(
literal|"customizers"
argument_list|)
operator|.
name|setType
argument_list|(
name|loadType
argument_list|(
literal|"java.util.List<org.apache.camel.spi.DataFormatCustomizer<"
operator|+
name|model
operator|.
name|getJavaType
argument_list|()
operator|+
literal|">>"
argument_list|)
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|Autowired
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"required"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|JavaClass
name|groupConditions
init|=
name|javaClass
operator|.
name|addNestedType
argument_list|()
operator|.
name|setName
argument_list|(
literal|"GroupConditions"
argument_list|)
operator|.
name|setStatic
argument_list|(
literal|true
argument_list|)
operator|.
name|setPackagePrivate
argument_list|()
operator|.
name|extendSuperType
argument_list|(
literal|"GroupCondition"
argument_list|)
decl_stmt|;
name|groupConditions
operator|.
name|addMethod
argument_list|()
operator|.
name|setName
argument_list|(
literal|"GroupConditions"
argument_list|)
operator|.
name|setConstructor
argument_list|(
literal|true
argument_list|)
operator|.
name|setPublic
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"super(\"camel.dataformat\", \"camel.dataformat."
operator|+
name|dataformatName
operator|+
literal|"\");"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|createDataFormatBody
argument_list|(
name|model
operator|.
name|getShortJavaType
argument_list|()
argument_list|,
name|dataformatName
argument_list|)
decl_stmt|;
name|String
name|methodName
init|=
literal|"configure"
operator|+
name|model
operator|.
name|getShortJavaType
argument_list|()
operator|+
literal|"Factory"
decl_stmt|;
name|Method
name|method
init|=
name|javaClass
operator|.
name|addMethod
argument_list|()
operator|.
name|setName
argument_list|(
name|methodName
argument_list|)
operator|.
name|setPublic
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
operator|.
name|setReturnType
argument_list|(
name|loadType
argument_list|(
literal|"org.apache.camel.spi.DataFormatFactory"
argument_list|)
argument_list|)
operator|.
name|addThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Determine all the aliases
comment|// adding the '-dataformat' suffix to prevent collision with component
comment|// names
name|String
index|[]
name|springBeanAliases
init|=
name|dataFormatAliases
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|alias
lambda|->
name|alias
operator|+
literal|"-dataformat-factory"
argument_list|)
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
decl_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|Bean
operator|.
name|class
argument_list|)
operator|.
name|setStringArrayValue
argument_list|(
literal|"name"
argument_list|,
name|springBeanAliases
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnMissingBean
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"value"
argument_list|,
name|model
operator|.
name|getShortJavaType
argument_list|()
operator|+
literal|".class"
argument_list|)
expr_stmt|;
name|sortImports
argument_list|(
name|javaClass
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".java"
decl_stmt|;
name|writeSourceIfChanged
argument_list|(
name|javaClass
argument_list|,
name|fileName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|createLanguageAutoConfigurationSource (String packageName, LanguageModel model, List<String> languageAliases, String overrideLanguageName)
specifier|private
name|void
name|createLanguageAutoConfigurationSource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|LanguageModel
name|model
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|languageAliases
parameter_list|,
name|String
name|overrideLanguageName
parameter_list|)
throws|throws
name|MojoFailureException
block|{
specifier|final
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Language"
argument_list|,
literal|"LanguageAutoConfiguration"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|configurationName
init|=
name|name
operator|.
name|replace
argument_list|(
literal|"LanguageAutoConfiguration"
argument_list|,
literal|"LanguageConfiguration"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|languageName
init|=
operator|(
name|overrideLanguageName
operator|!=
literal|null
condition|?
name|overrideLanguageName
else|:
name|model
operator|.
name|getName
argument_list|()
operator|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|Class
name|configClass
init|=
name|generateDummyClass
argument_list|(
name|packageName
operator|+
literal|"."
operator|+
name|configurationName
argument_list|)
decl_stmt|;
specifier|final
name|JavaClass
name|javaClass
init|=
operator|new
name|JavaClass
argument_list|(
name|getProjectClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|javaClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
literal|"Generated by camel-package-maven-plugin - do not edit this file!"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Generated
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"value"
argument_list|,
name|SpringBootAutoConfigurationMojo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Conditional
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"{ConditionalOnCamelContextAndAutoConfigurationBeans.class,\n        "
operator|+
name|name
operator|+
literal|".GroupConditions.class}"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|AutoConfigureAfter
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"CamelAutoConfiguration.class"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|EnableConfigurationProperties
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"{LanguageConfigurationProperties.class,\n        "
operator|+
name|configurationName
operator|+
literal|".class}"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|HashMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|ApplicationContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|ConditionalOnBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|ConfigurableBeanFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.slf4j.Logger"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.slf4j.LoggerFactory"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.CamelContext"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.CamelContextAware"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.CamelAutoConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.LanguageConfigurationProperties"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.util.CamelPropertiesHelper"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.util.ConditionalOnCamelContextAndAutoConfigurationBeans"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.util.GroupCondition"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.util.HierarchicalPropertiesEvaluator"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.support.IntrospectionSupport"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.util.ObjectHelper"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spi.HasId"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spi.LanguageCustomizer"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setPrivate
argument_list|()
operator|.
name|setStatic
argument_list|(
literal|true
argument_list|)
operator|.
name|setFinal
argument_list|(
literal|true
argument_list|)
operator|.
name|setName
argument_list|(
literal|"LOGGER"
argument_list|)
operator|.
name|setType
argument_list|(
name|loadType
argument_list|(
literal|"org.slf4j.Logger"
argument_list|)
argument_list|)
operator|.
name|setLiteralInitializer
argument_list|(
literal|"LoggerFactory\n            .getLogger("
operator|+
name|name
operator|+
literal|".class)"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setPrivate
argument_list|()
operator|.
name|setName
argument_list|(
literal|"applicationContext"
argument_list|)
operator|.
name|setType
argument_list|(
name|ApplicationContext
operator|.
name|class
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|Autowired
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setPrivate
argument_list|()
operator|.
name|setName
argument_list|(
literal|"camelContext"
argument_list|)
operator|.
name|setType
argument_list|(
name|loadType
argument_list|(
literal|"org.apache.camel.CamelContext"
argument_list|)
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|Autowired
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setPrivate
argument_list|()
operator|.
name|setName
argument_list|(
literal|"configuration"
argument_list|)
operator|.
name|setType
argument_list|(
name|configClass
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|Autowired
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setPrivate
argument_list|()
operator|.
name|setName
argument_list|(
literal|"customizers"
argument_list|)
operator|.
name|setType
argument_list|(
name|loadType
argument_list|(
literal|"java.util.List<org.apache.camel.spi.LanguageCustomizer<"
operator|+
name|model
operator|.
name|getJavaType
argument_list|()
operator|+
literal|">>"
argument_list|)
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|Autowired
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"required"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addNestedType
argument_list|()
operator|.
name|setName
argument_list|(
literal|"GroupConditions"
argument_list|)
operator|.
name|setStatic
argument_list|(
literal|true
argument_list|)
operator|.
name|setPackagePrivate
argument_list|()
operator|.
name|extendSuperType
argument_list|(
literal|"GroupCondition"
argument_list|)
operator|.
name|addMethod
argument_list|()
operator|.
name|setName
argument_list|(
literal|"GroupConditions"
argument_list|)
operator|.
name|setConstructor
argument_list|(
literal|true
argument_list|)
operator|.
name|setPublic
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"super(\"camel.component\", \"camel.component."
operator|+
name|languageName
operator|+
literal|"\");"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|createLanguageBody
argument_list|(
name|model
operator|.
name|getShortJavaType
argument_list|()
argument_list|,
name|languageName
argument_list|)
decl_stmt|;
name|String
name|methodName
init|=
literal|"configure"
operator|+
name|model
operator|.
name|getShortJavaType
argument_list|()
decl_stmt|;
name|Method
name|method
init|=
name|javaClass
operator|.
name|addMethod
argument_list|()
operator|.
name|setName
argument_list|(
name|methodName
argument_list|)
operator|.
name|setPublic
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
operator|.
name|setReturnType
argument_list|(
name|loadType
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Determine all the aliases
comment|// adding the '-language' suffix to prevent collision with component
comment|// names
name|String
index|[]
name|springBeanAliases
init|=
name|languageAliases
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|alias
lambda|->
name|alias
operator|+
literal|"-language"
argument_list|)
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
decl_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|Bean
operator|.
name|class
argument_list|)
operator|.
name|setStringArrayValue
argument_list|(
literal|"name"
argument_list|,
name|springBeanAliases
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|Scope
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"ConfigurableBeanFactory.SCOPE_PROTOTYPE"
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnMissingBean
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"value"
argument_list|,
name|model
operator|.
name|getShortJavaType
argument_list|()
operator|+
literal|".class"
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".java"
decl_stmt|;
name|writeSourceIfChanged
argument_list|(
name|javaClass
argument_list|,
name|fileName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|createComponentSpringFactorySource (String packageName, ComponentModel model)
specifier|private
name|void
name|createComponentSpringFactorySource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|ComponentModel
name|model
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"Component"
argument_list|,
literal|"ComponentAutoConfiguration"
argument_list|)
expr_stmt|;
name|writeComponentSpringFactorySource
argument_list|(
name|packageName
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|createDataFormatSpringFactorySource (String packageName, DataFormatModel model)
specifier|private
name|void
name|createDataFormatSpringFactorySource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|DataFormatModel
name|model
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"DataFormat"
argument_list|,
literal|"DataFormatAutoConfiguration"
argument_list|)
expr_stmt|;
name|writeComponentSpringFactorySource
argument_list|(
name|packageName
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|createLanguageSpringFactorySource (String packageName, LanguageModel model)
specifier|private
name|void
name|createLanguageSpringFactorySource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|LanguageModel
name|model
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"Language"
argument_list|,
literal|"LanguageAutoConfiguration"
argument_list|)
expr_stmt|;
name|writeComponentSpringFactorySource
argument_list|(
name|packageName
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|createComponentBody (String shortJavaType, String name)
specifier|private
specifier|static
name|String
name|createComponentBody
parameter_list|(
name|String
name|shortJavaType
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|" component = new "
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|"();"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"component.setCamelContext(camelContext);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Map<String, Object> parameters = new HashMap<>();\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"IntrospectionSupport.getProperties(configuration, parameters, null,\n"
operator|+
literal|"        false);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"for (Map.Entry<String, Object> entry : parameters.entrySet()) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    Object value = entry.getValue();\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    Class<?> paramClass = value.getClass();\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    if (paramClass.getName().endsWith(\"NestedConfiguration\")) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        Class nestedClass = null;\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        try {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            nestedClass = (Class) paramClass.getDeclaredField(\n"
operator|+
literal|"                    \"CAMEL_NESTED_CLASS\").get(null);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            HashMap<String, Object> nestedParameters = new HashMap<>();\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            IntrospectionSupport.getProperties(value, nestedParameters,\n"
operator|+
literal|"                    null, false);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            Object nestedProperty = nestedClass.newInstance();\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            CamelPropertiesHelper.setCamelProperties(camelContext,\n"
operator|+
literal|"                    nestedProperty, nestedParameters, false);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            entry.setValue(nestedProperty);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        } catch (NoSuchFieldException e) {\n"
argument_list|)
expr_stmt|;
comment|//        sb.append("            // ignore, class must not be a nested configuration class after all\n");
name|sb
operator|.
name|append
argument_list|(
literal|"        }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"CamelPropertiesHelper.setCamelProperties(camelContext, component,\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        parameters, false);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"if (ObjectHelper.isNotEmpty(customizers)) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    for (ComponentCustomizer<"
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|"> customizer : customizers) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        boolean useCustomizer = (customizer instanceof HasId)\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                ? HierarchicalPropertiesEvaluator.evaluate(\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                        applicationContext.getEnvironment(),\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                        \"camel.component.customizer\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                        \"camel.component."
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|".customizer\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                        ((HasId) customizer).getId())\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                : HierarchicalPropertiesEvaluator.evaluate(\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                        applicationContext.getEnvironment(),\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                        \"camel.component.customizer\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                        \"camel.component."
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|".customizer\");\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        if (useCustomizer) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            LOGGER.debug(\"Configure component {}, with customizer {}\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                    component, customizer);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            customizer.customize(component);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"return component;"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|createDataFormatBody (String shortJavaType, String name)
specifier|private
specifier|static
name|String
name|createDataFormatBody
parameter_list|(
name|String
name|shortJavaType
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"return new DataFormatFactory() {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    @Override\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    public DataFormat newInstance() {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        "
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|" dataformat = new "
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|"();"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        if (CamelContextAware.class\n"
operator|+
literal|"                .isAssignableFrom("
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|".class)) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            CamelContextAware contextAware = CamelContextAware.class\n"
operator|+
literal|"                    .cast(dataformat);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            if (contextAware != null) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                contextAware.setCamelContext(camelContext);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        try {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            Map<String, Object> parameters = new HashMap<>();\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            IntrospectionSupport.getProperties(configuration,\n"
operator|+
literal|"                    parameters, null, false);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            CamelPropertiesHelper.setCamelProperties(camelContext,\n"
operator|+
literal|"                    dataformat, parameters, false);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        } catch (Exception e) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            throw new RuntimeCamelException(e);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        if (ObjectHelper.isNotEmpty(customizers)) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            for (DataFormatCustomizer<"
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|"> customizer : customizers) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                boolean useCustomizer = (customizer instanceof HasId)\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                        ? HierarchicalPropertiesEvaluator.evaluate(\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                                applicationContext.getEnvironment(),\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                                \"camel.dataformat.customizer\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                                \"camel.dataformat."
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|".customizer\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                                ((HasId) customizer).getId())\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                        : HierarchicalPropertiesEvaluator.evaluate(\n"
operator|+
literal|"                                applicationContext.getEnvironment(),\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                                \"camel.dataformat.customizer\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                                \"camel.dataformat."
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|".customizer\");\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                if (useCustomizer) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                    LOGGER.debug(\n"
operator|+
literal|"                            \"Configure dataformat {}, with customizer {}\",\n"
operator|+
literal|"                            dataformat, customizer);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                    customizer.customize(dataformat);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        return dataformat;\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"};\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|createLanguageBody (String shortJavaType, String name)
specifier|private
specifier|static
name|String
name|createLanguageBody
parameter_list|(
name|String
name|shortJavaType
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|" language = new "
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|"();"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"if (CamelContextAware.class.isAssignableFrom("
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|".class)) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    CamelContextAware contextAware = CamelContextAware.class\n"
operator|+
literal|"            .cast(language);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    if (contextAware != null) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        contextAware.setCamelContext(camelContext);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Map<String, Object> parameters = new HashMap<>();\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"IntrospectionSupport.getProperties(configuration, parameters, null,\n"
operator|+
literal|"        false);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"CamelPropertiesHelper.setCamelProperties(camelContext, language,\n"
operator|+
literal|"        parameters, false);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"if (ObjectHelper.isNotEmpty(customizers)) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    for (LanguageCustomizer<"
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|"> customizer : customizers) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        boolean useCustomizer = (customizer instanceof HasId)\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                ? HierarchicalPropertiesEvaluator.evaluate(\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                        applicationContext.getEnvironment(),\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                        \"camel.language.customizer\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                        \"camel.language."
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|".customizer\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                        ((HasId) customizer).getId())\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                : HierarchicalPropertiesEvaluator.evaluate(\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                        applicationContext.getEnvironment(),\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                        \"camel.language.customizer\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                        \"camel.language."
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|".customizer\");\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        if (useCustomizer) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            LOGGER.debug(\"Configure language {}, with customizer {}\",\n"
operator|+
literal|"                    language, customizer);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            customizer.customize(language);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"return language;"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|sortImports (JavaClass importer)
specifier|private
specifier|static
name|void
name|sortImports
parameter_list|(
name|JavaClass
name|importer
parameter_list|)
block|{
comment|// sort imports
comment|// do nothing, as imports are sorted automatically when displayed
block|}
end_function

begin_function
DECL|method|loadModelJson (Map<File, Supplier<String>> jsonFiles, String modelName)
specifier|private
specifier|static
name|String
name|loadModelJson
parameter_list|(
name|Map
argument_list|<
name|File
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|jsonFiles
parameter_list|,
name|String
name|modelName
parameter_list|)
block|{
return|return
name|loadJsonOfType
argument_list|(
name|jsonFiles
argument_list|,
name|modelName
argument_list|,
literal|"model"
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|loadComponentJson (Map<File, Supplier<String>> jsonFiles, String componentName)
specifier|private
specifier|static
name|String
name|loadComponentJson
parameter_list|(
name|Map
argument_list|<
name|File
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|jsonFiles
parameter_list|,
name|String
name|componentName
parameter_list|)
block|{
return|return
name|loadJsonOfType
argument_list|(
name|jsonFiles
argument_list|,
name|componentName
argument_list|,
literal|"component"
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|loadDataFormatJson (Map<File, Supplier<String>> jsonFiles, String dataFormatName)
specifier|private
specifier|static
name|String
name|loadDataFormatJson
parameter_list|(
name|Map
argument_list|<
name|File
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|jsonFiles
parameter_list|,
name|String
name|dataFormatName
parameter_list|)
block|{
return|return
name|loadJsonOfType
argument_list|(
name|jsonFiles
argument_list|,
name|dataFormatName
argument_list|,
literal|"dataformat"
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|loadLanguageJson (Map<File, Supplier<String>> jsonFiles, String languageName)
specifier|private
specifier|static
name|String
name|loadLanguageJson
parameter_list|(
name|Map
argument_list|<
name|File
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|jsonFiles
parameter_list|,
name|String
name|languageName
parameter_list|)
block|{
return|return
name|loadJsonOfType
argument_list|(
name|jsonFiles
argument_list|,
name|languageName
argument_list|,
literal|"language"
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|loadJsonOfType (Map<File, Supplier<String>> jsonFiles, String modelName, String type)
specifier|private
specifier|static
name|String
name|loadJsonOfType
parameter_list|(
name|Map
argument_list|<
name|File
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|jsonFiles
parameter_list|,
name|String
name|modelName
parameter_list|,
name|String
name|type
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|File
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|jsonFiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|modelName
operator|+
literal|".json"
argument_list|)
condition|)
block|{
name|String
name|json
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|json
operator|.
name|contains
argument_list|(
literal|"\"kind\": \""
operator|+
name|type
operator|+
literal|"\""
argument_list|)
condition|)
block|{
return|return
name|json
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
DECL|method|generateComponentModel (String componentName, String json)
specifier|private
specifier|static
name|ComponentModel
name|generateComponentModel
parameter_list|(
name|String
name|componentName
parameter_list|,
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"component"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ComponentModel
name|component
init|=
operator|new
name|ComponentModel
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|component
operator|.
name|setScheme
argument_list|(
name|getSafeValue
argument_list|(
literal|"scheme"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setSyntax
argument_list|(
name|getSafeValue
argument_list|(
literal|"syntax"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setAlternativeSyntax
argument_list|(
name|getSafeValue
argument_list|(
literal|"alternativeSyntax"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setTitle
argument_list|(
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setFirstVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"firstVersion"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setLabel
argument_list|(
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setConsumerOnly
argument_list|(
name|getSafeValue
argument_list|(
literal|"consumerOnly"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setProducerOnly
argument_list|(
name|getSafeValue
argument_list|(
literal|"producerOnly"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setGroupId
argument_list|(
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setArtifactId
argument_list|(
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setVersion
argument_list|(
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"componentProperties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|ComponentOptionModel
name|option
init|=
operator|new
name|ComponentOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDisplayName
argument_list|(
name|getSafeValue
argument_list|(
literal|"displayName"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnums
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|addComponentOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|EndpointOptionModel
name|option
init|=
operator|new
name|EndpointOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDisplayName
argument_list|(
name|getSafeValue
argument_list|(
literal|"displayName"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setGroup
argument_list|(
name|getSafeValue
argument_list|(
literal|"group"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setRequired
argument_list|(
name|getSafeValue
argument_list|(
literal|"required"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnums
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setPrefix
argument_list|(
name|getSafeValue
argument_list|(
literal|"prefix"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setMultiValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"multiValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnumValues
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|addEndpointOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
return|return
name|component
return|;
block|}
end_function

begin_function
DECL|method|generateDataFormatModel (String dataFormatName, String json)
specifier|private
specifier|static
name|DataFormatModel
name|generateDataFormatModel
parameter_list|(
name|String
name|dataFormatName
parameter_list|,
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"dataformat"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|DataFormatModel
name|dataFormat
init|=
operator|new
name|DataFormatModel
argument_list|()
decl_stmt|;
name|dataFormat
operator|.
name|setTitle
argument_list|(
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setModelName
argument_list|(
name|getSafeValue
argument_list|(
literal|"modelName"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setFirstVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"firstVersion"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setLabel
argument_list|(
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setGroupId
argument_list|(
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setArtifactId
argument_list|(
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setVersion
argument_list|(
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|DataFormatOptionModel
name|option
init|=
operator|new
name|DataFormatOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDisplayName
argument_list|(
name|getSafeValue
argument_list|(
literal|"displayName"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnumValues
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|addDataFormatOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
return|return
name|dataFormat
return|;
block|}
end_function

begin_function
DECL|method|generateLanguageModel (String languageName, String json)
specifier|private
specifier|static
name|LanguageModel
name|generateLanguageModel
parameter_list|(
name|String
name|languageName
parameter_list|,
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"language"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|LanguageModel
name|language
init|=
operator|new
name|LanguageModel
argument_list|()
decl_stmt|;
name|language
operator|.
name|setTitle
argument_list|(
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setModelName
argument_list|(
name|getSafeValue
argument_list|(
literal|"modelName"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setFirstVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"firstVersion"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setLabel
argument_list|(
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setGroupId
argument_list|(
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setArtifactId
argument_list|(
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setVersion
argument_list|(
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|LanguageOptionModel
name|option
init|=
operator|new
name|LanguageOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDisplayName
argument_list|(
name|getSafeValue
argument_list|(
literal|"displayName"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnumValues
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|addLanguageOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
return|return
name|language
return|;
block|}
end_function

begin_function
DECL|method|generateOtherModel (String json)
specifier|private
name|OtherModel
name|generateOtherModel
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|parseJsonSchema
argument_list|(
literal|"model"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|OtherModel
name|model
init|=
operator|new
name|OtherModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setTitle
argument_list|(
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setLabel
argument_list|(
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|=
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|OtherOptionModel
name|option
init|=
operator|new
name|OtherOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDisplayName
argument_list|(
name|getSafeValue
argument_list|(
literal|"displayName"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setGroup
argument_list|(
name|getSafeValue
argument_list|(
literal|"group"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setRequired
argument_list|(
name|getSafeValue
argument_list|(
literal|"required"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnums
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnums
argument_list|(
name|getSafeValue
argument_list|(
literal|"enums"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|addOptionModel
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
return|return
name|model
return|;
block|}
end_function

begin_function
DECL|method|findComponentNames (File dir, Set<String> componentNames)
specifier|private
name|void
name|findComponentNames
parameter_list|(
name|File
name|dir
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|componentNames
parameter_list|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"classes/META-INF/services/org/apache/camel/component"
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
comment|// skip directories as there may be a sub .resolver
comment|// directory
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'.'
condition|)
block|{
name|componentNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function

begin_function
DECL|method|findDataFormatNames ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|findDataFormatNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dataFormatNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|project
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"target/classes"
argument_list|)
decl_stmt|;
name|f
operator|=
operator|new
name|File
argument_list|(
name|f
argument_list|,
literal|"META-INF/services/org/apache/camel/dataformat"
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
comment|// skip directories as there may be a sub .resolver
comment|// directory
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'.'
condition|)
block|{
name|dataFormatNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|dataFormatNames
return|;
block|}
end_function

begin_function
DECL|method|findLanguageNames ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|findLanguageNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|languageNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|project
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"target/classes"
argument_list|)
decl_stmt|;
name|f
operator|=
operator|new
name|File
argument_list|(
name|f
argument_list|,
literal|"META-INF/services/org/apache/camel/language"
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
comment|// skip directories as there may be a sub .resolver
comment|// directory
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'.'
condition|)
block|{
name|languageNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|languageNames
return|;
block|}
end_function

begin_function
DECL|method|writeSourceIfChanged (JavaClass source, String fileName, boolean innerClassesLast)
specifier|private
name|void
name|writeSourceIfChanged
parameter_list|(
name|JavaClass
name|source
parameter_list|,
name|String
name|fileName
parameter_list|,
name|boolean
name|innerClassesLast
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|writeSourceIfChanged
argument_list|(
name|source
operator|.
name|printClass
argument_list|(
name|innerClassesLast
argument_list|)
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|writeSourceIfChanged (String source, String fileName)
specifier|private
name|void
name|writeSourceIfChanged
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|SpringBootHelper
operator|.
name|starterSrcDir
argument_list|(
name|baseDir
argument_list|,
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|deleteFileOnMainArtifact
argument_list|(
name|target
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|header
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"license-header-java.txt"
argument_list|)
init|)
block|{
name|header
operator|=
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|String
name|code
init|=
name|header
operator|+
name|source
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Source code generated:\n"
operator|+
name|code
argument_list|)
expr_stmt|;
name|updateResource
argument_list|(
literal|null
argument_list|,
name|target
operator|.
name|toPath
argument_list|()
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"IOError with file "
operator|+
name|target
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|writeComponentSpringFactorySource (String packageName, String name)
specifier|private
name|void
name|writeComponentSpringFactorySource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n"
argument_list|)
expr_stmt|;
name|String
name|lineToAdd
init|=
name|packageName
operator|+
literal|"."
operator|+
name|name
operator|+
literal|"\n"
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|lineToAdd
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
literal|"META-INF/spring.factories"
decl_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|SpringBootHelper
operator|.
name|starterResourceDir
argument_list|(
name|baseDir
argument_list|,
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|deleteFileOnMainArtifact
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
comment|// is the auto configuration already in the file
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|FileUtils
operator|.
name|readLines
argument_list|(
name|target
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to existing file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// find last non empty line, so we can add our new line
comment|// after that
name|int
name|lastLine
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|lines
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|String
name|line
init|=
name|lines
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|line
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// adjust existing line so its being continued
name|line
operator|=
name|line
operator|+
literal|",\\"
expr_stmt|;
name|lines
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|lastLine
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
name|lines
operator|.
name|add
argument_list|(
name|lastLine
operator|+
literal|1
argument_list|,
name|lineToAdd
argument_list|)
expr_stmt|;
name|StringBuilder
name|code
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|code
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
comment|// update
name|FileUtils
operator|.
name|write
argument_list|(
name|target
argument_list|,
name|code
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated existing file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"IOError with file "
operator|+
name|target
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// create new file
try|try
block|{
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"license-header.txt"
argument_list|)
decl_stmt|;
name|String
name|header
init|=
name|loadText
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// add empty new line after header
name|code
operator|=
name|header
operator|+
literal|"\n"
operator|+
name|code
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Source code generated:\n"
operator|+
name|code
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|target
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Created file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"IOError with file "
operator|+
name|target
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|deleteFileOnMainArtifact (File starterFile)
specifier|private
name|void
name|deleteFileOnMainArtifact
parameter_list|(
name|File
name|starterFile
parameter_list|)
block|{
if|if
condition|(
operator|!
name|DELETE_FILES_ON_MAIN_ARTIFACTS
condition|)
block|{
return|return;
block|}
name|String
name|relativePath
init|=
name|SpringBootHelper
operator|.
name|starterDir
argument_list|(
name|baseDir
argument_list|,
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|toPath
argument_list|()
operator|.
name|relativize
argument_list|(
name|starterFile
operator|.
name|toPath
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|File
name|mainArtifactFile
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|relativePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|mainArtifactFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|boolean
name|deleted
init|=
name|mainArtifactFile
operator|.
name|delete
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot delete file "
operator|+
name|mainArtifactFile
argument_list|)
throw|;
block|}
block|}
block|}
end_function

unit|}
end_unit

