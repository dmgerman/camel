begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|ComponentModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|ComponentOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|DataFormatModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|DataFormatOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|EndpointOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|LanguageModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|LanguageOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|Roaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|JavaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|AnnotationSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|Import
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|JavaClassSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|MethodSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|PropertySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|util
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|AutoConfigureAfter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionOutcome
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnMissingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|SpringBootCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|bind
operator|.
name|RelaxedPropertyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|DeprecatedConfigurationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|EnableConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|NestedConfigurationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|ConditionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Lazy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|type
operator|.
name|AnnotatedTypeMetadata
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|JSonSchemaHelper
operator|.
name|getSafeValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|PackageHelper
operator|.
name|loadText
import|;
end_import

begin_comment
comment|/**  * Generate Spring Boot auto configuration files for Camel components and data formats.  *  * @goal prepare-spring-boot-auto-configuration  * @requiresDependencyResolution compile+runtime  */
end_comment

begin_class
DECL|class|SpringBootAutoConfigurationMojo
specifier|public
class|class
name|SpringBootAutoConfigurationMojo
extends|extends
name|AbstractMojo
block|{
comment|/**      * Useful to move configuration towards starters.      * Warning: the spring.factories files sometimes are used also on the main artifacts.      * Make sure it is not the case before enabling this property.      */
DECL|field|DELETE_FILES_ON_MAIN_ARTIFACTS
specifier|private
specifier|static
specifier|final
name|boolean
name|DELETE_FILES_ON_MAIN_ARTIFACTS
init|=
literal|false
decl_stmt|;
comment|/**      * Suffix used for generating inner classes for nested component properties, e.g. endpoint configuration.      */
DECL|field|INNER_TYPE_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|INNER_TYPE_SUFFIX
init|=
literal|"NestedConfiguration"
decl_stmt|;
comment|/**      * Classes to exclude when adding {@link NestedConfigurationProperty} annotations.      */
DECL|field|EXCLUDE_INNER_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|EXCLUDE_INNER_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^((java\\.)|(javax\\.)|(org\\.springframework\\.context\\.ApplicationContext)|(freemarker\\.template\\.Configuration)).*"
argument_list|)
decl_stmt|;
DECL|field|PRIMITIVEMAP
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|PRIMITIVEMAP
decl_stmt|;
static|static
block|{
name|PRIMITIVEMAP
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"boolean"
argument_list|,
literal|"java.lang.Boolean"
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"char"
argument_list|,
literal|"java.lang.Character"
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"long"
argument_list|,
literal|"java.lang.Long"
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
literal|"java.lang.Integer"
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"integer"
argument_list|,
literal|"java.lang.Integer"
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"byte"
argument_list|,
literal|"java.lang.Byte"
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"short"
argument_list|,
literal|"java.lang.Short"
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"double"
argument_list|,
literal|"java.lang.Double"
argument_list|)
expr_stmt|;
name|PRIMITIVEMAP
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
literal|"java.lang.Float"
argument_list|)
expr_stmt|;
block|}
DECL|field|IGNORE_MODULES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|IGNORE_MODULES
init|=
block|{
comment|/* Non-standard -> */
literal|"camel-grape"
block|,
literal|"camel-connector"
block|}
decl_stmt|;
comment|/**      * The maven project.      *      * @parameter property="project"      * @required      * @readonly      */
DECL|field|project
specifier|protected
name|MavenProject
name|project
decl_stmt|;
comment|/**      * The project build directory      *      * @parameter default-value="${project.build.directory}"      */
DECL|field|buildDir
specifier|protected
name|File
name|buildDir
decl_stmt|;
comment|/**      * The base directory      *      * @parameter default-value="${basedir}"      */
DECL|field|baseDir
specifier|protected
name|File
name|baseDir
decl_stmt|;
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
comment|// Do not generate code for ignored module
if|if
condition|(
name|Arrays
operator|.
name|asList
argument_list|(
name|IGNORE_MODULES
argument_list|)
operator|.
name|contains
argument_list|(
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Component auto-configuration will not be created: component contained in the ignore list"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Spring-boot configuration has been moved on starters
name|File
name|starterDir
init|=
name|SpringBootHelper
operator|.
name|starterDir
argument_list|(
name|baseDir
argument_list|,
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|starterDir
operator|.
name|exists
argument_list|()
operator|||
operator|!
operator|(
operator|new
name|File
argument_list|(
name|starterDir
argument_list|,
literal|"pom.xml"
argument_list|)
operator|.
name|exists
argument_list|()
operator|)
condition|)
block|{
comment|// If the starter does not exist, no configuration can be created
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Component auto-configuration will not be created: the starter does not exist"
argument_list|)
expr_stmt|;
return|return;
block|}
name|executeComponent
argument_list|()
expr_stmt|;
name|executeDataFormat
argument_list|()
expr_stmt|;
name|executeLanguage
argument_list|()
expr_stmt|;
block|}
DECL|method|executeComponent ()
specifier|private
name|void
name|executeComponent
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
comment|// find the component names
name|List
argument_list|<
name|String
argument_list|>
name|componentNames
init|=
name|findComponentNames
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|File
argument_list|>
name|jsonFiles
init|=
operator|new
name|TreeSet
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|PackageHelper
operator|.
name|findJsonFiles
argument_list|(
name|buildDir
argument_list|,
name|jsonFiles
argument_list|,
operator|new
name|PackageHelper
operator|.
name|CamelComponentsModelFilter
argument_list|()
argument_list|)
expr_stmt|;
comment|// create auto configuration for the components
if|if
condition|(
operator|!
name|componentNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|componentNames
operator|.
name|size
argument_list|()
operator|+
literal|" components"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ComponentModel
argument_list|>
name|allModels
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|componentName
range|:
name|componentNames
control|)
block|{
name|String
name|json
init|=
name|loadComponentJson
argument_list|(
name|jsonFiles
argument_list|,
name|componentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|ComponentModel
name|model
init|=
name|generateComponentModel
argument_list|(
name|componentName
argument_list|,
name|json
argument_list|)
decl_stmt|;
name|allModels
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Group the models by implementing classes
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ComponentModel
argument_list|>
argument_list|>
name|grModels
init|=
name|allModels
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|ComponentModel
operator|::
name|getJavaType
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|componentClass
range|:
name|grModels
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ComponentModel
argument_list|>
name|compModels
init|=
name|grModels
operator|.
name|get
argument_list|(
name|componentClass
argument_list|)
decl_stmt|;
name|ComponentModel
name|model
init|=
name|compModels
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// They should be equivalent
name|List
argument_list|<
name|String
argument_list|>
name|aliases
init|=
name|compModels
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ComponentModel
operator|::
name|getScheme
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
comment|// resolvePropertyPlaceholders is an option which only make sense to use if the component has other options
name|boolean
name|hasOptions
init|=
name|model
operator|.
name|getComponentOptions
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|o
lambda|->
operator|!
name|o
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"resolvePropertyPlaceholders"
argument_list|)
argument_list|)
decl_stmt|;
comment|// use springboot as sub package name so the code is not in normal
comment|// package so the Spring Boot JARs can be optional at runtime
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|pkg
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
literal|".springboot"
decl_stmt|;
name|String
name|overrideComponentName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|aliases
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// determine component name when there are multiple ones
name|overrideComponentName
operator|=
name|model
operator|.
name|getArtifactId
argument_list|()
operator|.
name|replace
argument_list|(
literal|"camel-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasOptions
condition|)
block|{
name|createComponentConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
name|overrideComponentName
argument_list|)
expr_stmt|;
block|}
name|createComponentAutoConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
name|aliases
argument_list|,
name|hasOptions
argument_list|,
name|overrideComponentName
argument_list|)
expr_stmt|;
name|createComponentSpringFactorySource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|executeDataFormat ()
specifier|private
name|void
name|executeDataFormat
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
comment|// find the data format names
name|List
argument_list|<
name|String
argument_list|>
name|dataFormatNames
init|=
name|findDataFormatNames
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|File
argument_list|>
name|jsonFiles
init|=
operator|new
name|TreeSet
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
comment|// we can reuse the component model filter
name|PackageHelper
operator|.
name|findJsonFiles
argument_list|(
name|buildDir
argument_list|,
name|jsonFiles
argument_list|,
operator|new
name|PackageHelper
operator|.
name|CamelComponentsModelFilter
argument_list|()
argument_list|)
expr_stmt|;
comment|// create auto configuration for the data formats
if|if
condition|(
operator|!
name|dataFormatNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|dataFormatNames
operator|.
name|size
argument_list|()
operator|+
literal|" dataformats"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DataFormatModel
argument_list|>
name|allModels
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dataFormatName
range|:
name|dataFormatNames
control|)
block|{
name|String
name|json
init|=
name|loadDataFormatJson
argument_list|(
name|jsonFiles
argument_list|,
name|dataFormatName
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|DataFormatModel
name|model
init|=
name|generateDataFormatModel
argument_list|(
name|dataFormatName
argument_list|,
name|json
argument_list|)
decl_stmt|;
name|allModels
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Group the models by implementing classes
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DataFormatModel
argument_list|>
argument_list|>
name|grModels
init|=
name|allModels
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|DataFormatModel
operator|::
name|getJavaType
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|dataFormatClass
range|:
name|grModels
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|DataFormatModel
argument_list|>
name|dfModels
init|=
name|grModels
operator|.
name|get
argument_list|(
name|dataFormatClass
argument_list|)
decl_stmt|;
name|DataFormatModel
name|model
init|=
name|dfModels
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// They should be equivalent
name|List
argument_list|<
name|String
argument_list|>
name|aliases
init|=
name|dfModels
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|DataFormatModel
operator|::
name|getName
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|hasOptions
init|=
operator|!
name|model
operator|.
name|getDataFormatOptions
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
comment|// use springboot as sub package name so the code is not in normal
comment|// package so the Spring Boot JARs can be optional at runtime
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|pkg
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
literal|".springboot"
decl_stmt|;
name|String
name|overrideDataFormatName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|aliases
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// determine component name when there are multiple ones
name|overrideDataFormatName
operator|=
name|model
operator|.
name|getArtifactId
argument_list|()
operator|.
name|replace
argument_list|(
literal|"camel-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasOptions
condition|)
block|{
name|createDataFormatConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
name|overrideDataFormatName
argument_list|)
expr_stmt|;
block|}
name|createDataFormatAutoConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
name|aliases
argument_list|,
name|hasOptions
argument_list|,
name|overrideDataFormatName
argument_list|)
expr_stmt|;
name|createDataFormatSpringFactorySource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|executeLanguage ()
specifier|private
name|void
name|executeLanguage
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
comment|// find the language names
name|List
argument_list|<
name|String
argument_list|>
name|languageNames
init|=
name|findLanguageNames
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|File
argument_list|>
name|jsonFiles
init|=
operator|new
name|TreeSet
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
comment|// we can reuse the component model filter
name|PackageHelper
operator|.
name|findJsonFiles
argument_list|(
name|buildDir
argument_list|,
name|jsonFiles
argument_list|,
operator|new
name|PackageHelper
operator|.
name|CamelComponentsModelFilter
argument_list|()
argument_list|)
expr_stmt|;
comment|// create auto configuration for the languages
if|if
condition|(
operator|!
name|languageNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|languageNames
operator|.
name|size
argument_list|()
operator|+
literal|" languages"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LanguageModel
argument_list|>
name|allModels
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|languageName
range|:
name|languageNames
control|)
block|{
name|String
name|json
init|=
name|loadLanguageJson
argument_list|(
name|jsonFiles
argument_list|,
name|languageName
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|LanguageModel
name|model
init|=
name|generateLanguageModel
argument_list|(
name|languageName
argument_list|,
name|json
argument_list|)
decl_stmt|;
name|allModels
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Group the models by implementing classes
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|LanguageModel
argument_list|>
argument_list|>
name|grModels
init|=
name|allModels
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|LanguageModel
operator|::
name|getJavaType
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|languageClass
range|:
name|grModels
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|LanguageModel
argument_list|>
name|dfModels
init|=
name|grModels
operator|.
name|get
argument_list|(
name|languageClass
argument_list|)
decl_stmt|;
name|LanguageModel
name|model
init|=
name|dfModels
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// They should be equivalent
name|List
argument_list|<
name|String
argument_list|>
name|aliases
init|=
name|dfModels
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|LanguageModel
operator|::
name|getName
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|hasOptions
init|=
operator|!
name|model
operator|.
name|getLanguageOptions
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
comment|// use springboot as sub package name so the code is not in normal
comment|// package so the Spring Boot JARs can be optional at runtime
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|pkg
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
literal|".springboot"
decl_stmt|;
name|String
name|overrideLanguageName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|aliases
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// determine language name when there are multiple ones
name|overrideLanguageName
operator|=
name|model
operator|.
name|getArtifactId
argument_list|()
operator|.
name|replace
argument_list|(
literal|"camel-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasOptions
condition|)
block|{
name|createLanguageConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
name|overrideLanguageName
argument_list|)
expr_stmt|;
block|}
name|createLanguageAutoConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
name|aliases
argument_list|,
name|hasOptions
argument_list|,
name|overrideLanguageName
argument_list|)
expr_stmt|;
name|createLanguageSpringFactorySource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createComponentConfigurationSource (String packageName, ComponentModel model, String overrideComponentName)
specifier|private
name|void
name|createComponentConfigurationSource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|ComponentModel
name|model
parameter_list|,
name|String
name|overrideComponentName
parameter_list|)
throws|throws
name|MojoFailureException
block|{
specifier|final
name|JavaClassSource
name|javaClass
init|=
name|Roaster
operator|.
name|create
argument_list|(
name|JavaClassSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"Component"
argument_list|,
literal|"ComponentConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|String
name|doc
init|=
literal|"Generated by camel-package-maven-plugin - do not edit this file!"
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|model
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|doc
operator|=
name|model
operator|.
name|getDescription
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|doc
expr_stmt|;
block|}
name|javaClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
literal|"camel.component."
operator|+
operator|(
name|overrideComponentName
operator|!=
literal|null
condition|?
name|overrideComponentName
else|:
name|model
operator|.
name|getScheme
argument_list|()
operator|)
decl_stmt|;
comment|// make sure prefix is in lower case
name|prefix
operator|=
name|prefix
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
literal|"org.springframework.boot.context.properties.ConfigurationProperties"
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"prefix"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|JavaClassSource
argument_list|>
name|nestedTypes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ComponentOptionModel
name|option
range|:
name|model
operator|.
name|getComponentOptions
argument_list|()
control|)
block|{
if|if
condition|(
name|skipComponentOption
argument_list|(
name|model
argument_list|,
name|option
argument_list|)
condition|)
block|{
comment|// some component options should be skipped
continue|continue;
block|}
name|String
name|type
init|=
name|option
operator|.
name|getJavaType
argument_list|()
decl_stmt|;
comment|// generate inner class for non-primitive options
name|type
operator|=
name|getSimpleJavaType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|JavaClassSource
name|javaClassSource
init|=
name|readJavaType
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNestedProperty
argument_list|(
name|nestedTypes
argument_list|,
name|javaClassSource
argument_list|)
condition|)
block|{
name|type
operator|=
name|option
operator|.
name|getShortJavaType
argument_list|()
operator|+
name|INNER_TYPE_SUFFIX
expr_stmt|;
block|}
name|PropertySource
argument_list|<
name|JavaClassSource
argument_list|>
name|prop
init|=
name|javaClass
operator|.
name|addProperty
argument_list|(
name|type
argument_list|,
name|option
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|endsWith
argument_list|(
name|INNER_TYPE_SUFFIX
argument_list|)
operator|&&
name|type
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
operator|==
operator|-
literal|1
operator|&&
operator|!
name|EXCLUDE_INNER_PATTERN
operator|.
name|matcher
argument_list|(
name|type
argument_list|)
operator|.
name|matches
argument_list|()
operator|&&
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getEnums
argument_list|()
argument_list|)
operator|&&
operator|(
name|javaClassSource
operator|==
literal|null
operator|||
operator|(
name|javaClassSource
operator|.
name|isClass
argument_list|()
operator|&&
operator|!
name|javaClassSource
operator|.
name|isAbstract
argument_list|()
operator|)
operator|)
condition|)
block|{
comment|// add nested configuration annotation for complex properties
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|NestedConfigurationProperty
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getDeprecated
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getAccessor
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getMutator
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// DeprecatedConfigurationProperty must be on getter when deprecated
name|prop
operator|.
name|getAccessor
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|DeprecatedConfigurationProperty
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"java.lang.String"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getJavaType
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setStringInitializer
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getJavaType
argument_list|()
argument_list|)
operator|||
literal|"java.lang.Long"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getJavaType
argument_list|()
argument_list|)
condition|)
block|{
comment|// the value should be a Long number
name|String
name|value
init|=
name|option
operator|.
name|getDefaultValue
argument_list|()
operator|+
literal|"L"
decl_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"integer"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"boolean"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getEnums
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|enumShortName
init|=
name|type
operator|.
name|substring
argument_list|(
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|enumShortName
operator|+
literal|"."
operator|+
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// add inner classes for nested AutoConfiguration options
name|ClassLoader
name|projectClassLoader
init|=
name|getProjectClassLoader
argument_list|()
decl_stmt|;
for|for
control|(
name|JavaClassSource
name|nestedType
range|:
name|nestedTypes
control|)
block|{
specifier|final
name|JavaClassSource
name|innerClass
init|=
name|javaClass
operator|.
name|addNestedType
argument_list|(
literal|"public static class "
operator|+
name|nestedType
operator|.
name|getName
argument_list|()
operator|+
name|INNER_TYPE_SUFFIX
argument_list|)
decl_stmt|;
comment|// add source class name as a static field
name|innerClass
operator|.
name|addField
argument_list|()
operator|.
name|setPublic
argument_list|()
operator|.
name|setStatic
argument_list|(
literal|true
argument_list|)
operator|.
name|setFinal
argument_list|(
literal|true
argument_list|)
operator|.
name|setType
argument_list|(
name|Class
operator|.
name|class
argument_list|)
operator|.
name|setName
argument_list|(
literal|"CAMEL_NESTED_CLASS"
argument_list|)
operator|.
name|setLiteralInitializer
argument_list|(
name|nestedType
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|".class"
argument_list|)
expr_stmt|;
comment|// parse option type
for|for
control|(
name|ResolvedProperty
name|resolvedProperty
range|:
name|getProperties
argument_list|(
name|nestedType
argument_list|)
control|)
block|{
name|String
name|optionType
init|=
name|resolvedProperty
operator|.
name|propertyType
decl_stmt|;
name|PropertySource
argument_list|<
name|JavaClassSource
argument_list|>
name|sourceProp
init|=
name|resolvedProperty
operator|.
name|propertySource
decl_stmt|;
name|Type
argument_list|<
name|JavaClassSource
argument_list|>
name|propType
init|=
name|sourceProp
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|PropertySource
argument_list|<
name|JavaClassSource
argument_list|>
name|prop
init|=
name|innerClass
operator|.
name|addProperty
argument_list|(
name|optionType
argument_list|,
name|sourceProp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|anEnum
decl_stmt|;
name|Class
name|optionClass
decl_stmt|;
if|if
condition|(
operator|!
name|propType
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|optionClass
operator|=
name|loadClass
argument_list|(
name|projectClassLoader
argument_list|,
name|optionType
argument_list|)
expr_stmt|;
name|anEnum
operator|=
name|optionClass
operator|.
name|isEnum
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|optionClass
operator|=
literal|null
expr_stmt|;
name|anEnum
operator|=
literal|false
expr_stmt|;
block|}
comment|// add nested configuration annotation for complex properties
if|if
condition|(
operator|!
name|EXCLUDE_INNER_PATTERN
operator|.
name|matcher
argument_list|(
name|optionType
argument_list|)
operator|.
name|matches
argument_list|()
operator|&&
operator|!
name|propType
operator|.
name|isArray
argument_list|()
operator|&&
operator|!
name|anEnum
operator|&&
name|optionClass
operator|!=
literal|null
operator|&&
operator|!
name|optionClass
operator|.
name|isInterface
argument_list|()
operator|&&
operator|!
name|optionClass
operator|.
name|isAnnotation
argument_list|()
operator|&&
operator|!
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|optionClass
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|NestedConfigurationProperty
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sourceProp
operator|.
name|hasAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getAccessor
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getMutator
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// DeprecatedConfigurationProperty must be on getter when deprecated
name|prop
operator|.
name|getAccessor
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|DeprecatedConfigurationProperty
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|String
name|description
init|=
literal|null
decl_stmt|;
specifier|final
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|mutator
init|=
name|sourceProp
operator|.
name|getMutator
argument_list|()
decl_stmt|;
if|if
condition|(
name|mutator
operator|.
name|hasJavaDoc
argument_list|()
condition|)
block|{
name|description
operator|=
name|mutator
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|getFullText
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sourceProp
operator|.
name|hasField
argument_list|()
condition|)
block|{
name|description
operator|=
name|sourceProp
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|getFullText
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|description
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|description
argument_list|)
expr_stmt|;
block|}
name|String
name|defaultValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sourceProp
operator|.
name|hasAnnotation
argument_list|(
name|UriParam
operator|.
name|class
argument_list|)
condition|)
block|{
name|defaultValue
operator|=
name|sourceProp
operator|.
name|getAnnotation
argument_list|(
name|UriParam
operator|.
name|class
argument_list|)
operator|.
name|getStringValue
argument_list|(
literal|"defaultValue"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sourceProp
operator|.
name|hasAnnotation
argument_list|(
name|UriPath
operator|.
name|class
argument_list|)
condition|)
block|{
name|defaultValue
operator|=
name|sourceProp
operator|.
name|getAnnotation
argument_list|(
name|UriPath
operator|.
name|class
argument_list|)
operator|.
name|getStringValue
argument_list|(
literal|"defaultValue"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|defaultValue
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"java.lang.String"
operator|.
name|equals
argument_list|(
name|optionType
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setStringInitializer
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"integer"
operator|.
name|equals
argument_list|(
name|optionType
argument_list|)
operator|||
literal|"boolean"
operator|.
name|equals
argument_list|(
name|optionType
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|anEnum
condition|)
block|{
name|String
name|enumShortName
init|=
name|optionClass
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|enumShortName
operator|+
literal|"."
operator|+
name|defaultValue
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|sortImports
argument_list|(
name|javaClass
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".java"
decl_stmt|;
name|writeSourceIfChanged
argument_list|(
name|javaClass
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
comment|// resolved property type name and property source, Roaster doesn't resolve inner classes correctly
DECL|class|ResolvedProperty
specifier|private
class|class
name|ResolvedProperty
block|{
DECL|field|propertyType
specifier|private
name|String
name|propertyType
decl_stmt|;
DECL|field|propertySource
specifier|private
name|PropertySource
argument_list|<
name|JavaClassSource
argument_list|>
name|propertySource
decl_stmt|;
DECL|method|ResolvedProperty (String propertyType, PropertySource<JavaClassSource> propertySource)
name|ResolvedProperty
parameter_list|(
name|String
name|propertyType
parameter_list|,
name|PropertySource
argument_list|<
name|JavaClassSource
argument_list|>
name|propertySource
parameter_list|)
block|{
name|this
operator|.
name|propertyType
operator|=
name|propertyType
expr_stmt|;
name|this
operator|.
name|propertySource
operator|=
name|propertySource
expr_stmt|;
block|}
block|}
comment|// get properties for nested type and super types, only properties with setters are supported!!!
DECL|method|getProperties (JavaClassSource nestedType)
specifier|private
name|List
argument_list|<
name|ResolvedProperty
argument_list|>
name|getProperties
parameter_list|(
name|JavaClassSource
name|nestedType
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ResolvedProperty
argument_list|>
name|properties
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
do|do
block|{
for|for
control|(
name|PropertySource
argument_list|<
name|JavaClassSource
argument_list|>
name|propertySource
range|:
name|nestedType
operator|.
name|getProperties
argument_list|()
control|)
block|{
comment|// NOTE: fields with no setters are skipped
if|if
condition|(
name|propertySource
operator|.
name|isMutable
argument_list|()
operator|&&
operator|!
name|names
operator|.
name|contains
argument_list|(
name|propertySource
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|properties
operator|.
name|add
argument_list|(
operator|new
name|ResolvedProperty
argument_list|(
name|getSimpleJavaType
argument_list|(
name|resolveParamType
argument_list|(
name|nestedType
argument_list|,
name|propertySource
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|propertySource
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|propertySource
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|nestedType
operator|=
name|readJavaType
argument_list|(
name|nestedType
operator|.
name|getSuperType
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|nestedType
operator|!=
literal|null
condition|)
do|;
return|return
name|properties
return|;
block|}
comment|// try loading class, looking for inner classes if needed
DECL|method|loadClass (ClassLoader projectClassLoader, String loadClassName)
specifier|private
name|Class
name|loadClass
parameter_list|(
name|ClassLoader
name|projectClassLoader
parameter_list|,
name|String
name|loadClassName
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|Class
name|optionClass
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|optionClass
operator|=
name|projectClassLoader
operator|.
name|loadClass
argument_list|(
name|loadClassName
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|int
name|dotIndex
init|=
name|loadClassName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotIndex
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|loadClassName
operator|=
name|loadClassName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotIndex
argument_list|)
operator|+
literal|"$"
operator|+
name|loadClassName
operator|.
name|substring
argument_list|(
name|dotIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|optionClass
return|;
block|}
comment|// Roaster doesn't resolve inner classes correctly
DECL|method|resolveParamType (JavaClassSource nestedType, String type)
specifier|private
name|String
name|resolveParamType
parameter_list|(
name|JavaClassSource
name|nestedType
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|String
name|result
decl_stmt|;
name|int
name|innerStart
init|=
name|type
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|int
name|arrayStart
init|=
name|type
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
decl_stmt|;
if|if
condition|(
name|innerStart
operator|!=
operator|-
literal|1
condition|)
block|{
name|result
operator|=
name|nestedType
operator|.
name|resolveType
argument_list|(
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|innerStart
argument_list|)
argument_list|)
operator|+
name|type
operator|.
name|substring
argument_list|(
name|innerStart
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|nestedType
operator|.
name|resolveType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|arrayStart
operator|==
operator|-
literal|1
condition|?
name|result
else|:
name|result
operator|+
name|type
operator|.
name|substring
argument_list|(
name|arrayStart
argument_list|)
return|;
block|}
DECL|method|getProjectClassLoader ()
specifier|protected
name|ClassLoader
name|getProjectClassLoader
parameter_list|()
throws|throws
name|MojoFailureException
block|{
specifier|final
name|List
name|classpathElements
decl_stmt|;
try|try
block|{
name|classpathElements
operator|=
name|project
operator|.
name|getTestClasspathElements
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|DependencyResolutionRequiredException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|URL
index|[]
name|urls
init|=
operator|new
name|URL
index|[
name|classpathElements
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|classpathElements
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|urls
index|[
name|i
index|]
operator|=
operator|new
name|File
argument_list|(
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|final
name|ClassLoader
name|tccl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
return|return
operator|new
name|URLClassLoader
argument_list|(
name|urls
argument_list|,
name|tccl
operator|!=
literal|null
condition|?
name|tccl
else|:
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getSimpleJavaType (String type)
specifier|private
name|String
name|getSimpleJavaType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
comment|// remove<?> as generic type as Roaster (Eclipse JDT) cannot use that
name|type
operator|=
name|type
operator|.
name|replaceAll
argument_list|(
literal|"\\<\\?\\>"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// use wrapper types for primitive types so a null mean that the option has not been configured
name|String
name|wrapper
init|=
name|PRIMITIVEMAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|wrapper
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|wrapper
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
comment|// it's a nested property if the source exists and it's not an abstract class in this project, e.g. endpoint configuration
DECL|method|isNestedProperty (Set<JavaClassSource> nestedTypes, JavaClassSource type)
specifier|private
name|boolean
name|isNestedProperty
parameter_list|(
name|Set
argument_list|<
name|JavaClassSource
argument_list|>
name|nestedTypes
parameter_list|,
name|JavaClassSource
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
comment|// nested type MUST have some properties of it's own, besides those from super class
if|if
condition|(
name|type
operator|.
name|isClass
argument_list|()
operator|&&
operator|!
name|type
operator|.
name|isEnum
argument_list|()
operator|&&
operator|!
name|type
operator|.
name|isAbstract
argument_list|()
operator|&&
operator|!
name|type
operator|.
name|getProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nestedTypes
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|type
operator|!=
literal|null
return|;
block|}
comment|// read java type from project, returns null if not found
DECL|method|readJavaType (String type)
specifier|private
name|JavaClassSource
name|readJavaType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|JavaClassSource
name|nestedType
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|startsWith
argument_list|(
literal|"java.lang."
argument_list|)
condition|)
block|{
specifier|final
name|String
name|fileName
init|=
name|type
operator|.
name|replaceAll
argument_list|(
literal|"[\\[\\]]"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|".java"
decl_stmt|;
for|for
control|(
name|Object
name|sourceRoot
range|:
name|project
operator|.
name|getCompileSourceRoots
argument_list|()
control|)
block|{
name|File
name|sourceFile
init|=
operator|new
name|File
argument_list|(
name|sourceRoot
operator|.
name|toString
argument_list|()
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
try|try
block|{
name|JavaType
argument_list|<
name|?
argument_list|>
name|classSource
init|=
name|Roaster
operator|.
name|parse
argument_list|(
name|sourceFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|classSource
operator|instanceof
name|JavaClassSource
condition|)
block|{
name|nestedType
operator|=
operator|(
name|JavaClassSource
operator|)
name|classSource
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing source file "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
name|nestedType
return|;
block|}
comment|// CHECKSTYLE:OFF
DECL|method|skipComponentOption (ComponentModel model, ComponentOptionModel option)
specifier|private
specifier|static
name|boolean
name|skipComponentOption
parameter_list|(
name|ComponentModel
name|model
parameter_list|,
name|ComponentOptionModel
name|option
parameter_list|)
block|{
if|if
condition|(
literal|"netty4-http"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|||
literal|"netty-http"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|option
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"textline"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"delimiter"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"autoAppendDelimiter"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"decoderMaxLineLength"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"encoding"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"allowDefaultCodec"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"udpConnectionlessSending"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"networkInterface"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"clientMode"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"reconnect"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"reconnectInterval"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"useByteBuf"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"udpByteArrayCodec"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"broadcast"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|// CHECKSTYLE:ON
DECL|method|createDataFormatConfigurationSource (String packageName, DataFormatModel model, String overrideDataFormatName)
specifier|private
name|void
name|createDataFormatConfigurationSource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|DataFormatModel
name|model
parameter_list|,
name|String
name|overrideDataFormatName
parameter_list|)
throws|throws
name|MojoFailureException
block|{
specifier|final
name|JavaClassSource
name|javaClass
init|=
name|Roaster
operator|.
name|create
argument_list|(
name|JavaClassSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"DataFormat"
argument_list|,
literal|"DataFormatConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|String
name|doc
init|=
literal|"Generated by camel-package-maven-plugin - do not edit this file!"
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|model
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|doc
operator|=
name|model
operator|.
name|getDescription
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|doc
expr_stmt|;
block|}
name|javaClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
literal|"camel.dataformat."
operator|+
operator|(
name|overrideDataFormatName
operator|!=
literal|null
condition|?
name|overrideDataFormatName
else|:
name|model
operator|.
name|getName
argument_list|()
operator|)
decl_stmt|;
comment|// make sure prefix is in lower case
name|prefix
operator|=
name|prefix
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
literal|"org.springframework.boot.context.properties.ConfigurationProperties"
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"prefix"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
for|for
control|(
name|DataFormatOptionModel
name|option
range|:
name|model
operator|.
name|getDataFormatOptions
argument_list|()
control|)
block|{
comment|// skip option with name id in data format as we do not need that
if|if
condition|(
literal|"id"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|type
init|=
name|option
operator|.
name|getJavaType
argument_list|()
decl_stmt|;
name|type
operator|=
name|getSimpleJavaType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|PropertySource
argument_list|<
name|JavaClassSource
argument_list|>
name|prop
init|=
name|javaClass
operator|.
name|addProperty
argument_list|(
name|type
argument_list|,
name|option
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getDeprecated
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getAccessor
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getMutator
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// DeprecatedConfigurationProperty must be on getter when deprecated
name|prop
operator|.
name|getAccessor
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|DeprecatedConfigurationProperty
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"java.lang.String"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setStringInitializer
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"integer"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"boolean"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getEnumValues
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|enumShortName
init|=
name|type
operator|.
name|substring
argument_list|(
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|enumShortName
operator|+
literal|"."
operator|+
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|sortImports
argument_list|(
name|javaClass
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".java"
decl_stmt|;
name|writeSourceIfChanged
argument_list|(
name|javaClass
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
DECL|method|createLanguageConfigurationSource (String packageName, LanguageModel model, String overrideLanguageName)
specifier|private
name|void
name|createLanguageConfigurationSource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|LanguageModel
name|model
parameter_list|,
name|String
name|overrideLanguageName
parameter_list|)
throws|throws
name|MojoFailureException
block|{
specifier|final
name|JavaClassSource
name|javaClass
init|=
name|Roaster
operator|.
name|create
argument_list|(
name|JavaClassSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"Language"
argument_list|,
literal|"LanguageConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|String
name|doc
init|=
literal|"Generated by camel-package-maven-plugin - do not edit this file!"
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|model
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|doc
operator|=
name|model
operator|.
name|getDescription
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|doc
expr_stmt|;
block|}
name|javaClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
literal|"camel.language."
operator|+
operator|(
name|overrideLanguageName
operator|!=
literal|null
condition|?
name|overrideLanguageName
else|:
name|model
operator|.
name|getName
argument_list|()
operator|)
decl_stmt|;
comment|// make sure prefix is in lower case
name|prefix
operator|=
name|prefix
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
literal|"org.springframework.boot.context.properties.ConfigurationProperties"
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"prefix"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
for|for
control|(
name|LanguageOptionModel
name|option
range|:
name|model
operator|.
name|getLanguageOptions
argument_list|()
control|)
block|{
comment|// skip option with name id, or expression in language as we do not need that and skip resultType as they are not global options
if|if
condition|(
literal|"id"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"expression"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"resultType"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// CHECKSTYLE:OFF
if|if
condition|(
literal|"bean"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// and skip following as they are not global options
if|if
condition|(
literal|"bean"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"ref"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"method"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"beanType"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
literal|"tokenize"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// and skip following as they are not global options
if|if
condition|(
literal|"token"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"endToken"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"inheritNamespaceTagName"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"headerName"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"regex"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"xml"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"includeTokens"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"group"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"skipFirst"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
literal|"xtokenize"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// and skip following as they are not global options
if|if
condition|(
literal|"headerName"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"group"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
literal|"xpath"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// and skip following as they are not global options
if|if
condition|(
literal|"headerName"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
literal|"xquery"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// and skip following as they are not global options
if|if
condition|(
literal|"headerName"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
comment|// CHECKSTYLE:ON
name|String
name|type
init|=
name|option
operator|.
name|getJavaType
argument_list|()
decl_stmt|;
name|type
operator|=
name|getSimpleJavaType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|PropertySource
argument_list|<
name|JavaClassSource
argument_list|>
name|prop
init|=
name|javaClass
operator|.
name|addProperty
argument_list|(
name|type
argument_list|,
name|option
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getDeprecated
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getAccessor
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getMutator
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// DeprecatedConfigurationProperty must be on getter when deprecated
name|prop
operator|.
name|getAccessor
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|DeprecatedConfigurationProperty
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"java.lang.String"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setStringInitializer
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"integer"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"boolean"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getEnumValues
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|enumShortName
init|=
name|type
operator|.
name|substring
argument_list|(
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|enumShortName
operator|+
literal|"."
operator|+
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|sortImports
argument_list|(
name|javaClass
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".java"
decl_stmt|;
name|writeSourceIfChanged
argument_list|(
name|javaClass
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
DECL|method|createComponentAutoConfigurationSource ( String packageName, ComponentModel model, List<String> componentAliases, boolean hasOptions, String overrideComponentName)
specifier|private
name|void
name|createComponentAutoConfigurationSource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|ComponentModel
name|model
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|componentAliases
parameter_list|,
name|boolean
name|hasOptions
parameter_list|,
name|String
name|overrideComponentName
parameter_list|)
throws|throws
name|MojoFailureException
block|{
specifier|final
name|JavaClassSource
name|javaClass
init|=
name|Roaster
operator|.
name|create
argument_list|(
name|JavaClassSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"Component"
argument_list|,
literal|"ComponentAutoConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|String
name|doc
init|=
literal|"Generated by camel-package-maven-plugin - do not edit this file!"
decl_stmt|;
name|javaClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnBean
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"type"
argument_list|,
literal|"org.apache.camel.spring.boot.CamelAutoConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Conditional
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
name|name
operator|+
literal|".Condition.class"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|AutoConfigureAfter
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"name"
argument_list|,
literal|"org.apache.camel.spring.boot.CamelAutoConfiguration"
argument_list|)
expr_stmt|;
name|String
name|configurationName
init|=
name|name
operator|.
name|replace
argument_list|(
literal|"ComponentAutoConfiguration"
argument_list|,
literal|"ComponentConfiguration"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasOptions
condition|)
block|{
name|AnnotationSource
argument_list|<
name|JavaClassSource
argument_list|>
name|ann
init|=
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|EnableConfigurationProperties
operator|.
name|class
argument_list|)
decl_stmt|;
name|ann
operator|.
name|setLiteralValue
argument_list|(
literal|"value"
argument_list|,
name|configurationName
operator|+
literal|".class"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"java.util.HashMap"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"java.util.Map"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.util.IntrospectionSupport"
argument_list|)
expr_stmt|;
block|}
name|javaClass
operator|.
name|addImport
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.CamelContext"
argument_list|)
expr_stmt|;
comment|// add method for auto configure
name|String
name|body
init|=
name|createComponentBody
argument_list|(
name|model
operator|.
name|getShortJavaType
argument_list|()
argument_list|,
name|hasOptions
argument_list|)
decl_stmt|;
name|String
name|methodName
init|=
literal|"configure"
operator|+
name|model
operator|.
name|getShortJavaType
argument_list|()
decl_stmt|;
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|method
init|=
name|javaClass
operator|.
name|addMethod
argument_list|()
operator|.
name|setName
argument_list|(
name|methodName
argument_list|)
operator|.
name|setPublic
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
operator|.
name|setReturnType
argument_list|(
name|model
operator|.
name|getShortJavaType
argument_list|()
argument_list|)
operator|.
name|addThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
name|method
operator|.
name|addParameter
argument_list|(
literal|"CamelContext"
argument_list|,
literal|"camelContext"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasOptions
condition|)
block|{
name|method
operator|.
name|addParameter
argument_list|(
name|configurationName
argument_list|,
literal|"configuration"
argument_list|)
expr_stmt|;
block|}
comment|// Determine all the aliases
name|String
index|[]
name|springBeanAliases
init|=
name|componentAliases
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|alias
lambda|->
name|alias
operator|+
literal|"-component"
argument_list|)
operator|.
name|toArray
argument_list|(
name|size
lambda|->
operator|new
name|String
index|[
name|size
index|]
argument_list|)
decl_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|Lazy
operator|.
name|class
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|Bean
operator|.
name|class
argument_list|)
operator|.
name|setStringArrayValue
argument_list|(
literal|"name"
argument_list|,
name|springBeanAliases
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnClass
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"value"
argument_list|,
literal|"CamelContext.class"
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnMissingBean
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"value"
argument_list|,
name|model
operator|.
name|getShortJavaType
argument_list|()
operator|+
literal|".class"
argument_list|)
expr_stmt|;
comment|// Generate Condition
name|javaClass
operator|.
name|addNestedType
argument_list|(
name|createConditionType
argument_list|(
name|javaClass
argument_list|,
literal|"camel.component"
argument_list|,
operator|(
name|overrideComponentName
operator|!=
literal|null
condition|?
name|overrideComponentName
else|:
name|model
operator|.
name|getScheme
argument_list|()
operator|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sortImports
argument_list|(
name|javaClass
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".java"
decl_stmt|;
name|writeSourceIfChanged
argument_list|(
name|javaClass
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|writeAdditionalSpringMetaData
argument_list|(
literal|"camel"
argument_list|,
literal|"component"
argument_list|,
operator|(
name|overrideComponentName
operator|!=
literal|null
condition|?
name|overrideComponentName
else|:
name|model
operator|.
name|getScheme
argument_list|()
operator|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createDataFormatAutoConfigurationSource ( String packageName, DataFormatModel model, List<String> dataFormatAliases, boolean hasOptions, String overrideDataFormatName)
specifier|private
name|void
name|createDataFormatAutoConfigurationSource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|DataFormatModel
name|model
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dataFormatAliases
parameter_list|,
name|boolean
name|hasOptions
parameter_list|,
name|String
name|overrideDataFormatName
parameter_list|)
throws|throws
name|MojoFailureException
block|{
specifier|final
name|JavaClassSource
name|javaClass
init|=
name|Roaster
operator|.
name|create
argument_list|(
name|JavaClassSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"DataFormat"
argument_list|,
literal|"DataFormatAutoConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|String
name|doc
init|=
literal|"Generated by camel-package-maven-plugin - do not edit this file!"
decl_stmt|;
name|javaClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnBean
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"type"
argument_list|,
literal|"org.apache.camel.spring.boot.CamelAutoConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Conditional
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
name|name
operator|+
literal|".Condition.class"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|AutoConfigureAfter
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"name"
argument_list|,
literal|"org.apache.camel.spring.boot.CamelAutoConfiguration"
argument_list|)
expr_stmt|;
name|String
name|configurationName
init|=
name|name
operator|.
name|replace
argument_list|(
literal|"DataFormatAutoConfiguration"
argument_list|,
literal|"DataFormatConfiguration"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasOptions
condition|)
block|{
name|AnnotationSource
argument_list|<
name|JavaClassSource
argument_list|>
name|ann
init|=
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|EnableConfigurationProperties
operator|.
name|class
argument_list|)
decl_stmt|;
name|ann
operator|.
name|setLiteralValue
argument_list|(
literal|"value"
argument_list|,
name|configurationName
operator|+
literal|".class"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"java.util.HashMap"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"java.util.Map"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.util.IntrospectionSupport"
argument_list|)
expr_stmt|;
block|}
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.CamelContextAware"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.CamelContext"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.RuntimeCamelException"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spi.DataFormat"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spi.DataFormatFactory"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|createDataFormatBody
argument_list|(
name|model
operator|.
name|getShortJavaType
argument_list|()
argument_list|,
name|hasOptions
argument_list|)
decl_stmt|;
name|String
name|methodName
init|=
literal|"configure"
operator|+
name|model
operator|.
name|getShortJavaType
argument_list|()
operator|+
literal|"Factory"
decl_stmt|;
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|method
init|=
name|javaClass
operator|.
name|addMethod
argument_list|()
operator|.
name|setName
argument_list|(
name|methodName
argument_list|)
operator|.
name|setPublic
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
operator|.
name|setReturnType
argument_list|(
literal|"org.apache.camel.spi.DataFormatFactory"
argument_list|)
decl_stmt|;
name|method
operator|.
name|addParameter
argument_list|(
literal|"CamelContext"
argument_list|,
literal|"camelContext"
argument_list|)
operator|.
name|setFinal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasOptions
condition|)
block|{
name|method
operator|.
name|addParameter
argument_list|(
name|configurationName
argument_list|,
literal|"configuration"
argument_list|)
operator|.
name|setFinal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Determine all the aliases
comment|// adding the '-dataformat' suffix to prevent collision with component names
name|String
index|[]
name|springBeanAliases
init|=
name|dataFormatAliases
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|alias
lambda|->
name|alias
operator|+
literal|"-dataformat-factory"
argument_list|)
operator|.
name|toArray
argument_list|(
name|size
lambda|->
operator|new
name|String
index|[
name|size
index|]
argument_list|)
decl_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|Bean
operator|.
name|class
argument_list|)
operator|.
name|setStringArrayValue
argument_list|(
literal|"name"
argument_list|,
name|springBeanAliases
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnClass
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"value"
argument_list|,
literal|"CamelContext.class"
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnMissingBean
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"value"
argument_list|,
name|model
operator|.
name|getShortJavaType
argument_list|()
operator|+
literal|".class"
argument_list|)
expr_stmt|;
comment|// Generate Condition
name|javaClass
operator|.
name|addNestedType
argument_list|(
name|createConditionType
argument_list|(
name|javaClass
argument_list|,
literal|"camel.dataformat"
argument_list|,
operator|(
name|overrideDataFormatName
operator|!=
literal|null
condition|?
name|overrideDataFormatName
else|:
name|model
operator|.
name|getName
argument_list|()
operator|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sortImports
argument_list|(
name|javaClass
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".java"
decl_stmt|;
name|writeSourceIfChanged
argument_list|(
name|javaClass
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|writeAdditionalSpringMetaData
argument_list|(
literal|"camel"
argument_list|,
literal|"dataformat"
argument_list|,
operator|(
name|overrideDataFormatName
operator|!=
literal|null
condition|?
name|overrideDataFormatName
else|:
name|model
operator|.
name|getName
argument_list|()
operator|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createLanguageAutoConfigurationSource ( String packageName, LanguageModel model, List<String> languageAliases, boolean hasOptions, String overrideLanguageName)
specifier|private
name|void
name|createLanguageAutoConfigurationSource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|LanguageModel
name|model
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|languageAliases
parameter_list|,
name|boolean
name|hasOptions
parameter_list|,
name|String
name|overrideLanguageName
parameter_list|)
throws|throws
name|MojoFailureException
block|{
specifier|final
name|JavaClassSource
name|javaClass
init|=
name|Roaster
operator|.
name|create
argument_list|(
name|JavaClassSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"Language"
argument_list|,
literal|"LanguageAutoConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|String
name|doc
init|=
literal|"Generated by camel-package-maven-plugin - do not edit this file!"
decl_stmt|;
name|javaClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnBean
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"type"
argument_list|,
literal|"org.apache.camel.spring.boot.CamelAutoConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Conditional
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
name|name
operator|+
literal|".Condition.class"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|AutoConfigureAfter
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"name"
argument_list|,
literal|"org.apache.camel.spring.boot.CamelAutoConfiguration"
argument_list|)
expr_stmt|;
name|String
name|configurationName
init|=
name|name
operator|.
name|replace
argument_list|(
literal|"LanguageAutoConfiguration"
argument_list|,
literal|"LanguageConfiguration"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasOptions
condition|)
block|{
name|AnnotationSource
argument_list|<
name|JavaClassSource
argument_list|>
name|ann
init|=
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|EnableConfigurationProperties
operator|.
name|class
argument_list|)
decl_stmt|;
name|ann
operator|.
name|setLiteralValue
argument_list|(
literal|"value"
argument_list|,
name|configurationName
operator|+
literal|".class"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"java.util.HashMap"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"java.util.Map"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.util.IntrospectionSupport"
argument_list|)
expr_stmt|;
block|}
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.CamelContextAware"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.CamelContext"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|createLanguageBody
argument_list|(
name|model
operator|.
name|getShortJavaType
argument_list|()
argument_list|,
name|hasOptions
argument_list|)
decl_stmt|;
name|String
name|methodName
init|=
literal|"configure"
operator|+
name|model
operator|.
name|getShortJavaType
argument_list|()
decl_stmt|;
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|method
init|=
name|javaClass
operator|.
name|addMethod
argument_list|()
operator|.
name|setName
argument_list|(
name|methodName
argument_list|)
operator|.
name|setPublic
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
operator|.
name|setReturnType
argument_list|(
name|model
operator|.
name|getShortJavaType
argument_list|()
argument_list|)
operator|.
name|addThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
name|method
operator|.
name|addParameter
argument_list|(
literal|"CamelContext"
argument_list|,
literal|"camelContext"
argument_list|)
expr_stmt|;
name|method
operator|.
name|addParameter
argument_list|(
name|configurationName
argument_list|,
literal|"configuration"
argument_list|)
expr_stmt|;
comment|// Determine all the aliases
comment|// adding the '-language' suffix to prevent collision with component names
name|String
index|[]
name|springBeanAliases
init|=
name|languageAliases
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|alias
lambda|->
name|alias
operator|+
literal|"-language"
argument_list|)
operator|.
name|toArray
argument_list|(
name|size
lambda|->
operator|new
name|String
index|[
name|size
index|]
argument_list|)
decl_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|Bean
operator|.
name|class
argument_list|)
operator|.
name|setStringArrayValue
argument_list|(
literal|"name"
argument_list|,
name|springBeanAliases
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|Scope
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"prototype"
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnClass
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"value"
argument_list|,
literal|"CamelContext.class"
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnMissingBean
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"value"
argument_list|,
name|model
operator|.
name|getShortJavaType
argument_list|()
operator|+
literal|".class"
argument_list|)
expr_stmt|;
comment|// Generate Condition
name|javaClass
operator|.
name|addNestedType
argument_list|(
name|createConditionType
argument_list|(
name|javaClass
argument_list|,
literal|"camel.language"
argument_list|,
operator|(
name|overrideLanguageName
operator|!=
literal|null
condition|?
name|overrideLanguageName
else|:
name|model
operator|.
name|getName
argument_list|()
operator|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sortImports
argument_list|(
name|javaClass
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".java"
decl_stmt|;
name|writeSourceIfChanged
argument_list|(
name|javaClass
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|writeAdditionalSpringMetaData
argument_list|(
literal|"camel"
argument_list|,
literal|"language"
argument_list|,
operator|(
name|overrideLanguageName
operator|!=
literal|null
condition|?
name|overrideLanguageName
else|:
name|model
operator|.
name|getName
argument_list|()
operator|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createComponentSpringFactorySource (String packageName, ComponentModel model)
specifier|private
name|void
name|createComponentSpringFactorySource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|ComponentModel
name|model
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"Component"
argument_list|,
literal|"ComponentAutoConfiguration"
argument_list|)
expr_stmt|;
name|writeComponentSpringFactorySource
argument_list|(
name|packageName
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|createDataFormatSpringFactorySource (String packageName, DataFormatModel model)
specifier|private
name|void
name|createDataFormatSpringFactorySource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|DataFormatModel
name|model
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"DataFormat"
argument_list|,
literal|"DataFormatAutoConfiguration"
argument_list|)
expr_stmt|;
name|writeComponentSpringFactorySource
argument_list|(
name|packageName
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|createLanguageSpringFactorySource (String packageName, LanguageModel model)
specifier|private
name|void
name|createLanguageSpringFactorySource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|LanguageModel
name|model
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"Language"
argument_list|,
literal|"LanguageAutoConfiguration"
argument_list|)
expr_stmt|;
name|writeComponentSpringFactorySource
argument_list|(
name|packageName
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|createComponentBody (String shortJavaType, boolean hasOptions)
specifier|private
specifier|static
name|String
name|createComponentBody
parameter_list|(
name|String
name|shortJavaType
parameter_list|,
name|boolean
name|hasOptions
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|" component = new "
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|"();"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"component.setCamelContext(camelContext);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasOptions
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Map<String, Object> parameters = new HashMap<>();\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"IntrospectionSupport.getProperties(configuration, parameters, null, false);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"for (Map.Entry<String, Object> entry : parameters.entrySet()) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    Object value = entry.getValue();\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    Class<?> paramClass = value.getClass();\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    if (paramClass.getName().endsWith(\"NestedConfiguration\")) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        Class nestedClass = null;\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        try {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            nestedClass = (Class) paramClass.getDeclaredField(\"CAMEL_NESTED_CLASS\").get(null);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            HashMap<String, Object> nestedParameters = new HashMap<>();\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            IntrospectionSupport.getProperties(value, nestedParameters, null, false);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            Object nestedProperty = nestedClass.newInstance();\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            IntrospectionSupport.setProperties(camelContext, camelContext.getTypeConverter(), nestedProperty, nestedParameters);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            entry.setValue(nestedProperty);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        } catch (NoSuchFieldException e) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            // ignore, class must not be a nested configuration class after all\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"IntrospectionSupport.setProperties(camelContext, camelContext.getTypeConverter(), component, parameters);\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"return component;"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|createDataFormatBody (String shortJavaType, boolean hasOptions)
specifier|private
specifier|static
name|String
name|createDataFormatBody
parameter_list|(
name|String
name|shortJavaType
parameter_list|,
name|boolean
name|hasOptions
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"return new DataFormatFactory() {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    public DataFormat newInstance() {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        "
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|" dataformat = new "
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|"();"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        if (CamelContextAware.class.isAssignableFrom("
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|".class)) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            CamelContextAware contextAware = CamelContextAware.class.cast(dataformat);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            if (contextAware != null) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                contextAware.setCamelContext(camelContext);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        }\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasOptions
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        try {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            Map<String, Object> parameters = new HashMap<>();\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            IntrospectionSupport.getProperties(configuration, parameters, null, false);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            IntrospectionSupport.setProperties(camelContext, camelContext.getTypeConverter(), dataformat, parameters);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        } catch (Exception e) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            throw new RuntimeCamelException(e);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        }\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        return dataformat;\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"};\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|createLanguageBody (String shortJavaType, boolean hasOptions)
specifier|private
specifier|static
name|String
name|createLanguageBody
parameter_list|(
name|String
name|shortJavaType
parameter_list|,
name|boolean
name|hasOptions
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|" language = new "
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|"();"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"if (CamelContextAware.class.isAssignableFrom("
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|".class)) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    CamelContextAware contextAware = CamelContextAware.class.cast(language);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    if (contextAware != null) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        contextAware.setCamelContext(camelContext);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasOptions
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Map<String, Object> parameters = new HashMap<>();\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"IntrospectionSupport.getProperties(configuration, parameters, null, false);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"IntrospectionSupport.setProperties(camelContext, camelContext.getTypeConverter(), language, parameters);\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"return language;"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|sortImports (JavaClassSource javaClass)
specifier|private
specifier|static
name|void
name|sortImports
parameter_list|(
name|JavaClassSource
name|javaClass
parameter_list|)
block|{
comment|// sort imports
name|List
argument_list|<
name|Import
argument_list|>
name|imports
init|=
name|javaClass
operator|.
name|getImports
argument_list|()
decl_stmt|;
comment|// sort imports
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Import
name|imp
range|:
name|imports
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|imp
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// sort
name|Collections
operator|.
name|sort
argument_list|(
name|names
argument_list|,
parameter_list|(
name|s1
parameter_list|,
name|s2
parameter_list|)
lambda|->
block|{
comment|// java comes first
if|if
condition|(
name|s1
operator|.
name|startsWith
argument_list|(
literal|"java."
argument_list|)
condition|)
block|{
name|s1
operator|=
literal|"___"
operator|+
name|s1
expr_stmt|;
block|}
if|if
condition|(
name|s2
operator|.
name|startsWith
argument_list|(
literal|"java."
argument_list|)
condition|)
block|{
name|s2
operator|=
literal|"___"
operator|+
name|s2
expr_stmt|;
block|}
comment|// then javax comes next
if|if
condition|(
name|s1
operator|.
name|startsWith
argument_list|(
literal|"javax."
argument_list|)
condition|)
block|{
name|s1
operator|=
literal|"__"
operator|+
name|s1
expr_stmt|;
block|}
if|if
condition|(
name|s2
operator|.
name|startsWith
argument_list|(
literal|"javax."
argument_list|)
condition|)
block|{
name|s2
operator|=
literal|"__"
operator|+
name|s2
expr_stmt|;
block|}
comment|// org.w3c is for some odd reason also before others
if|if
condition|(
name|s1
operator|.
name|startsWith
argument_list|(
literal|"org.w3c."
argument_list|)
condition|)
block|{
name|s1
operator|=
literal|"_"
operator|+
name|s1
expr_stmt|;
block|}
if|if
condition|(
name|s2
operator|.
name|startsWith
argument_list|(
literal|"org.w3c."
argument_list|)
condition|)
block|{
name|s2
operator|=
literal|"_"
operator|+
name|s2
expr_stmt|;
block|}
return|return
name|s1
operator|.
name|compareTo
argument_list|(
name|s2
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
comment|// remove all imports first
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|javaClass
operator|.
name|removeImport
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|// and add them back in correct order
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|javaClass
operator|.
name|addImport
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sourceToString (JavaClassSource javaClass)
specifier|private
specifier|static
name|String
name|sourceToString
parameter_list|(
name|JavaClassSource
name|javaClass
parameter_list|)
block|{
name|String
name|code
init|=
name|Formatter
operator|.
name|format
argument_list|(
name|javaClass
argument_list|)
decl_stmt|;
comment|// convert tabs to 4 spaces
name|code
operator|=
name|code
operator|.
name|replaceAll
argument_list|(
literal|"\\t"
argument_list|,
literal|"    "
argument_list|)
expr_stmt|;
return|return
name|code
return|;
block|}
DECL|method|loadComponentJson (Set<File> jsonFiles, String componentName)
specifier|private
specifier|static
name|String
name|loadComponentJson
parameter_list|(
name|Set
argument_list|<
name|File
argument_list|>
name|jsonFiles
parameter_list|,
name|String
name|componentName
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|File
name|file
range|:
name|jsonFiles
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|componentName
operator|+
literal|".json"
argument_list|)
condition|)
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isComponent
init|=
name|json
operator|.
name|contains
argument_list|(
literal|"\"kind\": \"component\""
argument_list|)
decl_stmt|;
if|if
condition|(
name|isComponent
condition|)
block|{
return|return
name|json
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|null
return|;
block|}
DECL|method|loadDataFormatJson (Set<File> jsonFiles, String dataFormatName)
specifier|private
specifier|static
name|String
name|loadDataFormatJson
parameter_list|(
name|Set
argument_list|<
name|File
argument_list|>
name|jsonFiles
parameter_list|,
name|String
name|dataFormatName
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|File
name|file
range|:
name|jsonFiles
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|dataFormatName
operator|+
literal|".json"
argument_list|)
condition|)
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isDataFormat
init|=
name|json
operator|.
name|contains
argument_list|(
literal|"\"kind\": \"dataformat\""
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDataFormat
condition|)
block|{
return|return
name|json
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|null
return|;
block|}
DECL|method|loadLanguageJson (Set<File> jsonFiles, String languageName)
specifier|private
specifier|static
name|String
name|loadLanguageJson
parameter_list|(
name|Set
argument_list|<
name|File
argument_list|>
name|jsonFiles
parameter_list|,
name|String
name|languageName
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|File
name|file
range|:
name|jsonFiles
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|languageName
operator|+
literal|".json"
argument_list|)
condition|)
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isLanguage
init|=
name|json
operator|.
name|contains
argument_list|(
literal|"\"kind\": \"language\""
argument_list|)
decl_stmt|;
if|if
condition|(
name|isLanguage
condition|)
block|{
return|return
name|json
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|null
return|;
block|}
DECL|method|generateComponentModel (String componentName, String json)
specifier|private
specifier|static
name|ComponentModel
name|generateComponentModel
parameter_list|(
name|String
name|componentName
parameter_list|,
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"component"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ComponentModel
name|component
init|=
operator|new
name|ComponentModel
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|component
operator|.
name|setScheme
argument_list|(
name|getSafeValue
argument_list|(
literal|"scheme"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setSyntax
argument_list|(
name|getSafeValue
argument_list|(
literal|"syntax"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setAlternativeSyntax
argument_list|(
name|getSafeValue
argument_list|(
literal|"alternativeSyntax"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setTitle
argument_list|(
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setFirstVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"firstVersion"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setLabel
argument_list|(
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setConsumerOnly
argument_list|(
name|getSafeValue
argument_list|(
literal|"consumerOnly"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setProducerOnly
argument_list|(
name|getSafeValue
argument_list|(
literal|"producerOnly"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setGroupId
argument_list|(
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setArtifactId
argument_list|(
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setVersion
argument_list|(
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"componentProperties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|ComponentOptionModel
name|option
init|=
operator|new
name|ComponentOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDisplayName
argument_list|(
name|getSafeValue
argument_list|(
literal|"displayName"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnums
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|addComponentOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|EndpointOptionModel
name|option
init|=
operator|new
name|EndpointOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDisplayName
argument_list|(
name|getSafeValue
argument_list|(
literal|"displayName"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setGroup
argument_list|(
name|getSafeValue
argument_list|(
literal|"group"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setRequired
argument_list|(
name|getSafeValue
argument_list|(
literal|"required"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnums
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setPrefix
argument_list|(
name|getSafeValue
argument_list|(
literal|"prefix"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setMultiValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"multiValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnumValues
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|addEndpointOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
return|return
name|component
return|;
block|}
DECL|method|generateDataFormatModel (String dataFormatName, String json)
specifier|private
specifier|static
name|DataFormatModel
name|generateDataFormatModel
parameter_list|(
name|String
name|dataFormatName
parameter_list|,
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"dataformat"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|DataFormatModel
name|dataFormat
init|=
operator|new
name|DataFormatModel
argument_list|()
decl_stmt|;
name|dataFormat
operator|.
name|setTitle
argument_list|(
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setModelName
argument_list|(
name|getSafeValue
argument_list|(
literal|"modelName"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setFirstVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"firstVersion"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setLabel
argument_list|(
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setGroupId
argument_list|(
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setArtifactId
argument_list|(
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setVersion
argument_list|(
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|DataFormatOptionModel
name|option
init|=
operator|new
name|DataFormatOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDisplayName
argument_list|(
name|getSafeValue
argument_list|(
literal|"displayName"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnumValues
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|addDataFormatOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
return|return
name|dataFormat
return|;
block|}
DECL|method|generateLanguageModel (String languageName, String json)
specifier|private
specifier|static
name|LanguageModel
name|generateLanguageModel
parameter_list|(
name|String
name|languageName
parameter_list|,
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"language"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|LanguageModel
name|language
init|=
operator|new
name|LanguageModel
argument_list|()
decl_stmt|;
name|language
operator|.
name|setTitle
argument_list|(
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setModelName
argument_list|(
name|getSafeValue
argument_list|(
literal|"modelName"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setFirstVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"firstVersion"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setLabel
argument_list|(
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setGroupId
argument_list|(
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setArtifactId
argument_list|(
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setVersion
argument_list|(
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|LanguageOptionModel
name|option
init|=
operator|new
name|LanguageOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDisplayName
argument_list|(
name|getSafeValue
argument_list|(
literal|"displayName"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnumValues
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|addLanguageOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
return|return
name|language
return|;
block|}
DECL|method|findComponentNames ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|findComponentNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|componentNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Resource
name|r
range|:
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getResources
argument_list|()
control|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|r
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|f
operator|=
operator|new
name|File
argument_list|(
name|project
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|r
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|f
operator|=
operator|new
name|File
argument_list|(
name|f
argument_list|,
literal|"META-INF/services/org/apache/camel/component"
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
comment|// skip directories as there may be a sub .resolver directory
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'.'
condition|)
block|{
name|componentNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|componentNames
return|;
block|}
DECL|method|findDataFormatNames ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|findDataFormatNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dataFormatNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Resource
name|r
range|:
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getResources
argument_list|()
control|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|r
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|f
operator|=
operator|new
name|File
argument_list|(
name|project
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|r
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|f
operator|=
operator|new
name|File
argument_list|(
name|f
argument_list|,
literal|"META-INF/services/org/apache/camel/dataformat"
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
comment|// skip directories as there may be a sub .resolver directory
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'.'
condition|)
block|{
name|dataFormatNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|dataFormatNames
return|;
block|}
DECL|method|findLanguageNames ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|findLanguageNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|languageNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Resource
name|r
range|:
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getResources
argument_list|()
control|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|r
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|f
operator|=
operator|new
name|File
argument_list|(
name|project
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|r
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|f
operator|=
operator|new
name|File
argument_list|(
name|f
argument_list|,
literal|"META-INF/services/org/apache/camel/language"
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
comment|// skip directories as there may be a sub .resolver directory
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'.'
condition|)
block|{
name|languageNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|languageNames
return|;
block|}
DECL|method|writeSourceIfChanged (JavaClassSource source, String fileName)
specifier|private
name|void
name|writeSourceIfChanged
parameter_list|(
name|JavaClassSource
name|source
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|SpringBootHelper
operator|.
name|starterSrcDir
argument_list|(
name|baseDir
argument_list|,
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|deleteFileOnMainArtifact
argument_list|(
name|target
argument_list|)
expr_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"license-header-java.txt"
argument_list|)
decl_stmt|;
name|String
name|header
init|=
name|loadText
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|sourceToString
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|code
operator|=
name|header
operator|+
name|code
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Source code generated:\n"
operator|+
name|code
argument_list|)
expr_stmt|;
if|if
condition|(
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|existing
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|code
operator|.
name|equals
argument_list|(
name|existing
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|write
argument_list|(
name|target
argument_list|,
name|code
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated existing file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to existing file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|FileUtils
operator|.
name|write
argument_list|(
name|target
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Created file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"IOError with file "
operator|+
name|target
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|writeComponentSpringFactorySource (String packageName, String name)
specifier|private
name|void
name|writeComponentSpringFactorySource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n"
argument_list|)
expr_stmt|;
name|String
name|lineToAdd
init|=
name|packageName
operator|+
literal|"."
operator|+
name|name
operator|+
literal|"\n"
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|lineToAdd
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
literal|"META-INF/spring.factories"
decl_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|SpringBootHelper
operator|.
name|starterResourceDir
argument_list|(
name|baseDir
argument_list|,
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|deleteFileOnMainArtifact
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
comment|// is the auto configuration already in the file
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|FileUtils
operator|.
name|readLines
argument_list|(
name|target
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to existing file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// find last non empty line, so we can add our new line after that
name|int
name|lastLine
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|lines
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|String
name|line
init|=
name|lines
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|line
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// adjust existing line so its being continued
name|line
operator|=
name|line
operator|+
literal|",\\"
expr_stmt|;
name|lines
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|lastLine
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
name|lines
operator|.
name|add
argument_list|(
name|lastLine
operator|+
literal|1
argument_list|,
name|lineToAdd
argument_list|)
expr_stmt|;
name|StringBuilder
name|code
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|code
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
comment|// update
name|FileUtils
operator|.
name|write
argument_list|(
name|target
argument_list|,
name|code
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated existing file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"IOError with file "
operator|+
name|target
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// create new file
try|try
block|{
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"license-header.txt"
argument_list|)
decl_stmt|;
name|String
name|header
init|=
name|loadText
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// add empty new line after header
name|code
operator|=
name|header
operator|+
literal|"\n"
operator|+
name|code
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Source code generated:\n"
operator|+
name|code
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|target
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Created file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"IOError with file "
operator|+
name|target
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|writeAdditionalSpringMetaData (String prefix, String type, String name)
specifier|private
name|void
name|writeAdditionalSpringMetaData
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|String
name|fullQualifiedName
init|=
name|prefix
operator|+
literal|"."
operator|+
name|type
operator|+
literal|"."
operator|+
name|name
operator|+
literal|"."
operator|+
literal|"enabled"
decl_stmt|;
name|String
name|fileName
init|=
literal|"META-INF/additional-spring-configuration-metadata.json"
decl_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|SpringBootHelper
operator|.
name|starterResourceDir
argument_list|(
name|baseDir
argument_list|,
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|deleteFileOnMainArtifact
argument_list|(
name|target
argument_list|)
expr_stmt|;
try|try
block|{
name|Gson
name|gson
init|=
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|setPrettyPrinting
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|properties
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|target
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|=
name|gson
operator|.
name|fromJson
argument_list|(
name|br
argument_list|,
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|properties
operator|=
operator|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"properties"
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
operator|&&
name|properties
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|m
lambda|->
name|fullQualifiedName
operator|.
name|equals
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to existing file: "
operator|+
name|target
argument_list|)
block|;
return|return;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|meta
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|meta
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|fullQualifiedName
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"java.lang.Boolean"
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
literal|"defaultValue"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
literal|"description"
argument_list|,
literal|"Enable "
operator|+
name|name
operator|+
literal|" "
operator|+
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|add
argument_list|(
name|meta
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"properties"
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|target
argument_list|,
name|gson
operator|.
name|toJson
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"IOError with file "
operator|+
name|target
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_class

begin_function
DECL|method|deleteFileOnMainArtifact (File starterFile)
specifier|private
name|void
name|deleteFileOnMainArtifact
parameter_list|(
name|File
name|starterFile
parameter_list|)
block|{
if|if
condition|(
operator|!
name|DELETE_FILES_ON_MAIN_ARTIFACTS
condition|)
block|{
return|return;
block|}
name|String
name|relativePath
init|=
name|SpringBootHelper
operator|.
name|starterDir
argument_list|(
name|baseDir
argument_list|,
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|toPath
argument_list|()
operator|.
name|relativize
argument_list|(
name|starterFile
operator|.
name|toPath
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|File
name|mainArtifactFile
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|relativePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|mainArtifactFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|boolean
name|deleted
init|=
name|mainArtifactFile
operator|.
name|delete
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot delete file "
operator|+
name|mainArtifactFile
argument_list|)
throw|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|createConditionType (JavaClassSource parentClass, String prefix, String type)
specifier|private
name|JavaClassSource
name|createConditionType
parameter_list|(
name|JavaClassSource
name|parentClass
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|parentClass
operator|.
name|addImport
argument_list|(
name|ConditionMessage
operator|.
name|class
argument_list|)
expr_stmt|;
name|parentClass
operator|.
name|addImport
argument_list|(
name|ConditionContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|parentClass
operator|.
name|addImport
argument_list|(
name|ConditionOutcome
operator|.
name|class
argument_list|)
expr_stmt|;
name|parentClass
operator|.
name|addImport
argument_list|(
name|RelaxedPropertyResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|parentClass
operator|.
name|addImport
argument_list|(
name|AnnotatedTypeMetadata
operator|.
name|class
argument_list|)
expr_stmt|;
name|parentClass
operator|.
name|addImport
argument_list|(
name|SpringBootCondition
operator|.
name|class
argument_list|)
expr_stmt|;
name|JavaClassSource
name|condition
init|=
name|Roaster
operator|.
name|create
argument_list|(
name|JavaClassSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|condition
operator|.
name|setName
argument_list|(
literal|"Condition"
argument_list|)
expr_stmt|;
name|condition
operator|.
name|extendSuperType
argument_list|(
name|SpringBootCondition
operator|.
name|class
argument_list|)
expr_stmt|;
name|condition
operator|.
name|setPublic
argument_list|()
expr_stmt|;
name|condition
operator|.
name|setStatic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|fullQualifiedType
init|=
name|prefix
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|?
name|prefix
operator|+
name|type
else|:
name|prefix
operator|+
literal|"."
operator|+
name|type
decl_stmt|;
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|isEnabled
init|=
name|condition
operator|.
name|addMethod
argument_list|()
decl_stmt|;
name|isEnabled
operator|.
name|setName
argument_list|(
literal|"isEnabled"
argument_list|)
expr_stmt|;
name|isEnabled
operator|.
name|setPrivate
argument_list|()
expr_stmt|;
name|isEnabled
operator|.
name|addParameter
argument_list|(
name|ConditionContext
operator|.
name|class
argument_list|,
literal|"context"
argument_list|)
expr_stmt|;
name|isEnabled
operator|.
name|addParameter
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"prefix"
argument_list|)
expr_stmt|;
name|isEnabled
operator|.
name|addParameter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"defaultValue"
argument_list|)
expr_stmt|;
name|isEnabled
operator|.
name|setReturnType
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|isEnabled
operator|.
name|setBody
argument_list|(
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(context.getEnvironment(), prefix);\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"return resolver.getProperty(\"enabled\", Boolean.class, defaultValue);"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|matchMethod
init|=
name|condition
operator|.
name|getMethod
argument_list|(
literal|"getMatchOutcome"
argument_list|,
name|ConditionContext
operator|.
name|class
argument_list|,
name|AnnotatedTypeMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|matchMethod
operator|.
name|setBody
argument_list|(
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"boolean groupEnabled = isEnabled(conditionContext, \""
argument_list|)
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|".\", true);\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"ConditionMessage.Builder message = ConditionMessage.forCondition(\""
argument_list|)
operator|.
name|append
argument_list|(
name|fullQualifiedType
argument_list|)
operator|.
name|append
argument_list|(
literal|"\");\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"if (isEnabled(conditionContext, \""
argument_list|)
operator|.
name|append
argument_list|(
name|fullQualifiedType
argument_list|)
operator|.
name|append
argument_list|(
literal|".\", groupEnabled)) {\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"    return ConditionOutcome.match(message.because(\"enabled\"));\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"return ConditionOutcome.noMatch(message.because(\"not enabled\"));\n"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|condition
return|;
block|}
end_function

unit|}
end_unit

