begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|ComponentModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|ComponentOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|EndpointOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|Roaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|AnnotationSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|Import
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|JavaClassSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|MethodSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|PropertySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|plexus
operator|.
name|build
operator|.
name|incremental
operator|.
name|BuildContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnMissingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|EnableConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|JSonSchemaHelper
operator|.
name|getSafeValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|PackageHelper
operator|.
name|loadText
import|;
end_import

begin_comment
comment|/**  * Generate Spring Boot auto configuration files for Camel components.  *  * @goal prepare-spring-boot-auto-configuration  */
end_comment

begin_class
DECL|class|SpringBootAutoConfigurationMojo
specifier|public
class|class
name|SpringBootAutoConfigurationMojo
extends|extends
name|AbstractMojo
block|{
comment|/**      * The maven project.      *      * @parameter property="project"      * @required      * @readonly      */
DECL|field|project
specifier|protected
name|MavenProject
name|project
decl_stmt|;
comment|/**      * The project build directory      *      * @parameter default-value="${project.build.directory}"      */
DECL|field|buildDir
specifier|protected
name|File
name|buildDir
decl_stmt|;
comment|/**      * The source directory      *      * @parameter default-value="${basedir}/src/main/java"      */
DECL|field|srcDir
specifier|protected
name|File
name|srcDir
decl_stmt|;
comment|/**      * The resources directory      *      * @parameter default-value="${basedir}/src/main/resources"      */
DECL|field|resourcesDir
specifier|protected
name|File
name|resourcesDir
decl_stmt|;
comment|/**      * build context to check changed files and mark them for refresh (used for      * m2e compatibility)      *      * @component      * @readonly      */
DECL|field|buildContext
specifier|private
name|BuildContext
name|buildContext
decl_stmt|;
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
comment|// find the component names
name|List
argument_list|<
name|String
argument_list|>
name|componentNames
init|=
name|findComponentNames
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|File
argument_list|>
name|jsonFiles
init|=
operator|new
name|TreeSet
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|PackageHelper
operator|.
name|findJsonFiles
argument_list|(
name|buildDir
argument_list|,
name|jsonFiles
argument_list|,
operator|new
name|PackageHelper
operator|.
name|CamelComponentsModelFilter
argument_list|()
argument_list|)
expr_stmt|;
comment|// create auto configuration for the components
if|if
condition|(
operator|!
name|componentNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
name|componentNames
operator|.
name|size
argument_list|()
operator|+
literal|" components"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|componentName
range|:
name|componentNames
control|)
block|{
name|String
name|json
init|=
name|loadComponentJson
argument_list|(
name|jsonFiles
argument_list|,
name|componentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|ComponentModel
name|model
init|=
name|generateComponentModel
argument_list|(
name|componentName
argument_list|,
name|json
argument_list|)
decl_stmt|;
comment|// only create source code if the component has options that can be used in auto configuration
if|if
condition|(
operator|!
name|model
operator|.
name|getComponentOptions
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// use springboot as sub package name so the code is not in normal
comment|// package so the Spring Boot JARs can be optional at runtime
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|pkg
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
literal|".springboot"
decl_stmt|;
name|createComponentConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|)
expr_stmt|;
name|createComponentAutoConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|)
expr_stmt|;
name|createSpringFactorySource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|createComponentConfigurationSource (String packageName, ComponentModel model)
specifier|private
name|void
name|createComponentConfigurationSource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|ComponentModel
name|model
parameter_list|)
throws|throws
name|MojoFailureException
block|{
specifier|final
name|JavaClassSource
name|javaClass
init|=
name|Roaster
operator|.
name|create
argument_list|(
name|JavaClassSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"Component"
argument_list|,
literal|"ComponentConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|String
name|doc
init|=
literal|"Generated by camel-package-maven-plugin - do not edit this file!"
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|model
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|doc
operator|=
name|model
operator|.
name|getDescription
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|doc
expr_stmt|;
block|}
name|javaClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
literal|"camel.component."
operator|+
name|model
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
literal|"org.springframework.boot.context.properties.ConfigurationProperties"
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"prefix"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
for|for
control|(
name|ComponentOptionModel
name|option
range|:
name|model
operator|.
name|getComponentOptions
argument_list|()
control|)
block|{
comment|// remove<?> as generic type as Roaster (Eclipse JDT) cannot use that
name|String
name|type
init|=
name|option
operator|.
name|getJavaType
argument_list|()
decl_stmt|;
name|type
operator|=
name|type
operator|.
name|replaceAll
argument_list|(
literal|"\\<\\?\\>"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|PropertySource
argument_list|<
name|JavaClassSource
argument_list|>
name|prop
init|=
name|javaClass
operator|.
name|addProperty
argument_list|(
name|type
argument_list|,
name|option
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getDeprecated
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|sortImports
argument_list|(
name|javaClass
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".java"
decl_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|srcDir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"license-header-java.txt"
argument_list|)
decl_stmt|;
name|String
name|header
init|=
name|loadText
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|sourceToString
argument_list|(
name|javaClass
argument_list|)
decl_stmt|;
name|code
operator|=
name|header
operator|+
name|code
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Source code generated:\n"
operator|+
name|code
argument_list|)
expr_stmt|;
if|if
condition|(
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|existing
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|code
operator|.
name|equals
argument_list|(
name|existing
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|write
argument_list|(
name|target
argument_list|,
name|code
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated existing file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"No changes to existing file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|FileUtils
operator|.
name|write
argument_list|(
name|target
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Created file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"IOError with file "
operator|+
name|target
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createComponentAutoConfigurationSource (String packageName, ComponentModel model)
specifier|private
name|void
name|createComponentAutoConfigurationSource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|ComponentModel
name|model
parameter_list|)
throws|throws
name|MojoFailureException
block|{
specifier|final
name|JavaClassSource
name|javaClass
init|=
name|Roaster
operator|.
name|create
argument_list|(
name|JavaClassSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"Component"
argument_list|,
literal|"ComponentAutoConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|String
name|doc
init|=
literal|"Generated by camel-package-maven-plugin - do not edit this file!"
decl_stmt|;
name|javaClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|configurationName
init|=
name|name
operator|.
name|replace
argument_list|(
literal|"ComponentAutoConfiguration"
argument_list|,
literal|"ComponentConfiguration"
argument_list|)
decl_stmt|;
name|AnnotationSource
argument_list|<
name|JavaClassSource
argument_list|>
name|ann
init|=
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|EnableConfigurationProperties
operator|.
name|class
argument_list|)
decl_stmt|;
name|ann
operator|.
name|setLiteralValue
argument_list|(
literal|"value"
argument_list|,
name|configurationName
operator|+
literal|".class"
argument_list|)
expr_stmt|;
comment|// add method for auto configure
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"java.util.HashMap"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"java.util.Map"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.CamelContext"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.util.IntrospectionSupport"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|createBody
argument_list|(
name|model
operator|.
name|getShortJavaType
argument_list|()
argument_list|)
decl_stmt|;
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|method
init|=
name|javaClass
operator|.
name|addMethod
argument_list|()
operator|.
name|setName
argument_list|(
literal|"configureComponent"
argument_list|)
operator|.
name|setPublic
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
operator|.
name|setReturnType
argument_list|(
name|model
operator|.
name|getShortJavaType
argument_list|()
argument_list|)
operator|.
name|addThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
name|method
operator|.
name|addParameter
argument_list|(
literal|"CamelContext"
argument_list|,
literal|"camelContext"
argument_list|)
expr_stmt|;
name|method
operator|.
name|addParameter
argument_list|(
name|configurationName
argument_list|,
literal|"configuration"
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|Bean
operator|.
name|class
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnClass
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"value"
argument_list|,
literal|"CamelContext.class"
argument_list|)
expr_stmt|;
name|method
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnMissingBean
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"value"
argument_list|,
name|model
operator|.
name|getShortJavaType
argument_list|()
operator|+
literal|".class"
argument_list|)
expr_stmt|;
name|sortImports
argument_list|(
name|javaClass
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".java"
decl_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|srcDir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"license-header-java.txt"
argument_list|)
decl_stmt|;
name|String
name|header
init|=
name|loadText
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|sourceToString
argument_list|(
name|javaClass
argument_list|)
decl_stmt|;
name|code
operator|=
name|header
operator|+
name|code
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Source code generated:\n"
operator|+
name|code
argument_list|)
expr_stmt|;
if|if
condition|(
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|existing
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|code
operator|.
name|equals
argument_list|(
name|existing
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|write
argument_list|(
name|target
argument_list|,
name|code
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated existing file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"No changes to existing file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|FileUtils
operator|.
name|write
argument_list|(
name|target
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Created file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"IOError with file "
operator|+
name|target
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createSpringFactorySource (String packageName, ComponentModel model)
specifier|private
name|void
name|createSpringFactorySource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|ComponentModel
name|model
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n"
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|model
operator|.
name|getJavaType
argument_list|()
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"Component"
argument_list|,
literal|"ComponentAutoConfiguration"
argument_list|)
expr_stmt|;
name|String
name|lineToAdd
init|=
name|packageName
operator|+
literal|"."
operator|+
name|name
operator|+
literal|"\n"
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|lineToAdd
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
literal|"META-INF/spring.factories"
decl_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|resourcesDir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
comment|// is the auto configuration already in the file
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|FileUtils
operator|.
name|readLines
argument_list|(
name|target
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"No changes to existing file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// find last non empty line, so we can add our new line after that
name|int
name|lastLine
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|lines
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|String
name|line
init|=
name|lines
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|line
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// adjust existing line so its being continued
name|line
operator|=
name|line
operator|+
literal|",\\"
expr_stmt|;
name|lines
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|lastLine
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
name|lines
operator|.
name|add
argument_list|(
name|lastLine
operator|+
literal|1
argument_list|,
name|lineToAdd
argument_list|)
expr_stmt|;
name|StringBuilder
name|code
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|code
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
comment|// update
name|FileUtils
operator|.
name|write
argument_list|(
name|target
argument_list|,
name|code
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated existing file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"IOError with file "
operator|+
name|target
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// create new file
try|try
block|{
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"license-header.txt"
argument_list|)
decl_stmt|;
name|String
name|header
init|=
name|loadText
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// add empty new line after header
name|code
operator|=
name|header
operator|+
literal|"\n"
operator|+
name|code
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Source code generated:\n"
operator|+
name|code
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|target
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Created file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"IOError with file "
operator|+
name|target
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|createBody (String shortJavaType)
specifier|private
specifier|static
name|String
name|createBody
parameter_list|(
name|String
name|shortJavaType
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|" component = new "
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|"();"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"component.setCamelContext(camelContext);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Map<String, Object> parameters = new HashMap<>();\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"IntrospectionSupport.getProperties(configuration, parameters, null);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"IntrospectionSupport.setProperties(camelContext, camelContext.getTypeConverter(), component, parameters);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"return component;"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|sortImports (JavaClassSource javaClass)
specifier|private
specifier|static
name|void
name|sortImports
parameter_list|(
name|JavaClassSource
name|javaClass
parameter_list|)
block|{
comment|// sort imports
name|List
argument_list|<
name|Import
argument_list|>
name|imports
init|=
name|javaClass
operator|.
name|getImports
argument_list|()
decl_stmt|;
comment|// sort imports
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Import
name|imp
range|:
name|imports
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|imp
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// sort
name|Collections
operator|.
name|sort
argument_list|(
name|names
argument_list|,
parameter_list|(
name|s1
parameter_list|,
name|s2
parameter_list|)
lambda|->
block|{
comment|// java comes first
if|if
condition|(
name|s1
operator|.
name|startsWith
argument_list|(
literal|"java."
argument_list|)
condition|)
block|{
name|s1
operator|=
literal|"___"
operator|+
name|s1
expr_stmt|;
block|}
if|if
condition|(
name|s2
operator|.
name|startsWith
argument_list|(
literal|"java."
argument_list|)
condition|)
block|{
name|s2
operator|=
literal|"___"
operator|+
name|s2
expr_stmt|;
block|}
comment|// then javax comes next
if|if
condition|(
name|s1
operator|.
name|startsWith
argument_list|(
literal|"javax."
argument_list|)
condition|)
block|{
name|s1
operator|=
literal|"__"
operator|+
name|s1
expr_stmt|;
block|}
if|if
condition|(
name|s2
operator|.
name|startsWith
argument_list|(
literal|"javax."
argument_list|)
condition|)
block|{
name|s2
operator|=
literal|"__"
operator|+
name|s2
expr_stmt|;
block|}
comment|// org.w3c is for some odd reason also before others
if|if
condition|(
name|s1
operator|.
name|startsWith
argument_list|(
literal|"org.w3c."
argument_list|)
condition|)
block|{
name|s1
operator|=
literal|"_"
operator|+
name|s1
expr_stmt|;
block|}
if|if
condition|(
name|s2
operator|.
name|startsWith
argument_list|(
literal|"org.w3c."
argument_list|)
condition|)
block|{
name|s2
operator|=
literal|"_"
operator|+
name|s2
expr_stmt|;
block|}
return|return
name|s1
operator|.
name|compareTo
argument_list|(
name|s2
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
comment|// remove all imports first
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|javaClass
operator|.
name|removeImport
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|// and add them back in correct order
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|javaClass
operator|.
name|addImport
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sourceToString (JavaClassSource javaClass)
specifier|private
specifier|static
name|String
name|sourceToString
parameter_list|(
name|JavaClassSource
name|javaClass
parameter_list|)
block|{
name|String
name|code
init|=
name|javaClass
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// convert tabs to 4 spaces
name|code
operator|=
name|code
operator|.
name|replaceAll
argument_list|(
literal|"\\t"
argument_list|,
literal|"    "
argument_list|)
expr_stmt|;
return|return
name|code
return|;
block|}
DECL|method|loadComponentJson (Set<File> jsonFiles, String componentName)
specifier|private
specifier|static
name|String
name|loadComponentJson
parameter_list|(
name|Set
argument_list|<
name|File
argument_list|>
name|jsonFiles
parameter_list|,
name|String
name|componentName
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|File
name|file
range|:
name|jsonFiles
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|componentName
operator|+
literal|".json"
argument_list|)
condition|)
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isComponent
init|=
name|json
operator|.
name|contains
argument_list|(
literal|"\"kind\": \"component\""
argument_list|)
decl_stmt|;
if|if
condition|(
name|isComponent
condition|)
block|{
return|return
name|json
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|null
return|;
block|}
DECL|method|generateComponentModel (String componentName, String json)
specifier|private
specifier|static
name|ComponentModel
name|generateComponentModel
parameter_list|(
name|String
name|componentName
parameter_list|,
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"component"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ComponentModel
name|component
init|=
operator|new
name|ComponentModel
argument_list|()
decl_stmt|;
name|component
operator|.
name|setScheme
argument_list|(
name|getSafeValue
argument_list|(
literal|"scheme"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setSyntax
argument_list|(
name|getSafeValue
argument_list|(
literal|"syntax"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setAlternativeSyntax
argument_list|(
name|getSafeValue
argument_list|(
literal|"alternativeSyntax"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setTitle
argument_list|(
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setLabel
argument_list|(
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setConsumerOnly
argument_list|(
name|getSafeValue
argument_list|(
literal|"consumerOnly"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setProducerOnly
argument_list|(
name|getSafeValue
argument_list|(
literal|"producerOnly"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setGroupId
argument_list|(
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setArtifactId
argument_list|(
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setVersion
argument_list|(
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"componentProperties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|ComponentOptionModel
name|option
init|=
operator|new
name|ComponentOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|addComponentOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|EndpointOptionModel
name|option
init|=
operator|new
name|EndpointOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setGroup
argument_list|(
name|getSafeValue
argument_list|(
literal|"group"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setRequired
argument_list|(
name|getSafeValue
argument_list|(
literal|"required"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnums
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setPrefix
argument_list|(
name|getSafeValue
argument_list|(
literal|"prefix"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setMultiValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"multiValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|addEndpointOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
return|return
name|component
return|;
block|}
DECL|method|findComponentNames ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|findComponentNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|componentNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Resource
name|r
range|:
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getResources
argument_list|()
control|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|r
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|f
operator|=
operator|new
name|File
argument_list|(
name|project
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|r
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|f
operator|=
operator|new
name|File
argument_list|(
name|f
argument_list|,
literal|"META-INF/services/org/apache/camel/component"
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
comment|// skip directories as there may be a sub .resolver directory
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'.'
condition|)
block|{
name|componentNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|componentNames
return|;
block|}
block|}
end_class

end_unit

