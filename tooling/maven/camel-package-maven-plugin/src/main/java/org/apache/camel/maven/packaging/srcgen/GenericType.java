begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging.srcgen
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|srcgen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|TypeVariable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|WildcardType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|class|GenericType
specifier|public
class|class
name|GenericType
block|{
DECL|field|ALL
specifier|private
specifier|static
specifier|final
name|GenericType
name|ALL
init|=
operator|new
name|GenericType
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|EMPTY
specifier|private
specifier|static
specifier|final
name|GenericType
index|[]
name|EMPTY
init|=
operator|new
name|GenericType
index|[
literal|0
index|]
decl_stmt|;
DECL|field|PRIMITIVE_CLASSES
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|PRIMITIVE_CLASSES
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|enum|BoundType
enum|enum
name|BoundType
block|{
DECL|enumConstant|Exact
DECL|enumConstant|Extends
DECL|enumConstant|Super
name|Exact
block|,
name|Extends
block|,
name|Super
block|}
DECL|field|clazz
specifier|private
specifier|final
name|Class
name|clazz
decl_stmt|;
DECL|field|parameters
specifier|private
name|GenericType
index|[]
name|parameters
decl_stmt|;
DECL|field|boundType
specifier|private
name|BoundType
name|boundType
decl_stmt|;
static|static
block|{
name|PRIMITIVE_CLASSES
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_CLASSES
operator|.
name|put
argument_list|(
literal|"short"
argument_list|,
name|short
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_CLASSES
operator|.
name|put
argument_list|(
literal|"long"
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_CLASSES
operator|.
name|put
argument_list|(
literal|"byte"
argument_list|,
name|byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_CLASSES
operator|.
name|put
argument_list|(
literal|"char"
argument_list|,
name|char
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_CLASSES
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
name|float
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_CLASSES
operator|.
name|put
argument_list|(
literal|"double"
argument_list|,
name|double
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_CLASSES
operator|.
name|put
argument_list|(
literal|"boolean"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_CLASSES
operator|.
name|put
argument_list|(
literal|"void"
argument_list|,
name|void
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|GenericType (Type type)
specifier|public
name|GenericType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|getConcreteClass
argument_list|(
name|type
argument_list|)
argument_list|,
name|parametersOf
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|GenericType (Class clazz, GenericType... parameters)
specifier|public
name|GenericType
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|GenericType
modifier|...
name|parameters
parameter_list|)
block|{
name|this
argument_list|(
name|clazz
argument_list|,
name|BoundType
operator|.
name|Exact
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
DECL|method|GenericType (Class clazz, BoundType boundType, GenericType... parameters)
specifier|public
name|GenericType
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|BoundType
name|boundType
parameter_list|,
name|GenericType
modifier|...
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
name|this
operator|.
name|boundType
operator|=
name|boundType
expr_stmt|;
block|}
DECL|method|parse (String type, ClassLoader loader)
specifier|public
specifier|static
name|GenericType
name|parse
parameter_list|(
name|String
name|type
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|IllegalArgumentException
block|{
name|type
operator|=
name|type
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// Check if this is an array
if|if
condition|(
name|type
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|)
block|{
name|GenericType
name|t
init|=
name|parse
argument_list|(
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|type
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|,
name|loader
argument_list|)
decl_stmt|;
return|return
operator|new
name|GenericType
argument_list|(
name|Array
operator|.
name|newInstance
argument_list|(
name|t
operator|.
name|getRawClass
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|,
name|t
argument_list|)
return|;
block|}
comment|// Check if this is a generic
name|int
name|genericIndex
init|=
name|type
operator|.
name|indexOf
argument_list|(
literal|'<'
argument_list|)
decl_stmt|;
if|if
condition|(
name|genericIndex
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|endsWith
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can not load type: "
operator|+
name|type
argument_list|)
throw|;
block|}
name|GenericType
name|base
init|=
name|parse
argument_list|(
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|genericIndex
argument_list|)
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|String
index|[]
name|params
init|=
name|type
operator|.
name|substring
argument_list|(
name|genericIndex
operator|+
literal|1
argument_list|,
name|type
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|GenericType
index|[]
name|types
init|=
operator|new
name|GenericType
index|[
name|params
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
name|parse
argument_list|(
name|params
index|[
name|i
index|]
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|GenericType
argument_list|(
name|base
operator|.
name|getRawClass
argument_list|()
argument_list|,
name|types
argument_list|)
return|;
block|}
comment|// Primitive
if|if
condition|(
name|isPrimitive
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
operator|new
name|GenericType
argument_list|(
name|PRIMITIVE_CLASSES
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
comment|// Extends
if|if
condition|(
name|type
operator|.
name|startsWith
argument_list|(
literal|"? extends "
argument_list|)
condition|)
block|{
name|String
name|raw
init|=
name|type
operator|.
name|substring
argument_list|(
literal|"? extends "
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|GenericType
argument_list|(
name|loadClass
argument_list|(
name|loader
argument_list|,
name|raw
argument_list|)
argument_list|,
name|BoundType
operator|.
name|Extends
argument_list|)
return|;
block|}
comment|// Super
if|if
condition|(
name|type
operator|.
name|startsWith
argument_list|(
literal|"? super "
argument_list|)
condition|)
block|{
name|String
name|raw
init|=
name|type
operator|.
name|substring
argument_list|(
literal|"? extends "
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|GenericType
argument_list|(
name|loadClass
argument_list|(
name|loader
argument_list|,
name|raw
argument_list|)
argument_list|,
name|BoundType
operator|.
name|Super
argument_list|)
return|;
block|}
comment|// Wildcard
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
return|return
operator|new
name|GenericType
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|BoundType
operator|.
name|Extends
argument_list|)
return|;
block|}
comment|// Class
if|if
condition|(
name|loader
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|GenericType
argument_list|(
name|loadClass
argument_list|(
name|loader
argument_list|,
name|type
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported loader: "
operator|+
name|loader
argument_list|)
throw|;
block|}
block|}
DECL|method|isPrimitive (String type)
specifier|static
name|boolean
name|isPrimitive
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|PRIMITIVE_CLASSES
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|loadClass (ClassLoader loader, String loadClassName)
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|ClassLoader
name|loader
parameter_list|,
name|String
name|loadClassName
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|optionClass
decl_stmt|;
name|String
name|org
init|=
name|loadClassName
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|optionClass
operator|=
name|loader
operator|.
name|loadClass
argument_list|(
name|loadClassName
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|int
name|dotIndex
init|=
name|loadClassName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotIndex
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
name|org
argument_list|)
throw|;
block|}
else|else
block|{
name|loadClassName
operator|=
name|loadClassName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotIndex
argument_list|)
operator|+
literal|"$"
operator|+
name|loadClassName
operator|.
name|substring
argument_list|(
name|dotIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|optionClass
return|;
block|}
DECL|method|getRawClass ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getRawClass
parameter_list|()
block|{
return|return
name|clazz
return|;
block|}
DECL|method|getActualTypeArgument (int i)
specifier|public
name|GenericType
name|getActualTypeArgument
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|parameters
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|ALL
return|;
block|}
return|return
name|parameters
index|[
name|i
index|]
return|;
block|}
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|parameters
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|parameters
operator|.
name|length
operator|==
literal|0
operator|&&
name|boundType
operator|==
name|BoundType
operator|.
name|Extends
operator|&&
name|clazz
operator|==
name|Object
operator|.
name|class
condition|)
block|{
return|return
literal|"?"
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|boundType
operator|==
name|BoundType
operator|.
name|Extends
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"? extends "
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|boundType
operator|==
name|BoundType
operator|.
name|Super
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"? super "
argument_list|)
expr_stmt|;
block|}
name|Class
name|cl
init|=
name|getRawClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|cl
operator|.
name|isArray
argument_list|()
condition|)
block|{
if|if
condition|(
name|parameters
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|parameters
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|"[]"
return|;
block|}
else|else
block|{
return|return
name|cl
operator|.
name|getComponentType
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[]"
return|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|parameters
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|parameters
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|boundType
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|boundType
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|clazz
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|clazz
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|Arrays
operator|.
name|hashCode
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|equals (Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|object
operator|instanceof
name|GenericType
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|GenericType
name|other
init|=
operator|(
name|GenericType
operator|)
name|object
decl_stmt|;
if|if
condition|(
name|getRawClass
argument_list|()
operator|!=
name|other
operator|.
name|getRawClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|boundType
operator|!=
name|other
operator|.
name|boundType
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|parameters
operator|==
literal|null
condition|)
block|{
return|return
name|other
operator|.
name|parameters
operator|==
literal|null
return|;
block|}
else|else
block|{
if|if
condition|(
name|other
operator|.
name|parameters
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|parameters
operator|.
name|length
operator|!=
name|other
operator|.
name|parameters
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|parameters
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|other
operator|.
name|parameters
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
DECL|method|bound (GenericType type)
specifier|static
name|GenericType
name|bound
parameter_list|(
name|GenericType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|boundType
operator|!=
name|BoundType
operator|.
name|Exact
condition|)
block|{
return|return
operator|new
name|GenericType
argument_list|(
name|type
operator|.
name|getRawClass
argument_list|()
argument_list|,
name|BoundType
operator|.
name|Exact
argument_list|,
name|type
operator|.
name|parameters
argument_list|)
return|;
block|}
return|return
name|type
return|;
block|}
DECL|method|boundType (GenericType type)
specifier|static
name|BoundType
name|boundType
parameter_list|(
name|GenericType
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|boundType
return|;
block|}
DECL|method|boundType (Type type)
specifier|static
name|BoundType
name|boundType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|WildcardType
condition|)
block|{
name|WildcardType
name|wct
init|=
operator|(
name|WildcardType
operator|)
name|type
decl_stmt|;
return|return
name|wct
operator|.
name|getLowerBounds
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|?
name|BoundType
operator|.
name|Extends
else|:
name|BoundType
operator|.
name|Super
return|;
block|}
return|return
name|BoundType
operator|.
name|Exact
return|;
block|}
DECL|method|parametersOf (Type type)
specifier|static
name|GenericType
index|[]
name|parametersOf
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
name|Class
name|clazz
init|=
operator|(
name|Class
operator|)
name|type
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|GenericType
name|t
init|=
operator|new
name|GenericType
argument_list|(
name|clazz
operator|.
name|getComponentType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|GenericType
index|[]
block|{
name|t
block|}
return|;
block|}
else|else
block|{
return|return
name|EMPTY
return|;
block|}
block|}
else|else
block|{
return|return
name|EMPTY
return|;
block|}
block|}
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|pt
init|=
operator|(
name|ParameterizedType
operator|)
name|type
decl_stmt|;
name|Type
index|[]
name|parameters
init|=
name|pt
operator|.
name|getActualTypeArguments
argument_list|()
decl_stmt|;
name|GenericType
index|[]
name|gts
init|=
operator|new
name|GenericType
index|[
name|parameters
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|gts
index|[
name|i
index|]
operator|=
operator|new
name|GenericType
argument_list|(
name|parameters
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|gts
return|;
block|}
if|if
condition|(
name|type
operator|instanceof
name|GenericArrayType
condition|)
block|{
return|return
operator|new
name|GenericType
index|[]
block|{
operator|new
name|GenericType
argument_list|(
operator|(
operator|(
name|GenericArrayType
operator|)
name|type
operator|)
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
block|}
return|;
block|}
if|if
condition|(
name|type
operator|instanceof
name|WildcardType
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
DECL|method|getConcreteClass (Type type)
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getConcreteClass
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|Type
name|ntype
init|=
name|collapse
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|ntype
operator|instanceof
name|Class
condition|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|ntype
return|;
block|}
if|if
condition|(
name|ntype
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
name|getConcreteClass
argument_list|(
name|collapse
argument_list|(
operator|(
operator|(
name|ParameterizedType
operator|)
name|ntype
operator|)
operator|.
name|getRawType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown type "
operator|+
name|type
argument_list|)
throw|;
block|}
DECL|method|collapse (Type target)
specifier|static
name|Type
name|collapse
parameter_list|(
name|Type
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|instanceof
name|Class
operator|||
name|target
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
name|target
return|;
block|}
elseif|else
if|if
condition|(
name|target
operator|instanceof
name|TypeVariable
condition|)
block|{
return|return
name|collapse
argument_list|(
operator|(
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|target
operator|)
operator|.
name|getBounds
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|target
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|Type
name|t
init|=
name|collapse
argument_list|(
operator|(
operator|(
name|GenericArrayType
operator|)
name|target
operator|)
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|t
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|t
operator|=
name|collapse
argument_list|(
operator|(
operator|(
name|ParameterizedType
operator|)
name|t
operator|)
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Array
operator|.
name|newInstance
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|t
argument_list|,
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|target
operator|instanceof
name|WildcardType
condition|)
block|{
name|WildcardType
name|wct
init|=
operator|(
name|WildcardType
operator|)
name|target
decl_stmt|;
if|if
condition|(
name|wct
operator|.
name|getLowerBounds
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|collapse
argument_list|(
name|wct
operator|.
name|getUpperBounds
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|collapse
argument_list|(
name|wct
operator|.
name|getLowerBounds
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Huh? "
operator|+
name|target
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

