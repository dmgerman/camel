begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging.generics
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|generics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|WildcardType
import|;
end_import

begin_class
DECL|class|OwbWildcardTypeImpl
specifier|public
class|class
name|OwbWildcardTypeImpl
implements|implements
name|WildcardType
block|{
DECL|field|upperBounds
specifier|private
name|Type
index|[]
name|upperBounds
decl_stmt|;
DECL|field|lowerBounds
specifier|private
name|Type
index|[]
name|lowerBounds
decl_stmt|;
DECL|method|OwbWildcardTypeImpl (Type[] upperBounds, Type[] lowerBounds)
specifier|public
name|OwbWildcardTypeImpl
parameter_list|(
name|Type
index|[]
name|upperBounds
parameter_list|,
name|Type
index|[]
name|lowerBounds
parameter_list|)
block|{
name|this
operator|.
name|upperBounds
operator|=
name|upperBounds
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|lowerBounds
operator|=
name|lowerBounds
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUpperBounds ()
specifier|public
name|Type
index|[]
name|getUpperBounds
parameter_list|()
block|{
return|return
name|upperBounds
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLowerBounds ()
specifier|public
name|Type
index|[]
name|getLowerBounds
parameter_list|()
block|{
return|return
name|lowerBounds
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"?"
argument_list|)
decl_stmt|;
if|if
condition|(
name|upperBounds
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" extends"
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Type
name|upperBound
range|:
name|upperBounds
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
if|if
condition|(
name|upperBound
operator|instanceof
name|Class
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|upperBound
operator|)
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
name|upperBound
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|lowerBounds
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" super"
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Type
name|lowerBound
range|:
name|lowerBounds
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
if|if
condition|(
name|lowerBound
operator|instanceof
name|Class
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|lowerBound
operator|)
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
name|lowerBound
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

