begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|ComponentModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|ComponentOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|DataFormatModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|DataFormatOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|EipModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|EipOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|EndpointOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|LanguageModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|LanguageOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mvel2
operator|.
name|templates
operator|.
name|TemplateRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|plexus
operator|.
name|build
operator|.
name|incremental
operator|.
name|BuildContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|JSonSchemaHelper
operator|.
name|getSafeValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|PackageHelper
operator|.
name|loadText
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|PackageHelper
operator|.
name|writeText
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|StringHelper
operator|.
name|isEmpty
import|;
end_import

begin_comment
comment|/**  * Generate or updates the component/dataformat/language/eip readme.md and .adoc files in the project root directory.  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"update-readme"
argument_list|,
name|threadSafe
operator|=
literal|true
argument_list|)
DECL|class|UpdateReadmeMojo
specifier|public
class|class
name|UpdateReadmeMojo
extends|extends
name|AbstractMojo
block|{
comment|/**      * The maven project.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"project"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|readonly
operator|=
literal|true
argument_list|)
DECL|field|project
specifier|protected
name|MavenProject
name|project
decl_stmt|;
comment|/**      * The project build directory      *      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}"
argument_list|)
DECL|field|buildDir
specifier|protected
name|File
name|buildDir
decl_stmt|;
comment|/**      * The documentation directory      *      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${basedir}/src/main/docs"
argument_list|)
DECL|field|docDir
specifier|protected
name|File
name|docDir
decl_stmt|;
comment|/**      * The documentation directory      *      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${basedir}/src/main/docs/eips"
argument_list|)
DECL|field|eipDocDir
specifier|protected
name|File
name|eipDocDir
decl_stmt|;
comment|/**      * Whether to fail the build fast if any Warnings was detected.      */
annotation|@
name|Parameter
DECL|field|failFast
specifier|protected
name|Boolean
name|failFast
decl_stmt|;
comment|/**      * build context to check changed files and mark them for refresh (used for      * m2e compatibility)      */
annotation|@
name|Component
DECL|field|buildContext
specifier|private
name|BuildContext
name|buildContext
decl_stmt|;
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
name|executeComponent
argument_list|()
expr_stmt|;
name|executeDataFormat
argument_list|()
expr_stmt|;
name|executeLanguage
argument_list|()
expr_stmt|;
name|executeEips
argument_list|()
expr_stmt|;
block|}
DECL|method|executeComponent ()
specifier|private
name|void
name|executeComponent
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
comment|// find the component names
name|List
argument_list|<
name|String
argument_list|>
name|componentNames
init|=
name|listDescriptorNamesOfType
argument_list|(
literal|"component"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|File
argument_list|>
name|jsonFiles
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|PackageHelper
operator|.
name|findJsonFiles
argument_list|(
name|buildDir
argument_list|,
name|jsonFiles
argument_list|,
operator|new
name|PackageHelper
operator|.
name|CamelComponentsModelFilter
argument_list|()
argument_list|)
expr_stmt|;
comment|// only if there is components we should update the documentation files
if|if
condition|(
operator|!
name|componentNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|componentNames
operator|.
name|size
argument_list|()
operator|+
literal|" components"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|componentName
range|:
name|componentNames
control|)
block|{
name|String
name|json
init|=
name|loadJsonFrom
argument_list|(
name|jsonFiles
argument_list|,
literal|"component"
argument_list|,
name|componentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
comment|// special for some components
name|componentName
operator|=
name|asComponentName
argument_list|(
name|componentName
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|docDir
argument_list|,
name|componentName
operator|+
literal|"-component.adoc"
argument_list|)
decl_stmt|;
name|ComponentModel
name|model
init|=
name|generateComponentModel
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|String
name|title
init|=
name|asComponentTitle
argument_list|(
name|model
operator|.
name|getScheme
argument_list|()
argument_list|,
name|model
operator|.
name|getTitle
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
comment|// we only want the first scheme as the alternatives do not have their own readme file
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|model
operator|.
name|getAlternativeSchemes
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|first
init|=
name|model
operator|.
name|getAlternativeSchemes
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|model
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|first
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
name|String
name|docTitle
init|=
name|model
operator|.
name|getTitle
argument_list|()
operator|+
literal|" Component"
decl_stmt|;
name|boolean
name|deprecated
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getDeprecated
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|deprecated
condition|)
block|{
name|docTitle
operator|+=
literal|" (deprecated)"
expr_stmt|;
block|}
name|boolean
name|exists
init|=
name|file
operator|.
name|exists
argument_list|()
decl_stmt|;
name|boolean
name|updated
decl_stmt|;
name|updated
operator|=
name|updateLink
argument_list|(
name|file
argument_list|,
name|componentName
operator|+
literal|"-component"
argument_list|)
expr_stmt|;
name|updated
operator||=
name|updateTitles
argument_list|(
name|file
argument_list|,
name|docTitle
argument_list|)
expr_stmt|;
name|updated
operator||=
name|updateAvailableFrom
argument_list|(
name|file
argument_list|,
name|model
operator|.
name|getFirstVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// resolvePropertyPlaceholders is an option which only make sense to use if the component has other options
name|boolean
name|hasOptions
init|=
name|model
operator|.
name|getComponentOptions
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|o
lambda|->
operator|!
name|o
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"resolvePropertyPlaceholders"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasOptions
condition|)
block|{
name|model
operator|.
name|getComponentOptions
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|String
name|options
init|=
name|evaluateTemplate
argument_list|(
literal|"component-options.mvel"
argument_list|,
name|model
argument_list|)
decl_stmt|;
name|updated
operator||=
name|updateOptionsIn
argument_list|(
name|file
argument_list|,
literal|"component"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|options
operator|=
name|evaluateTemplate
argument_list|(
literal|"endpoint-options.mvel"
argument_list|,
name|model
argument_list|)
expr_stmt|;
name|updated
operator||=
name|updateOptionsIn
argument_list|(
name|file
argument_list|,
literal|"endpoint"
argument_list|,
name|options
argument_list|)
expr_stmt|;
if|if
condition|(
name|updated
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exists
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"No component doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFailFast
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Failed build due failFast=true"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|executeDataFormat ()
specifier|private
name|void
name|executeDataFormat
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
comment|// find the dataformat names
name|List
argument_list|<
name|String
argument_list|>
name|dataFormatNames
init|=
name|listDescriptorNamesOfType
argument_list|(
literal|"dataformat"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|File
argument_list|>
name|jsonFiles
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|PackageHelper
operator|.
name|findJsonFiles
argument_list|(
name|buildDir
argument_list|,
name|jsonFiles
argument_list|,
operator|new
name|PackageHelper
operator|.
name|CamelComponentsModelFilter
argument_list|()
argument_list|)
expr_stmt|;
comment|// only if there is dataformat we should update the documentation files
if|if
condition|(
operator|!
name|dataFormatNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|dataFormatNames
operator|.
name|size
argument_list|()
operator|+
literal|" dataformats"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dataFormatName
range|:
name|dataFormatNames
control|)
block|{
name|String
name|json
init|=
name|loadJsonFrom
argument_list|(
name|jsonFiles
argument_list|,
literal|"dataformat"
argument_list|,
name|dataFormatName
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
comment|// special for some data formats
name|dataFormatName
operator|=
name|asDataFormatName
argument_list|(
name|dataFormatName
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|docDir
argument_list|,
name|dataFormatName
operator|+
literal|"-dataformat.adoc"
argument_list|)
decl_stmt|;
name|DataFormatModel
name|model
init|=
name|generateDataFormatModel
argument_list|(
name|dataFormatName
argument_list|,
name|json
argument_list|)
decl_stmt|;
name|String
name|title
init|=
name|asDataFormatTitle
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|,
name|model
operator|.
name|getTitle
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|String
name|docTitle
init|=
name|model
operator|.
name|getTitle
argument_list|()
operator|+
literal|" DataFormat"
decl_stmt|;
name|boolean
name|deprecated
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getDeprecated
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|deprecated
condition|)
block|{
name|docTitle
operator|+=
literal|" (deprecated)"
expr_stmt|;
block|}
name|boolean
name|exists
init|=
name|file
operator|.
name|exists
argument_list|()
decl_stmt|;
name|boolean
name|updated
decl_stmt|;
name|updated
operator|=
name|updateLink
argument_list|(
name|file
argument_list|,
name|dataFormatName
operator|+
literal|"-dataformat"
argument_list|)
expr_stmt|;
name|updated
operator||=
name|updateTitles
argument_list|(
name|file
argument_list|,
name|docTitle
argument_list|)
expr_stmt|;
name|updated
operator||=
name|updateAvailableFrom
argument_list|(
name|file
argument_list|,
name|model
operator|.
name|getFirstVersion
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|options
init|=
name|evaluateTemplate
argument_list|(
literal|"dataformat-options.mvel"
argument_list|,
name|model
argument_list|)
decl_stmt|;
name|updated
operator||=
name|updateOptionsIn
argument_list|(
name|file
argument_list|,
literal|"dataformat"
argument_list|,
name|options
argument_list|)
expr_stmt|;
if|if
condition|(
name|updated
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exists
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"No dataformat doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFailFast
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Failed build due failFast=true"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|asComponentName (String name)
specifier|private
specifier|static
name|String
name|asComponentName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// special for some components which share the same readme file
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"imap"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"imaps"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"pop3"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"pop3s"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"smtp"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"smtps"
argument_list|)
condition|)
block|{
return|return
literal|"mail"
return|;
block|}
return|return
name|name
return|;
block|}
DECL|method|executeLanguage ()
specifier|private
name|void
name|executeLanguage
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
comment|// find the language names
name|List
argument_list|<
name|String
argument_list|>
name|languageNames
init|=
name|listDescriptorNamesOfType
argument_list|(
literal|"language"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|File
argument_list|>
name|jsonFiles
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|PackageHelper
operator|.
name|findJsonFiles
argument_list|(
name|buildDir
argument_list|,
name|jsonFiles
argument_list|,
operator|new
name|PackageHelper
operator|.
name|CamelComponentsModelFilter
argument_list|()
argument_list|)
expr_stmt|;
comment|// only if there is language we should update the documentation files
if|if
condition|(
operator|!
name|languageNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|languageNames
operator|.
name|size
argument_list|()
operator|+
literal|" languages"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|languageName
range|:
name|languageNames
control|)
block|{
name|String
name|json
init|=
name|loadJsonFrom
argument_list|(
name|jsonFiles
argument_list|,
literal|"language"
argument_list|,
name|languageName
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|docDir
argument_list|,
name|languageName
operator|+
literal|"-language.adoc"
argument_list|)
decl_stmt|;
name|LanguageModel
name|model
init|=
name|generateLanguageModel
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|String
name|docTitle
init|=
name|model
operator|.
name|getTitle
argument_list|()
operator|+
literal|" Language"
decl_stmt|;
name|boolean
name|deprecated
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getDeprecated
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|deprecated
condition|)
block|{
name|docTitle
operator|+=
literal|" (deprecated)"
expr_stmt|;
block|}
name|boolean
name|exists
init|=
name|file
operator|.
name|exists
argument_list|()
decl_stmt|;
name|boolean
name|updated
decl_stmt|;
name|updated
operator|=
name|updateLink
argument_list|(
name|file
argument_list|,
name|languageName
operator|+
literal|"-language"
argument_list|)
expr_stmt|;
name|updated
operator||=
name|updateTitles
argument_list|(
name|file
argument_list|,
name|docTitle
argument_list|)
expr_stmt|;
name|updated
operator||=
name|updateAvailableFrom
argument_list|(
name|file
argument_list|,
name|model
operator|.
name|getFirstVersion
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|options
init|=
name|evaluateTemplate
argument_list|(
literal|"language-options.mvel"
argument_list|,
name|model
argument_list|)
decl_stmt|;
name|updated
operator||=
name|updateOptionsIn
argument_list|(
name|file
argument_list|,
literal|"language"
argument_list|,
name|options
argument_list|)
expr_stmt|;
if|if
condition|(
name|updated
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exists
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"No language doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFailFast
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Failed build due failFast=true"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|executeEips ()
specifier|private
name|void
name|executeEips
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
comment|// only run if in camel-core
name|String
name|currentDir
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"."
argument_list|)
operator|.
name|normalize
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|currentDir
operator|.
name|endsWith
argument_list|(
literal|"camel-core"
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|Set
argument_list|<
name|File
argument_list|>
name|jsonFiles
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// find all json files in camel-core
name|File
name|coreDir
init|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|coreDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|coreDir
argument_list|,
literal|"target/classes/org/apache/camel/model"
argument_list|)
decl_stmt|;
name|PackageHelper
operator|.
name|findJsonFiles
argument_list|(
name|target
argument_list|,
name|jsonFiles
argument_list|,
operator|new
name|PackageHelper
operator|.
name|CamelComponentsModelFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// only if there is dataformat we should update the documentation files
if|if
condition|(
operator|!
name|jsonFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|jsonFiles
operator|.
name|size
argument_list|()
operator|+
literal|" eips"
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|jsonFile
range|:
name|jsonFiles
control|)
block|{
name|String
name|json
init|=
name|loadEipJson
argument_list|(
name|jsonFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|EipModel
name|model
init|=
name|generateEipModel
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|String
name|title
init|=
name|model
operator|.
name|getTitle
argument_list|()
decl_stmt|;
name|model
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|String
name|eipName
init|=
name|model
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// we only want actual EIPs from the models
if|if
condition|(
operator|!
name|model
operator|.
name|getLabel
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"eip"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|eipDocDir
argument_list|,
name|eipName
operator|+
literal|"-eip.adoc"
argument_list|)
decl_stmt|;
name|String
name|docTitle
init|=
name|model
operator|.
name|getTitle
argument_list|()
operator|+
literal|" EIP"
decl_stmt|;
name|boolean
name|deprecated
init|=
name|model
operator|.
name|isDeprecated
argument_list|()
decl_stmt|;
if|if
condition|(
name|deprecated
condition|)
block|{
name|docTitle
operator|+=
literal|" (deprecated)"
expr_stmt|;
block|}
name|boolean
name|exists
init|=
name|file
operator|.
name|exists
argument_list|()
decl_stmt|;
name|boolean
name|updated
decl_stmt|;
name|updated
operator|=
name|updateLink
argument_list|(
name|file
argument_list|,
name|eipName
operator|+
literal|"-eip"
argument_list|)
expr_stmt|;
name|updated
operator||=
name|updateTitles
argument_list|(
name|file
argument_list|,
name|docTitle
argument_list|)
expr_stmt|;
name|String
name|options
init|=
name|evaluateTemplate
argument_list|(
literal|"eip-options.mvel"
argument_list|,
name|model
argument_list|)
decl_stmt|;
name|updated
operator||=
name|updateOptionsIn
argument_list|(
name|file
argument_list|,
literal|"eip"
argument_list|,
name|options
argument_list|)
expr_stmt|;
if|if
condition|(
name|updated
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exists
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"No eip doc file: "
operator|+
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFailFast
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Failed build due failFast=true"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|asComponentTitle (String name, String title)
specifier|private
specifier|static
name|String
name|asComponentTitle
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|title
parameter_list|)
block|{
comment|// special for some components which share the same readme file
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"imap"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"imaps"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"pop3"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"pop3s"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"smtp"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"smtps"
argument_list|)
condition|)
block|{
return|return
literal|"Mail"
return|;
block|}
return|return
name|title
return|;
block|}
DECL|method|asDataFormatName (String name)
specifier|private
specifier|static
name|String
name|asDataFormatName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// special for some dataformats which share the same readme file
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"bindy"
argument_list|)
condition|)
block|{
return|return
literal|"bindy"
return|;
block|}
return|return
name|name
return|;
block|}
DECL|method|asDataFormatTitle (String name, String title)
specifier|private
specifier|static
name|String
name|asDataFormatTitle
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|title
parameter_list|)
block|{
comment|// special for some dataformats which share the same readme file
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"bindy"
argument_list|)
condition|)
block|{
return|return
literal|"Bindy"
return|;
block|}
return|return
name|title
return|;
block|}
DECL|method|updateLink (File file, String link)
specifier|private
specifier|static
name|boolean
name|updateLink
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|link
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|updated
init|=
literal|false
decl_stmt|;
try|try
init|(
name|InputStream
name|fileStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newLines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|loadText
argument_list|(
name|fileStream
argument_list|)
decl_stmt|;
name|String
index|[]
name|lines
init|=
name|text
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lines
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|line
init|=
name|lines
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// first line is the link
name|String
name|newLine
init|=
literal|"[["
operator|+
name|link
operator|+
literal|"]]"
decl_stmt|;
name|newLines
operator|.
name|add
argument_list|(
name|newLine
argument_list|)
expr_stmt|;
name|updated
operator|=
operator|!
name|line
operator|.
name|equals
argument_list|(
name|newLine
argument_list|)
expr_stmt|;
if|if
condition|(
name|updated
condition|)
block|{
comment|// its some old text so keep it
name|newLines
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|newLines
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|updated
condition|)
block|{
comment|// build the new updated text
name|String
name|newText
init|=
name|newLines
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
decl_stmt|;
name|writeText
argument_list|(
name|file
argument_list|,
name|newText
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error reading file "
operator|+
name|file
operator|+
literal|" Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|updated
return|;
block|}
DECL|method|updateTitles (File file, String title)
specifier|private
specifier|static
name|boolean
name|updateTitles
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|title
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|updated
init|=
literal|false
decl_stmt|;
try|try
init|(
name|InputStream
name|fileStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newLines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|loadText
argument_list|(
name|fileStream
argument_list|)
decl_stmt|;
name|String
index|[]
name|lines
init|=
name|text
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
comment|// line 0 is the link
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|lines
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|line
init|=
name|lines
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
comment|// first line is the title to make the text less noisy we use level 2
name|String
name|newLine
init|=
literal|"= "
operator|+
name|title
decl_stmt|;
name|newLines
operator|.
name|add
argument_list|(
name|newLine
argument_list|)
expr_stmt|;
name|updated
operator|=
operator|!
name|line
operator|.
name|equals
argument_list|(
name|newLine
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// use single line headers with # as level instead of the cumbersome adoc weird style
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"^^^"
argument_list|)
operator|||
name|line
operator|.
name|startsWith
argument_list|(
literal|"~~~"
argument_list|)
operator|||
name|line
operator|.
name|startsWith
argument_list|(
literal|"+++"
argument_list|)
condition|)
block|{
name|String
name|level
init|=
name|line
operator|.
name|startsWith
argument_list|(
literal|"+++"
argument_list|)
condition|?
literal|"==="
else|:
literal|"=="
decl_stmt|;
comment|// transform legacy heading into new style
name|int
name|idx
init|=
name|newLines
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|String
name|prev
init|=
name|newLines
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|newLines
operator|.
name|set
argument_list|(
name|idx
argument_list|,
name|level
operator|+
literal|" "
operator|+
name|prev
argument_list|)
expr_stmt|;
comment|// okay if 2nd-prev line is a [[title]] we need to remove that too
comment|// so we have nice clean sub titles
name|idx
operator|=
name|newLines
operator|.
name|size
argument_list|()
operator|-
literal|2
expr_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|prev
operator|=
name|newLines
operator|.
name|get
argument_list|(
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|prev
operator|.
name|startsWith
argument_list|(
literal|"[["
argument_list|)
condition|)
block|{
comment|// remove
name|newLines
operator|.
name|remove
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
name|updated
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// okay normal text so just add it
name|newLines
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|updated
condition|)
block|{
comment|// build the new updated text
name|String
name|newText
init|=
name|newLines
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
decl_stmt|;
name|writeText
argument_list|(
name|file
argument_list|,
name|newText
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error reading file "
operator|+
name|file
operator|+
literal|" Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|updated
return|;
block|}
DECL|method|updateAvailableFrom (final File file, final String firstVersion)
specifier|private
specifier|static
name|boolean
name|updateAvailableFrom
parameter_list|(
specifier|final
name|File
name|file
parameter_list|,
specifier|final
name|String
name|firstVersion
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
name|firstVersion
operator|==
literal|null
operator|||
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|version
init|=
name|firstVersion
decl_stmt|;
comment|// cut last digit so its not 2.18.0 but 2.18
name|String
index|[]
name|parts
init|=
name|firstVersion
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|3
operator|&&
name|parts
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
condition|)
block|{
name|version
operator|=
name|parts
index|[
literal|0
index|]
operator|+
literal|"."
operator|+
name|parts
index|[
literal|1
index|]
expr_stmt|;
block|}
name|boolean
name|updated
init|=
literal|false
decl_stmt|;
try|try
init|(
name|InputStream
name|fileStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|String
name|text
init|=
name|loadText
argument_list|(
name|fileStream
argument_list|)
decl_stmt|;
name|String
index|[]
name|lines
init|=
name|text
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|newLines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// copy over to all new lines
name|newLines
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|lines
argument_list|)
argument_list|)
expr_stmt|;
comment|// check first if it is a standard documentation file, we expect at least five lines
if|if
condition|(
name|lines
operator|.
name|length
operator|<
literal|5
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// check the first four lines (ignoring the first line)
name|boolean
name|title
init|=
name|lines
index|[
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
operator|||
name|lines
index|[
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|boolean
name|empty
init|=
name|lines
index|[
literal|2
index|]
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|boolean
name|availableFrom
init|=
name|lines
index|[
literal|3
index|]
operator|.
name|trim
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Available as of"
argument_list|)
operator|||
name|lines
index|[
literal|3
index|]
operator|.
name|trim
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Available in"
argument_list|)
decl_stmt|;
name|boolean
name|empty2
init|=
name|lines
index|[
literal|4
index|]
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|title
operator|&&
name|empty
operator|&&
name|availableFrom
condition|)
block|{
name|String
name|newLine
init|=
literal|"*Available as of Camel version "
operator|+
name|version
operator|+
literal|"*"
decl_stmt|;
if|if
condition|(
operator|!
name|newLine
operator|.
name|equals
argument_list|(
name|lines
index|[
literal|3
index|]
argument_list|)
condition|)
block|{
name|newLines
operator|.
name|set
argument_list|(
literal|3
argument_list|,
name|newLine
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|empty2
condition|)
block|{
name|newLines
operator|.
name|add
argument_list|(
literal|4
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|availableFrom
condition|)
block|{
name|String
name|newLine
init|=
literal|"*Available as of Camel version "
operator|+
name|version
operator|+
literal|"*"
decl_stmt|;
name|newLines
operator|.
name|add
argument_list|(
literal|3
argument_list|,
name|newLine
argument_list|)
expr_stmt|;
name|newLines
operator|.
name|add
argument_list|(
literal|4
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|updated
condition|)
block|{
comment|// build the new updated text
name|String
name|newText
init|=
name|newLines
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
decl_stmt|;
name|writeText
argument_list|(
name|file
argument_list|,
name|newText
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error reading file "
operator|+
name|file
operator|+
literal|" Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|updated
return|;
block|}
DECL|method|updateOptionsIn (final File file, final String kind, final String changed)
specifier|private
name|boolean
name|updateOptionsIn
parameter_list|(
specifier|final
name|File
name|file
parameter_list|,
specifier|final
name|String
name|kind
parameter_list|,
specifier|final
name|String
name|changed
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|updated
init|=
name|changed
operator|.
name|trim
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|fileStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|String
name|text
init|=
name|loadText
argument_list|(
name|fileStream
argument_list|)
decl_stmt|;
name|String
name|existing
init|=
name|StringHelper
operator|.
name|between
argument_list|(
name|text
argument_list|,
literal|"// "
operator|+
name|kind
operator|+
literal|" options: START"
argument_list|,
literal|"// "
operator|+
name|kind
operator|+
literal|" options: END"
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
comment|// remove leading line breaks etc
name|existing
operator|=
name|existing
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|existing
operator|.
name|equals
argument_list|(
name|updated
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|before
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|text
argument_list|,
literal|"// "
operator|+
name|kind
operator|+
literal|" options: START"
argument_list|)
decl_stmt|;
name|String
name|after
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|text
argument_list|,
literal|"// "
operator|+
name|kind
operator|+
literal|" options: END"
argument_list|)
decl_stmt|;
name|text
operator|=
name|before
operator|+
literal|"// "
operator|+
name|kind
operator|+
literal|" options: START\n"
operator|+
name|updated
operator|+
literal|"\n// "
operator|+
name|kind
operator|+
literal|" options: END"
operator|+
name|after
expr_stmt|;
name|writeText
argument_list|(
name|file
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Cannot find markers in file "
operator|+
name|file
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Add the following markers"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t// "
operator|+
name|kind
operator|+
literal|" options: START"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t// "
operator|+
name|kind
operator|+
literal|" options: END"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFailFast
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Failed build due failFast=true"
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error reading file "
operator|+
name|file
operator|+
literal|" Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|loadJsonFrom (Set<File> jsonFiles, String kind, String name)
specifier|private
specifier|static
name|String
name|loadJsonFrom
parameter_list|(
name|Set
argument_list|<
name|File
argument_list|>
name|jsonFiles
parameter_list|,
name|String
name|kind
parameter_list|,
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|File
name|file
range|:
name|jsonFiles
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
operator|+
literal|".json"
argument_list|)
condition|)
block|{
try|try
init|(
name|InputStream
name|fileStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
name|fileStream
argument_list|)
decl_stmt|;
name|boolean
name|isRequestedKind
init|=
name|json
operator|.
name|contains
argument_list|(
literal|"\"kind\": \""
operator|+
name|kind
operator|+
literal|"\""
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRequestedKind
condition|)
block|{
return|return
name|json
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{
comment|// ignored
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|loadEipJson (File file)
specifier|private
specifier|static
name|String
name|loadEipJson
parameter_list|(
name|File
name|file
parameter_list|)
block|{
try|try
init|(
name|InputStream
name|fileStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
name|fileStream
argument_list|)
decl_stmt|;
name|boolean
name|isEip
init|=
name|json
operator|.
name|contains
argument_list|(
literal|"\"kind\": \"model\""
argument_list|)
decl_stmt|;
if|if
condition|(
name|isEip
condition|)
block|{
return|return
name|json
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|null
return|;
block|}
DECL|method|generateComponentModel (String json)
specifier|private
specifier|static
name|ComponentModel
name|generateComponentModel
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|parseJsonSchema
argument_list|(
literal|"component"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ComponentModel
name|component
init|=
operator|new
name|ComponentModel
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|component
operator|.
name|setScheme
argument_list|(
name|getSafeValue
argument_list|(
literal|"scheme"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setSyntax
argument_list|(
name|getSafeValue
argument_list|(
literal|"syntax"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setAlternativeSyntax
argument_list|(
name|getSafeValue
argument_list|(
literal|"alternativeSyntax"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setAlternativeSchemes
argument_list|(
name|getSafeValue
argument_list|(
literal|"alternativeSchemes"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setTitle
argument_list|(
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setFirstVersion
argument_list|(
name|getSafeValue
argument_list|(
literal|"firstVersion"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setLabel
argument_list|(
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setConsumerOnly
argument_list|(
name|getSafeValue
argument_list|(
literal|"consumerOnly"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setProducerOnly
argument_list|(
name|getSafeValue
argument_list|(
literal|"producerOnly"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setGroupId
argument_list|(
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setArtifactId
argument_list|(
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setVersion
argument_list|(
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|oldGroup
init|=
literal|null
decl_stmt|;
name|rows
operator|=
name|parseJsonSchema
argument_list|(
literal|"componentProperties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|ComponentOptionModel
name|option
init|=
operator|new
name|ComponentOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDisplayName
argument_list|(
name|getSafeValue
argument_list|(
literal|"displayName"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setGroup
argument_list|(
name|getSafeValue
argument_list|(
literal|"group"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setRequired
argument_list|(
name|getSafeValue
argument_list|(
literal|"required"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnums
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setSecret
argument_list|(
name|getSafeValue
argument_list|(
literal|"secret"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
comment|// lets put required in the description
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getRequired
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|desc
init|=
literal|"*Required* "
operator|+
name|option
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
comment|// is the option deprecated then include that as well in the description
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getDeprecated
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|desc
init|=
literal|"*Deprecated* "
operator|+
name|option
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|StringHelper
operator|.
name|isEmpty
argument_list|(
name|option
operator|.
name|getDeprecationNote
argument_list|()
argument_list|)
condition|)
block|{
name|desc
operator|=
name|option
operator|.
name|getDescription
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|desc
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|desc
operator|=
name|desc
operator|+
literal|". Deprecation note: "
operator|+
name|option
operator|.
name|getDeprecationNote
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|desc
operator|=
name|desc
operator|+
literal|" Deprecation note: "
operator|+
name|option
operator|.
name|getDeprecationNote
argument_list|()
expr_stmt|;
block|}
name|option
operator|.
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
name|component
operator|.
name|addComponentOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
comment|// group separate between different options
if|if
condition|(
name|oldGroup
operator|==
literal|null
operator|||
operator|!
name|oldGroup
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getGroup
argument_list|()
argument_list|)
condition|)
block|{
name|option
operator|.
name|setNewGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|oldGroup
operator|=
name|option
operator|.
name|getGroup
argument_list|()
expr_stmt|;
block|}
name|oldGroup
operator|=
literal|null
expr_stmt|;
name|rows
operator|=
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|EndpointOptionModel
name|option
init|=
operator|new
name|EndpointOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDisplayName
argument_list|(
name|getSafeValue
argument_list|(
literal|"displayName"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setGroup
argument_list|(
name|getSafeValue
argument_list|(
literal|"group"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setRequired
argument_list|(
name|getSafeValue
argument_list|(
literal|"required"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnums
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setPrefix
argument_list|(
name|getSafeValue
argument_list|(
literal|"prefix"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setMultiValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"multiValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setSecret
argument_list|(
name|getSafeValue
argument_list|(
literal|"secret"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
comment|// lets put required in the description
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getRequired
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|desc
init|=
literal|"*Required* "
operator|+
name|option
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
comment|// is the option deprecated then include that as well in the description
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getDeprecated
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|desc
init|=
literal|"*Deprecated* "
operator|+
name|option
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|StringHelper
operator|.
name|isEmpty
argument_list|(
name|option
operator|.
name|getDeprecationNote
argument_list|()
argument_list|)
condition|)
block|{
name|desc
operator|=
name|option
operator|.
name|getDescription
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|desc
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|desc
operator|=
name|desc
operator|+
literal|". Deprecation note: "
operator|+
name|option
operator|.
name|getDeprecationNote
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|desc
operator|=
name|desc
operator|+
literal|" Deprecation note: "
operator|+
name|option
operator|.
name|getDeprecationNote
argument_list|()
expr_stmt|;
block|}
name|option
operator|.
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
comment|// separate the options in path vs parameter so we can generate two different tables
if|if
condition|(
literal|"path"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getKind
argument_list|()
argument_list|)
condition|)
block|{
name|component
operator|.
name|addEndpointPathOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|component
operator|.
name|addEndpointOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
comment|// group separate between different options
if|if
condition|(
name|oldGroup
operator|==
literal|null
operator|||
operator|!
name|oldGroup
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getGroup
argument_list|()
argument_list|)
condition|)
block|{
name|option
operator|.
name|setNewGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|oldGroup
operator|=
name|option
operator|.
name|getGroup
argument_list|()
expr_stmt|;
block|}
return|return
name|component
return|;
block|}
DECL|method|generateDataFormatModel (String dataFormatName, String json)
specifier|private
name|DataFormatModel
name|generateDataFormatModel
parameter_list|(
name|String
name|dataFormatName
parameter_list|,
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|parseJsonSchema
argument_list|(
literal|"dataformat"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|DataFormatModel
name|dataFormat
init|=
operator|new
name|DataFormatModel
argument_list|()
decl_stmt|;
name|dataFormat
operator|.
name|setTitle
argument_list|(
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setModelName
argument_list|(
name|getSafeValue
argument_list|(
literal|"modelName"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setFirstVersion
argument_list|(
name|getSafeValue
argument_list|(
literal|"firstVersion"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setLabel
argument_list|(
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setGroupId
argument_list|(
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setArtifactId
argument_list|(
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setVersion
argument_list|(
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|=
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|DataFormatOptionModel
name|option
init|=
operator|new
name|DataFormatOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDisplayName
argument_list|(
name|getSafeValue
argument_list|(
literal|"displayName"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnumValues
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
comment|// special for bindy as we reuse one readme file
if|if
condition|(
name|dataFormatName
operator|.
name|startsWith
argument_list|(
literal|"bindy"
argument_list|)
operator|&&
name|option
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
name|option
operator|.
name|setDefaultValue
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|String
name|doc
init|=
name|option
operator|.
name|getDescription
argument_list|()
operator|+
literal|" The default value is either Csv or KeyValue depending on chosen dataformat."
decl_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// lets put required in the description
comment|// is the option deprecated then include that as well in the description
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getDeprecated
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|desc
init|=
literal|"*Deprecated* "
operator|+
name|option
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|StringHelper
operator|.
name|isEmpty
argument_list|(
name|option
operator|.
name|getDeprecationNote
argument_list|()
argument_list|)
condition|)
block|{
name|desc
operator|=
name|option
operator|.
name|getDescription
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|desc
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|desc
operator|=
name|desc
operator|+
literal|". Deprecation note: "
operator|+
name|option
operator|.
name|getDeprecationNote
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|desc
operator|=
name|desc
operator|+
literal|" Deprecation note: "
operator|+
name|option
operator|.
name|getDeprecationNote
argument_list|()
expr_stmt|;
block|}
name|option
operator|.
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
comment|// skip option named id
if|if
condition|(
literal|"id"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Skipping option: "
operator|+
name|option
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataFormat
operator|.
name|addDataFormatOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dataFormat
return|;
block|}
DECL|method|generateLanguageModel (String json)
specifier|private
name|LanguageModel
name|generateLanguageModel
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|parseJsonSchema
argument_list|(
literal|"language"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|LanguageModel
name|language
init|=
operator|new
name|LanguageModel
argument_list|()
decl_stmt|;
name|language
operator|.
name|setTitle
argument_list|(
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setModelName
argument_list|(
name|getSafeValue
argument_list|(
literal|"modelName"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setFirstVersion
argument_list|(
name|getSafeValue
argument_list|(
literal|"firstVersion"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setLabel
argument_list|(
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setGroupId
argument_list|(
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setArtifactId
argument_list|(
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setVersion
argument_list|(
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|=
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|LanguageOptionModel
name|option
init|=
operator|new
name|LanguageOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDisplayName
argument_list|(
name|getSafeValue
argument_list|(
literal|"displayName"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnumValues
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
comment|// is the option deprecated then include that as well in the description
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getDeprecated
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|desc
init|=
literal|"*Deprecated* "
operator|+
name|option
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|StringHelper
operator|.
name|isEmpty
argument_list|(
name|option
operator|.
name|getDeprecationNote
argument_list|()
argument_list|)
condition|)
block|{
name|desc
operator|=
name|option
operator|.
name|getDescription
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|desc
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|desc
operator|=
name|desc
operator|+
literal|". Deprecation note: "
operator|+
name|option
operator|.
name|getDeprecationNote
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|desc
operator|=
name|desc
operator|+
literal|" Deprecation note: "
operator|+
name|option
operator|.
name|getDeprecationNote
argument_list|()
expr_stmt|;
block|}
name|option
operator|.
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
comment|// skip option named id/expression
if|if
condition|(
literal|"id"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"expression"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Skipping option: "
operator|+
name|option
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|language
operator|.
name|addLanguageOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|language
return|;
block|}
DECL|method|generateEipModel (String json)
specifier|private
name|EipModel
name|generateEipModel
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|parseJsonSchema
argument_list|(
literal|"model"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|EipModel
name|eip
init|=
operator|new
name|EipModel
argument_list|()
decl_stmt|;
name|eip
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|eip
operator|.
name|setTitle
argument_list|(
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|eip
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|eip
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|eip
operator|.
name|setLabel
argument_list|(
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|eip
operator|.
name|setDeprecated
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|eip
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|eip
operator|.
name|setInput
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|getSafeValue
argument_list|(
literal|"input"
argument_list|,
name|rows
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|eip
operator|.
name|setOutput
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|getSafeValue
argument_list|(
literal|"output"
argument_list|,
name|rows
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|=
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|EipOptionModel
name|option
init|=
operator|new
name|EipOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDisplayName
argument_list|(
name|getSafeValue
argument_list|(
literal|"displayName"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setRequired
argument_list|(
name|getSafeValue
argument_list|(
literal|"required"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecationNote
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setInput
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|getSafeValue
argument_list|(
literal|"input"
argument_list|,
name|row
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setOutput
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|getSafeValue
argument_list|(
literal|"output"
argument_list|,
name|row
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// lets put required in the description
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getRequired
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|desc
init|=
literal|"*Required* "
operator|+
name|option
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
comment|// is the option deprecated then include that as well in the description
if|if
condition|(
name|option
operator|.
name|isDeprecated
argument_list|()
condition|)
block|{
name|String
name|desc
init|=
literal|"*Deprecated* "
operator|+
name|option
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|StringHelper
operator|.
name|isEmpty
argument_list|(
name|option
operator|.
name|getDeprecationNote
argument_list|()
argument_list|)
condition|)
block|{
name|desc
operator|=
name|option
operator|.
name|getDescription
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|desc
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|desc
operator|=
name|desc
operator|+
literal|". Deprecation note: "
operator|+
name|option
operator|.
name|getDeprecationNote
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|desc
operator|=
name|desc
operator|+
literal|" Deprecation note: "
operator|+
name|option
operator|.
name|getDeprecationNote
argument_list|()
expr_stmt|;
block|}
name|option
operator|.
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
comment|// skip option named id/description/expression/outputs
if|if
condition|(
literal|"id"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"description"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"expression"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"outputs"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Skipping option: "
operator|+
name|option
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|eip
operator|.
name|addEipOptionModel
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|eip
return|;
block|}
DECL|method|evaluateTemplate (final String templateName, final Object model)
specifier|private
specifier|static
name|String
name|evaluateTemplate
parameter_list|(
specifier|final
name|String
name|templateName
parameter_list|,
specifier|final
name|Object
name|model
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
try|try
init|(
name|InputStream
name|templateStream
init|=
name|UpdateReadmeMojo
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|templateName
argument_list|)
init|)
block|{
name|String
name|template
init|=
name|loadText
argument_list|(
name|templateStream
argument_list|)
decl_stmt|;
return|return
operator|(
name|String
operator|)
name|TemplateRuntime
operator|.
name|eval
argument_list|(
name|template
argument_list|,
name|model
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"util"
argument_list|,
name|MvelHelper
operator|.
name|INSTANCE
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error processing mvel template `"
operator|+
name|templateName
operator|+
literal|"`"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|listDescriptorNamesOfType (final String type)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|listDescriptorNamesOfType
parameter_list|(
specifier|final
name|String
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|project
operator|.
name|getBasedir
argument_list|()
argument_list|,
literal|"target/classes"
argument_list|)
decl_stmt|;
name|f
operator|=
operator|new
name|File
argument_list|(
name|f
argument_list|,
literal|"META-INF/services/org/apache/camel/"
operator|+
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
comment|// skip directories as there may be a sub .resolver directory
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'.'
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|names
return|;
block|}
DECL|method|isFailFast ()
specifier|private
name|boolean
name|isFailFast
parameter_list|()
block|{
return|return
name|failFast
operator|!=
literal|null
operator|&&
name|failFast
return|;
block|}
block|}
end_class

end_unit

