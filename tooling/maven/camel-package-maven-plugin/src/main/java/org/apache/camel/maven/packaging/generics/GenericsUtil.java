begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging.generics
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|generics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericDeclaration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Member
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|TypeVariable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|WildcardType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Utility classes for generic type operations.  */
end_comment

begin_class
DECL|class|GenericsUtil
specifier|public
specifier|final
class|class
name|GenericsUtil
block|{
comment|/*      * Private constructor      */
DECL|method|GenericsUtil ()
specifier|private
name|GenericsUtil
parameter_list|()
block|{     }
DECL|method|satisfiesDependency (boolean isDelegateOrEvent, boolean isProducer, Type injectionPointType, Type beanType)
specifier|public
specifier|static
name|boolean
name|satisfiesDependency
parameter_list|(
name|boolean
name|isDelegateOrEvent
parameter_list|,
name|boolean
name|isProducer
parameter_list|,
name|Type
name|injectionPointType
parameter_list|,
name|Type
name|beanType
parameter_list|)
block|{
if|if
condition|(
name|beanType
operator|instanceof
name|TypeVariable
operator|||
name|beanType
operator|instanceof
name|WildcardType
operator|||
name|beanType
operator|instanceof
name|GenericArrayType
condition|)
block|{
return|return
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
name|isProducer
argument_list|,
name|injectionPointType
argument_list|,
name|beanType
argument_list|)
return|;
block|}
else|else
block|{
name|Type
name|injectionPointRawType
init|=
name|injectionPointType
operator|instanceof
name|ParameterizedType
condition|?
operator|(
operator|(
name|ParameterizedType
operator|)
name|injectionPointType
operator|)
operator|.
name|getRawType
argument_list|()
else|:
name|injectionPointType
decl_stmt|;
name|Type
name|beanRawType
init|=
name|beanType
operator|instanceof
name|ParameterizedType
condition|?
operator|(
operator|(
name|ParameterizedType
operator|)
name|beanType
operator|)
operator|.
name|getRawType
argument_list|()
else|:
name|beanType
decl_stmt|;
if|if
condition|(
name|ClassUtil
operator|.
name|isSame
argument_list|(
name|injectionPointRawType
argument_list|,
name|beanRawType
argument_list|)
condition|)
block|{
return|return
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
name|isProducer
argument_list|,
name|injectionPointType
argument_list|,
name|beanType
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|satisfiesDependencyRaw (boolean isDelegateOrEvent, boolean isProducer, Type injectionPointType, Type beanType)
specifier|public
specifier|static
name|boolean
name|satisfiesDependencyRaw
parameter_list|(
name|boolean
name|isDelegateOrEvent
parameter_list|,
name|boolean
name|isProducer
parameter_list|,
name|Type
name|injectionPointType
parameter_list|,
name|Type
name|beanType
parameter_list|)
block|{
if|if
condition|(
name|beanType
operator|instanceof
name|TypeVariable
operator|||
name|beanType
operator|instanceof
name|WildcardType
operator|||
name|beanType
operator|instanceof
name|GenericArrayType
condition|)
block|{
return|return
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
name|isProducer
argument_list|,
name|injectionPointType
argument_list|,
name|beanType
argument_list|)
return|;
block|}
else|else
block|{
name|Type
name|injectionPointRawType
init|=
name|injectionPointType
operator|instanceof
name|ParameterizedType
condition|?
operator|(
operator|(
name|ParameterizedType
operator|)
name|injectionPointType
operator|)
operator|.
name|getRawType
argument_list|()
else|:
name|injectionPointType
decl_stmt|;
name|Type
name|beanRawType
init|=
name|beanType
operator|instanceof
name|ParameterizedType
condition|?
operator|(
operator|(
name|ParameterizedType
operator|)
name|beanType
operator|)
operator|.
name|getRawType
argument_list|()
else|:
name|beanType
decl_stmt|;
if|if
condition|(
name|ClassUtil
operator|.
name|isSame
argument_list|(
name|injectionPointRawType
argument_list|,
name|beanRawType
argument_list|)
condition|)
block|{
return|return
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
name|isProducer
argument_list|,
name|injectionPointRawType
argument_list|,
name|beanRawType
argument_list|)
return|;
block|}
else|else
block|{
name|Class
name|bean
init|=
operator|(
name|Class
operator|)
name|beanType
decl_stmt|;
if|if
condition|(
name|bean
operator|.
name|getSuperclass
argument_list|()
operator|!=
literal|null
operator|&&
name|ClassUtil
operator|.
name|isRawClassEquals
argument_list|(
name|injectionPointType
argument_list|,
name|bean
operator|.
name|getSuperclass
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|interfaces
init|=
name|bean
operator|.
name|getInterfaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|interfaces
operator|==
literal|null
operator|||
name|interfaces
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|interfaces
control|)
block|{
if|if
condition|(
name|ClassUtil
operator|.
name|isRawClassEquals
argument_list|(
name|injectionPointType
argument_list|,
name|clazz
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * 5.2.3 and 5.2.4      */
DECL|method|isAssignableFrom (boolean isDelegateOrEvent, boolean isProducer, Type requiredType, Type beanType)
specifier|public
specifier|static
name|boolean
name|isAssignableFrom
parameter_list|(
name|boolean
name|isDelegateOrEvent
parameter_list|,
name|boolean
name|isProducer
parameter_list|,
name|Type
name|requiredType
parameter_list|,
name|Type
name|beanType
parameter_list|)
block|{
if|if
condition|(
name|requiredType
operator|instanceof
name|Class
condition|)
block|{
return|return
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|requiredType
argument_list|,
name|beanType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|requiredType
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
name|isProducer
argument_list|,
operator|(
name|ParameterizedType
operator|)
name|requiredType
argument_list|,
name|beanType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|requiredType
operator|instanceof
name|TypeVariable
condition|)
block|{
return|return
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|requiredType
argument_list|,
name|beanType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|requiredType
operator|instanceof
name|GenericArrayType
condition|)
block|{
return|return
name|Class
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|beanType
argument_list|)
operator|&&
name|Class
operator|.
name|class
operator|.
name|cast
argument_list|(
name|beanType
argument_list|)
operator|.
name|isArray
argument_list|()
operator|&&
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
operator|(
name|GenericArrayType
operator|)
name|requiredType
argument_list|,
name|beanType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|requiredType
operator|instanceof
name|WildcardType
condition|)
block|{
return|return
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
operator|(
name|WildcardType
operator|)
name|requiredType
argument_list|,
name|beanType
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|requiredType
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|isAssignableFrom (boolean isDelegateOrEvent, Class<?> injectionPointType, Type beanType)
specifier|private
specifier|static
name|boolean
name|isAssignableFrom
parameter_list|(
name|boolean
name|isDelegateOrEvent
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|injectionPointType
parameter_list|,
name|Type
name|beanType
parameter_list|)
block|{
if|if
condition|(
name|beanType
operator|instanceof
name|Class
condition|)
block|{
return|return
name|isAssignableFrom
argument_list|(
name|injectionPointType
argument_list|,
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|beanType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|beanType
operator|instanceof
name|TypeVariable
condition|)
block|{
return|return
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
name|injectionPointType
argument_list|,
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|beanType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|beanType
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
name|injectionPointType
argument_list|,
operator|(
name|ParameterizedType
operator|)
name|beanType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|beanType
operator|instanceof
name|GenericArrayType
condition|)
block|{
return|return
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
name|injectionPointType
argument_list|,
operator|(
name|GenericArrayType
operator|)
name|beanType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|beanType
operator|instanceof
name|WildcardType
condition|)
block|{
return|return
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
operator|(
name|Type
operator|)
name|injectionPointType
argument_list|,
operator|(
name|WildcardType
operator|)
name|beanType
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|injectionPointType
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|isAssignableFrom (Class<?> injectionPointType, Class<?> beanType)
specifier|private
specifier|static
name|boolean
name|isAssignableFrom
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|injectionPointType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|beanType
parameter_list|)
block|{
return|return
name|ClassUtil
operator|.
name|isClassAssignableFrom
argument_list|(
name|injectionPointType
argument_list|,
name|beanType
argument_list|)
return|;
block|}
DECL|method|isAssignableFrom (boolean isDelegateOrEvent, Class<?> injectionPointType, TypeVariable<?> beanType)
specifier|private
specifier|static
name|boolean
name|isAssignableFrom
parameter_list|(
name|boolean
name|isDelegateOrEvent
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|injectionPointType
parameter_list|,
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|beanType
parameter_list|)
block|{
for|for
control|(
name|Type
name|bounds
range|:
name|beanType
operator|.
name|getBounds
argument_list|()
control|)
block|{
if|if
condition|(
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
name|injectionPointType
argument_list|,
name|bounds
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * CDI Spec. 5.2.4: "A parameterized bean type is considered assignable to a      * raw required type if the raw generics are identical and all type      * parameters of the bean type are either unbounded type variables or      * java.lang.Object."      */
DECL|method|isAssignableFrom (boolean isDelegateOrEvent, Class<?> injectionPointType, ParameterizedType beanType)
specifier|private
specifier|static
name|boolean
name|isAssignableFrom
parameter_list|(
name|boolean
name|isDelegateOrEvent
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|injectionPointType
parameter_list|,
name|ParameterizedType
name|beanType
parameter_list|)
block|{
if|if
condition|(
name|beanType
operator|.
name|getRawType
argument_list|()
operator|!=
name|injectionPointType
condition|)
block|{
return|return
literal|false
return|;
comment|// raw generics don't match
block|}
if|if
condition|(
name|isDelegateOrEvent
condition|)
block|{
comment|// for delegate and events we match 'in reverse' kind off
comment|// @Observes ProcessInjectionPoint<?, Instance> does also match
comment|// Instance<SomeBean>
return|return
name|isAssignableFrom
argument_list|(
literal|true
argument_list|,
name|injectionPointType
argument_list|,
name|beanType
operator|.
name|getRawType
argument_list|()
argument_list|)
return|;
block|}
for|for
control|(
name|Type
name|typeArgument
range|:
name|beanType
operator|.
name|getActualTypeArguments
argument_list|()
control|)
block|{
if|if
condition|(
name|typeArgument
operator|==
name|Object
operator|.
name|class
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
operator|(
name|typeArgument
operator|instanceof
name|TypeVariable
operator|)
condition|)
block|{
return|return
literal|false
return|;
comment|// neither object nor type variable
block|}
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|typeVariable
init|=
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|typeArgument
decl_stmt|;
for|for
control|(
name|Type
name|bounds
range|:
name|typeVariable
operator|.
name|getBounds
argument_list|()
control|)
block|{
if|if
condition|(
name|bounds
operator|!=
name|Object
operator|.
name|class
condition|)
block|{
return|return
literal|false
return|;
comment|// bound type variable
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|isAssignableFrom (boolean isDelegateOrEvent, Class<?> injectionPointType, GenericArrayType beanType)
specifier|private
specifier|static
name|boolean
name|isAssignableFrom
parameter_list|(
name|boolean
name|isDelegateOrEvent
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|injectionPointType
parameter_list|,
name|GenericArrayType
name|beanType
parameter_list|)
block|{
return|return
name|injectionPointType
operator|.
name|isArray
argument_list|()
operator|&&
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
name|injectionPointType
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|beanType
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isAssignableFrom (boolean isDelegateOrEvent, Type injectionPointType, WildcardType beanType)
specifier|private
specifier|static
name|boolean
name|isAssignableFrom
parameter_list|(
name|boolean
name|isDelegateOrEvent
parameter_list|,
name|Type
name|injectionPointType
parameter_list|,
name|WildcardType
name|beanType
parameter_list|)
block|{
for|for
control|(
name|Type
name|bounds
range|:
name|beanType
operator|.
name|getLowerBounds
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
literal|false
argument_list|,
name|bounds
argument_list|,
name|injectionPointType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
for|for
control|(
name|Type
name|bounds
range|:
name|beanType
operator|.
name|getUpperBounds
argument_list|()
control|)
block|{
if|if
condition|(
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
literal|false
argument_list|,
name|injectionPointType
argument_list|,
name|bounds
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|isAssignableFrom (boolean isDelegateOrEvent, boolean isProducer, ParameterizedType injectionPointType, Type beanType)
specifier|private
specifier|static
name|boolean
name|isAssignableFrom
parameter_list|(
name|boolean
name|isDelegateOrEvent
parameter_list|,
name|boolean
name|isProducer
parameter_list|,
name|ParameterizedType
name|injectionPointType
parameter_list|,
name|Type
name|beanType
parameter_list|)
block|{
if|if
condition|(
name|beanType
operator|instanceof
name|Class
condition|)
block|{
return|return
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
name|isProducer
argument_list|,
name|injectionPointType
argument_list|,
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|beanType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|beanType
operator|instanceof
name|TypeVariable
condition|)
block|{
return|return
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
name|isProducer
argument_list|,
name|injectionPointType
argument_list|,
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|beanType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|beanType
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
name|injectionPointType
argument_list|,
operator|(
name|ParameterizedType
operator|)
name|beanType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|beanType
operator|instanceof
name|WildcardType
condition|)
block|{
return|return
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
name|injectionPointType
argument_list|,
operator|(
name|WildcardType
operator|)
name|beanType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|beanType
operator|instanceof
name|GenericArrayType
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|beanType
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|isAssignableFrom (boolean isDelegateOrEvent, boolean isProducer, ParameterizedType injectionPointType, Class<?> beanType)
specifier|private
specifier|static
name|boolean
name|isAssignableFrom
parameter_list|(
name|boolean
name|isDelegateOrEvent
parameter_list|,
name|boolean
name|isProducer
parameter_list|,
name|ParameterizedType
name|injectionPointType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|beanType
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|rawInjectionPointType
init|=
name|getRawType
argument_list|(
name|injectionPointType
argument_list|)
decl_stmt|;
if|if
condition|(
name|rawInjectionPointType
operator|.
name|equals
argument_list|(
name|beanType
argument_list|)
condition|)
block|{
if|if
condition|(
name|isProducer
condition|)
block|{
for|for
control|(
specifier|final
name|Type
name|t
range|:
name|injectionPointType
operator|.
name|getActualTypeArguments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|TypeVariable
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|t
argument_list|)
operator|||
operator|!
name|isNotBound
argument_list|(
name|TypeVariable
operator|.
name|class
operator|.
name|cast
argument_list|(
name|t
argument_list|)
operator|.
name|getBounds
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|Class
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|t
argument_list|)
operator|||
name|Object
operator|.
name|class
operator|!=
name|t
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|rawInjectionPointType
operator|.
name|isAssignableFrom
argument_list|(
name|beanType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|beanType
operator|.
name|getSuperclass
argument_list|()
operator|!=
literal|null
operator|&&
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
name|isProducer
argument_list|,
name|injectionPointType
argument_list|,
name|beanType
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|Type
name|genericInterface
range|:
name|beanType
operator|.
name|getGenericInterfaces
argument_list|()
control|)
block|{
if|if
condition|(
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
name|isProducer
argument_list|,
name|injectionPointType
argument_list|,
name|genericInterface
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|isAssignableFrom (boolean isDelegateOrEvent, boolean isProducer, ParameterizedType injectionPointType, TypeVariable<?> beanType)
specifier|private
specifier|static
name|boolean
name|isAssignableFrom
parameter_list|(
name|boolean
name|isDelegateOrEvent
parameter_list|,
name|boolean
name|isProducer
parameter_list|,
name|ParameterizedType
name|injectionPointType
parameter_list|,
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|beanType
parameter_list|)
block|{
specifier|final
name|Type
index|[]
name|types
init|=
name|beanType
operator|.
name|getBounds
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNotBound
argument_list|(
name|types
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
specifier|final
name|Type
name|bounds
range|:
name|types
control|)
block|{
if|if
condition|(
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
name|isProducer
argument_list|,
name|injectionPointType
argument_list|,
name|bounds
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * CDI Spec. 5.2.4      */
DECL|method|isAssignableFrom (boolean isDelegateOrEvent, ParameterizedType injectionPointType, ParameterizedType beanType)
specifier|private
specifier|static
name|boolean
name|isAssignableFrom
parameter_list|(
name|boolean
name|isDelegateOrEvent
parameter_list|,
name|ParameterizedType
name|injectionPointType
parameter_list|,
name|ParameterizedType
name|beanType
parameter_list|)
block|{
if|if
condition|(
name|injectionPointType
operator|.
name|getRawType
argument_list|()
operator|!=
name|beanType
operator|.
name|getRawType
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|swapParams
init|=
operator|!
name|isDelegateOrEvent
decl_stmt|;
name|Type
index|[]
name|injectionPointTypeArguments
init|=
name|injectionPointType
operator|.
name|getActualTypeArguments
argument_list|()
decl_stmt|;
name|Type
index|[]
name|beanTypeArguments
init|=
name|beanType
operator|.
name|getActualTypeArguments
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|injectionPointTypeArguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Type
name|injectionPointTypeArgument
init|=
name|injectionPointTypeArguments
index|[
name|i
index|]
decl_stmt|;
name|Type
name|beanTypeArgument
init|=
name|beanTypeArguments
index|[
name|i
index|]
decl_stmt|;
comment|// for this special case it's actually an 'assignable to', thus we
comment|// swap the params, see CDI-389
comment|// but this special rule does not apply to Delegate injection
comment|// points...
if|if
condition|(
name|swapParams
operator|&&
operator|(
name|injectionPointTypeArgument
operator|instanceof
name|Class
operator|||
name|injectionPointTypeArgument
operator|instanceof
name|TypeVariable
operator|)
operator|&&
name|beanTypeArgument
operator|instanceof
name|TypeVariable
condition|)
block|{
specifier|final
name|Type
index|[]
name|bounds
init|=
operator|(
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|beanTypeArgument
operator|)
operator|.
name|getBounds
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|isNotBound
init|=
name|isNotBound
argument_list|(
name|bounds
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isNotBound
condition|)
block|{
for|for
control|(
specifier|final
name|Type
name|upperBound
range|:
name|bounds
control|)
block|{
if|if
condition|(
operator|!
name|isAssignableFrom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|upperBound
argument_list|,
name|injectionPointTypeArgument
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|swapParams
operator|&&
name|injectionPointTypeArgument
operator|instanceof
name|TypeVariable
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|isDelegateOrEvent
operator|&&
name|injectionPointTypeArgument
operator|instanceof
name|Class
operator|&&
name|beanTypeArgument
operator|instanceof
name|Class
condition|)
block|{
comment|// if no wildcard type was given then we require a real exact
comment|// match.
return|return
name|injectionPointTypeArgument
operator|.
name|equals
argument_list|(
name|beanTypeArgument
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
literal|false
argument_list|,
name|injectionPointTypeArgument
argument_list|,
name|beanTypeArgument
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|isNotBound (final Type... bounds)
specifier|private
specifier|static
name|boolean
name|isNotBound
parameter_list|(
specifier|final
name|Type
modifier|...
name|bounds
parameter_list|)
block|{
return|return
name|bounds
operator|==
literal|null
operator|||
name|bounds
operator|.
name|length
operator|==
literal|0
operator|||
operator|(
name|bounds
operator|.
name|length
operator|==
literal|1
operator|&&
name|Object
operator|.
name|class
operator|==
name|bounds
index|[
literal|0
index|]
operator|)
return|;
block|}
DECL|method|isAssignableFrom (boolean isDelegateOrEvent, TypeVariable<?> injectionPointType, Type beanType)
specifier|private
specifier|static
name|boolean
name|isAssignableFrom
parameter_list|(
name|boolean
name|isDelegateOrEvent
parameter_list|,
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|injectionPointType
parameter_list|,
name|Type
name|beanType
parameter_list|)
block|{
for|for
control|(
name|Type
name|bounds
range|:
name|injectionPointType
operator|.
name|getBounds
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
literal|false
argument_list|,
name|bounds
argument_list|,
name|beanType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// rules are a bit different when in an array so we handle ParameterizedType
comment|// manually (not reusing isAssignableFrom)
DECL|method|isAssignableFrom (boolean isDelegateOrEvent, GenericArrayType injectionPointType, Type beanType)
specifier|private
specifier|static
name|boolean
name|isAssignableFrom
parameter_list|(
name|boolean
name|isDelegateOrEvent
parameter_list|,
name|GenericArrayType
name|injectionPointType
parameter_list|,
name|Type
name|beanType
parameter_list|)
block|{
specifier|final
name|Type
name|genericComponentType
init|=
name|injectionPointType
operator|.
name|getGenericComponentType
argument_list|()
decl_stmt|;
specifier|final
name|Class
name|componentType
init|=
name|Class
operator|.
name|class
operator|.
name|cast
argument_list|(
name|beanType
argument_list|)
operator|.
name|getComponentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|Class
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|genericComponentType
argument_list|)
condition|)
block|{
return|return
name|Class
operator|.
name|class
operator|.
name|cast
argument_list|(
name|genericComponentType
argument_list|)
operator|.
name|isAssignableFrom
argument_list|(
name|componentType
argument_list|)
return|;
block|}
if|if
condition|(
name|ParameterizedType
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|genericComponentType
argument_list|)
condition|)
block|{
return|return
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
literal|false
argument_list|,
name|ParameterizedType
operator|.
name|class
operator|.
name|cast
argument_list|(
name|genericComponentType
argument_list|)
operator|.
name|getRawType
argument_list|()
argument_list|,
name|componentType
argument_list|)
return|;
block|}
return|return
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
literal|false
argument_list|,
name|genericComponentType
argument_list|,
name|componentType
argument_list|)
return|;
block|}
DECL|method|isAssignableFrom (boolean isDelegateOrEvent, WildcardType injectionPointType, Type beanType)
specifier|private
specifier|static
name|boolean
name|isAssignableFrom
parameter_list|(
name|boolean
name|isDelegateOrEvent
parameter_list|,
name|WildcardType
name|injectionPointType
parameter_list|,
name|Type
name|beanType
parameter_list|)
block|{
if|if
condition|(
name|beanType
operator|instanceof
name|TypeVariable
condition|)
block|{
return|return
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
name|injectionPointType
argument_list|,
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|beanType
argument_list|)
return|;
block|}
for|for
control|(
name|Type
name|bounds
range|:
name|injectionPointType
operator|.
name|getLowerBounds
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
literal|false
argument_list|,
name|beanType
argument_list|,
name|bounds
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
for|for
control|(
name|Type
name|bounds
range|:
name|injectionPointType
operator|.
name|getUpperBounds
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Type
argument_list|>
name|beanTypeClosure
init|=
name|getTypeClosure
argument_list|(
name|beanType
argument_list|)
decl_stmt|;
name|boolean
name|isAssignable
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Type
name|beanSupertype
range|:
name|beanTypeClosure
control|)
block|{
if|if
condition|(
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
literal|false
argument_list|,
name|bounds
argument_list|,
name|beanSupertype
argument_list|)
operator|||
operator|(
name|Class
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|bounds
argument_list|)
operator|&&
name|ParameterizedType
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|beanSupertype
argument_list|)
operator|&&
name|bounds
operator|==
name|ParameterizedType
operator|.
name|class
operator|.
name|cast
argument_list|(
name|beanSupertype
argument_list|)
operator|.
name|getRawType
argument_list|()
operator|)
condition|)
block|{
name|isAssignable
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|isAssignable
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * CDI 1.1 Spec. 5.2.4, third bullet point      */
DECL|method|isAssignableFrom (boolean isDelegateOrEvent, WildcardType injectionPointType, TypeVariable<?> beanType)
specifier|private
specifier|static
name|boolean
name|isAssignableFrom
parameter_list|(
name|boolean
name|isDelegateOrEvent
parameter_list|,
name|WildcardType
name|injectionPointType
parameter_list|,
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|beanType
parameter_list|)
block|{
for|for
control|(
name|Type
name|upperBound
range|:
name|injectionPointType
operator|.
name|getUpperBounds
argument_list|()
control|)
block|{
for|for
control|(
name|Type
name|bound
range|:
name|beanType
operator|.
name|getBounds
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
literal|false
argument_list|,
name|upperBound
argument_list|,
name|bound
argument_list|)
operator|&&
operator|!
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
literal|false
argument_list|,
name|bound
argument_list|,
name|upperBound
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
for|for
control|(
name|Type
name|lowerBound
range|:
name|injectionPointType
operator|.
name|getLowerBounds
argument_list|()
control|)
block|{
for|for
control|(
name|Type
name|bound
range|:
name|beanType
operator|.
name|getBounds
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isAssignableFrom
argument_list|(
name|isDelegateOrEvent
argument_list|,
literal|false
argument_list|,
name|bound
argument_list|,
name|lowerBound
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * @return<tt>true</tt>, if the specified type declaration contains an      *         unresolved type variable.      */
DECL|method|containsTypeVariable (Type type)
specifier|public
specifier|static
name|boolean
name|containsTypeVariable
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|TypeVariable
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|parameterizedType
init|=
operator|(
name|ParameterizedType
operator|)
name|type
decl_stmt|;
return|return
name|containTypeVariable
argument_list|(
name|parameterizedType
operator|.
name|getActualTypeArguments
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|WildcardType
condition|)
block|{
name|WildcardType
name|wildcardType
init|=
operator|(
name|WildcardType
operator|)
name|type
decl_stmt|;
return|return
name|containTypeVariable
argument_list|(
name|wildcardType
operator|.
name|getUpperBounds
argument_list|()
argument_list|)
operator|||
name|containTypeVariable
argument_list|(
name|wildcardType
operator|.
name|getLowerBounds
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|GenericArrayType
name|arrayType
init|=
operator|(
name|GenericArrayType
operator|)
name|type
decl_stmt|;
return|return
name|containsTypeVariable
argument_list|(
name|arrayType
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|type
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|containTypeVariable (Collection<? extends Type> types)
specifier|public
specifier|static
name|boolean
name|containTypeVariable
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Type
argument_list|>
name|types
parameter_list|)
block|{
return|return
name|containTypeVariable
argument_list|(
name|types
operator|.
name|toArray
argument_list|(
operator|new
name|Type
index|[
name|types
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|containTypeVariable (Type[] types)
specifier|public
specifier|static
name|boolean
name|containTypeVariable
parameter_list|(
name|Type
index|[]
name|types
parameter_list|)
block|{
for|for
control|(
name|Type
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
name|containsTypeVariable
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * @param type to check      * @return {@code true} if the given type contains a {@link WildcardType}      *         {@code false} otherwise      */
DECL|method|containsWildcardType (Type type)
specifier|public
specifier|static
name|boolean
name|containsWildcardType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|type
operator|instanceof
name|ParameterizedType
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Type
name|typeArgument
range|:
name|getParameterizedType
argument_list|(
name|type
argument_list|)
operator|.
name|getActualTypeArguments
argument_list|()
control|)
block|{
if|if
condition|(
name|ClassUtil
operator|.
name|isParametrizedType
argument_list|(
name|typeArgument
argument_list|)
condition|)
block|{
if|if
condition|(
name|containsWildcardType
argument_list|(
name|typeArgument
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|ClassUtil
operator|.
name|isWildCardType
argument_list|(
name|typeArgument
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Resolves the actual type of the specified field for the type hierarchy      * specified by the given subclass      */
DECL|method|resolveType (Class<?> subclass, Field field)
specifier|public
specifier|static
name|Type
name|resolveType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|subclass
parameter_list|,
name|Field
name|field
parameter_list|)
block|{
return|return
name|resolveType
argument_list|(
name|field
operator|.
name|getGenericType
argument_list|()
argument_list|,
name|subclass
argument_list|,
name|newSeenList
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Resolves the actual return type of the specified method for the type      * hierarchy specified by the given subclass      */
DECL|method|resolveReturnType (Class<?> subclass, Method method)
specifier|public
specifier|static
name|Type
name|resolveReturnType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|subclass
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
return|return
name|resolveType
argument_list|(
name|method
operator|.
name|getGenericReturnType
argument_list|()
argument_list|,
name|subclass
argument_list|,
name|newSeenList
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Resolves the actual parameter generics of the specified constructor for      * the type hierarchy specified by the given subclass      */
DECL|method|resolveParameterTypes (Class<?> subclass, Constructor<?> constructor)
specifier|public
specifier|static
name|Type
index|[]
name|resolveParameterTypes
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|subclass
parameter_list|,
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
parameter_list|)
block|{
return|return
name|resolveTypes
argument_list|(
name|constructor
operator|.
name|getGenericParameterTypes
argument_list|()
argument_list|,
name|subclass
argument_list|)
return|;
block|}
comment|/**      * Resolves the actual parameter generics of the specified method for the      * type hierarchy specified by the given subclass      */
DECL|method|resolveParameterTypes (Class<?> subclass, Method method)
specifier|public
specifier|static
name|Type
index|[]
name|resolveParameterTypes
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|subclass
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
return|return
name|resolveTypes
argument_list|(
name|method
operator|.
name|getGenericParameterTypes
argument_list|()
argument_list|,
name|subclass
argument_list|)
return|;
block|}
comment|/**      * Resolves the actual type of the specified type for the type hierarchy      * specified by the given subclass      */
DECL|method|resolveType (Type type, Class<?> subclass, Member member)
specifier|public
specifier|static
name|Type
name|resolveType
parameter_list|(
name|Type
name|type
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|subclass
parameter_list|,
name|Member
name|member
parameter_list|)
block|{
return|return
name|resolveType
argument_list|(
name|type
argument_list|,
name|subclass
argument_list|,
name|newSeenList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|resolveType (Type type, Class<?> subclass, Member member, Collection<TypeVariable<?>> seen)
specifier|public
specifier|static
name|Type
name|resolveType
parameter_list|(
name|Type
name|type
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|subclass
parameter_list|,
name|Member
name|member
parameter_list|,
name|Collection
argument_list|<
name|TypeVariable
argument_list|<
name|?
argument_list|>
argument_list|>
name|seen
parameter_list|)
block|{
return|return
name|resolveType
argument_list|(
name|type
argument_list|,
name|subclass
argument_list|,
name|seen
argument_list|)
return|;
block|}
DECL|method|resolveType (Type type, Type actualType, Collection<TypeVariable<?>> seen)
specifier|public
specifier|static
name|Type
name|resolveType
parameter_list|(
name|Type
name|type
parameter_list|,
name|Type
name|actualType
parameter_list|,
name|Collection
argument_list|<
name|TypeVariable
argument_list|<
name|?
argument_list|>
argument_list|>
name|seen
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
return|return
name|type
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|parameterizedType
init|=
operator|(
name|ParameterizedType
operator|)
name|type
decl_stmt|;
name|Type
index|[]
name|resolvedTypeArguments
decl_stmt|;
if|if
condition|(
name|Enum
operator|.
name|class
operator|.
name|equals
argument_list|(
name|parameterizedType
operator|.
name|getRawType
argument_list|()
argument_list|)
condition|)
block|{
comment|// Enums derive from themselves, which would create an infinite
comment|// loop
comment|// we directly escape the loop if we detect this.
name|resolvedTypeArguments
operator|=
operator|new
name|Type
index|[]
block|{
operator|new
name|OwbWildcardTypeImpl
argument_list|(
operator|new
name|Type
index|[]
block|{
name|Enum
operator|.
name|class
block|}
argument_list|,
name|ClassUtil
operator|.
name|NO_TYPES
argument_list|)
block|}
expr_stmt|;
block|}
else|else
block|{
name|resolvedTypeArguments
operator|=
name|resolveTypes
argument_list|(
name|parameterizedType
operator|.
name|getActualTypeArguments
argument_list|()
argument_list|,
name|actualType
argument_list|,
name|seen
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|OwbParametrizedTypeImpl
argument_list|(
name|parameterizedType
operator|.
name|getOwnerType
argument_list|()
argument_list|,
name|parameterizedType
operator|.
name|getRawType
argument_list|()
argument_list|,
name|resolvedTypeArguments
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|TypeVariable
condition|)
block|{
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|variable
init|=
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|type
decl_stmt|;
return|return
name|resolveTypeVariable
argument_list|(
name|variable
argument_list|,
name|actualType
argument_list|,
name|seen
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|WildcardType
condition|)
block|{
name|WildcardType
name|wildcardType
init|=
operator|(
name|WildcardType
operator|)
name|type
decl_stmt|;
name|Type
index|[]
name|upperBounds
init|=
name|resolveTypes
argument_list|(
name|wildcardType
operator|.
name|getUpperBounds
argument_list|()
argument_list|,
name|actualType
argument_list|,
name|seen
argument_list|)
decl_stmt|;
name|Type
index|[]
name|lowerBounds
init|=
name|resolveTypes
argument_list|(
name|wildcardType
operator|.
name|getLowerBounds
argument_list|()
argument_list|,
name|actualType
argument_list|,
name|seen
argument_list|)
decl_stmt|;
return|return
operator|new
name|OwbWildcardTypeImpl
argument_list|(
name|upperBounds
argument_list|,
name|lowerBounds
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|GenericArrayType
name|arrayType
init|=
operator|(
name|GenericArrayType
operator|)
name|type
decl_stmt|;
return|return
name|createArrayType
argument_list|(
name|resolveType
argument_list|(
name|arrayType
operator|.
name|getGenericComponentType
argument_list|()
argument_list|,
name|actualType
argument_list|,
name|seen
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|type
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|resolveTypes (Type[] types, Type actualType, Collection<TypeVariable<?>> seen)
specifier|public
specifier|static
name|Type
index|[]
name|resolveTypes
parameter_list|(
name|Type
index|[]
name|types
parameter_list|,
name|Type
name|actualType
parameter_list|,
name|Collection
argument_list|<
name|TypeVariable
argument_list|<
name|?
argument_list|>
argument_list|>
name|seen
parameter_list|)
block|{
name|Type
index|[]
name|resolvedTypeArguments
init|=
operator|new
name|Type
index|[
name|types
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Type
name|type
init|=
name|resolveType
argument_list|(
name|types
index|[
name|i
index|]
argument_list|,
name|actualType
argument_list|,
name|seen
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
comment|// means a stackoverflow was avoided, just keep
comment|// what we have
name|resolvedTypeArguments
index|[
name|i
index|]
operator|=
name|type
expr_stmt|;
block|}
block|}
return|return
name|resolvedTypeArguments
return|;
block|}
DECL|method|resolveTypes (Type[] types, Type actualType)
specifier|public
specifier|static
name|Type
index|[]
name|resolveTypes
parameter_list|(
name|Type
index|[]
name|types
parameter_list|,
name|Type
name|actualType
parameter_list|)
block|{
name|Type
index|[]
name|resolvedTypeArguments
init|=
operator|new
name|Type
index|[
name|types
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|resolvedTypeArguments
index|[
name|i
index|]
operator|=
name|resolveType
argument_list|(
name|types
index|[
name|i
index|]
argument_list|,
name|actualType
argument_list|,
name|newSeenList
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|resolvedTypeArguments
return|;
block|}
DECL|method|getTypeClosure (Class<?> type)
specifier|public
specifier|static
name|Set
argument_list|<
name|Type
argument_list|>
name|getTypeClosure
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|getTypeClosure
argument_list|(
name|type
argument_list|,
name|type
argument_list|)
return|;
block|}
DECL|method|getTypeClosure (Type actualType)
specifier|public
specifier|static
name|Set
argument_list|<
name|Type
argument_list|>
name|getTypeClosure
parameter_list|(
name|Type
name|actualType
parameter_list|)
block|{
return|return
name|getTypeClosure
argument_list|(
name|actualType
argument_list|,
name|actualType
argument_list|)
return|;
block|}
comment|/**      * Returns the type closure for the specified parameters.      *<h3>Example 1:</h3>      *<p>      * Take the following classes:      *</p>      *<code>      * public class Foo<T> {      * private T t;      * }      * public class Bar extends Foo<Number> {      * }      *</code>      *<p>      * To get the type closure of T in the context of Bar (which is      * {Number.class, Object.class}), you have to call this method like      *</p>      *<code>      * GenericUtil.getTypeClosure(Foo.class.getDeclaredField("t").getType(), Bar.class, Foo.class);      *</code>      *<h3>Example 2:</h3>      *<p>      * Take the following classes:      *</p>      *<code>      * public class Foo<T> {      * private T t;      * }      * public class Bar<T> extends Foo<T> {      * }      *</code>      *<p>      * To get the type closure of Bar<T> in the context of Foo<Number> (which      * are besides Object.class the<tt>ParameterizedType</tt>s Bar<Number> and      * Foo<Number>), you have to call this method like      *</p>      *<code>      * GenericUtil.getTypeClosure(Foo.class, new TypeLiteral<Foo<Number>>() {}.getType(), Bar.class);      *</code>      *      * @param type the type to get the closure for      * @param actualType the context to bind type variables      * @return the type closure      */
DECL|method|getTypeClosure (Type type, Type actualType)
specifier|public
specifier|static
name|Set
argument_list|<
name|Type
argument_list|>
name|getTypeClosure
parameter_list|(
name|Type
name|type
parameter_list|,
name|Type
name|actualType
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|rawType
init|=
name|getRawType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|actualRawType
init|=
name|getRawType
argument_list|(
name|actualType
argument_list|)
decl_stmt|;
if|if
condition|(
name|rawType
operator|.
name|isAssignableFrom
argument_list|(
name|actualRawType
argument_list|)
operator|&&
name|rawType
operator|!=
name|actualRawType
condition|)
block|{
return|return
name|getTypeClosure
argument_list|(
name|actualType
argument_list|,
name|type
argument_list|)
return|;
block|}
if|if
condition|(
name|hasTypeParameters
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|type
operator|=
name|getParameterizedType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|getDirectTypeClosure
argument_list|(
name|type
argument_list|,
name|actualType
argument_list|)
return|;
block|}
DECL|method|getDirectTypeClosure (final Type type, final Type actualType)
specifier|public
specifier|static
name|Set
argument_list|<
name|Type
argument_list|>
name|getDirectTypeClosure
parameter_list|(
specifier|final
name|Type
name|type
parameter_list|,
specifier|final
name|Type
name|actualType
parameter_list|)
block|{
name|Set
argument_list|<
name|Type
argument_list|>
name|typeClosure
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|typeClosure
operator|.
name|add
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|fillTypeHierarchy
argument_list|(
name|typeClosure
argument_list|,
name|type
argument_list|,
name|actualType
argument_list|)
expr_stmt|;
return|return
name|typeClosure
return|;
block|}
DECL|method|fillTypeHierarchy (Set<Type> set, Type type, Type actualType)
specifier|private
specifier|static
name|void
name|fillTypeHierarchy
parameter_list|(
name|Set
argument_list|<
name|Type
argument_list|>
name|set
parameter_list|,
name|Type
name|type
parameter_list|,
name|Type
name|actualType
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Type
name|resolvedType
init|=
name|GenericsUtil
operator|.
name|resolveType
argument_list|(
name|type
argument_list|,
name|actualType
argument_list|,
name|newSeenList
argument_list|()
argument_list|)
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|resolvedType
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|resolvedClass
init|=
name|GenericsUtil
operator|.
name|getRawType
argument_list|(
name|resolvedType
argument_list|,
name|actualType
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolvedClass
operator|.
name|getSuperclass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fillTypeHierarchy
argument_list|(
name|set
argument_list|,
name|resolvedClass
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|,
name|resolvedType
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Type
name|interfaceType
range|:
name|resolvedClass
operator|.
name|getGenericInterfaces
argument_list|()
control|)
block|{
name|fillTypeHierarchy
argument_list|(
name|set
argument_list|,
name|interfaceType
argument_list|,
name|resolvedType
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newSeenList ()
specifier|private
specifier|static
name|Collection
argument_list|<
name|TypeVariable
argument_list|<
name|?
argument_list|>
argument_list|>
name|newSeenList
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
DECL|method|hasTypeParameters (Type type)
specifier|public
specifier|static
name|boolean
name|hasTypeParameters
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|classType
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|type
decl_stmt|;
return|return
name|classType
operator|.
name|getTypeParameters
argument_list|()
operator|.
name|length
operator|>
literal|0
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getParameterizedType (Type type)
specifier|public
specifier|static
name|ParameterizedType
name|getParameterizedType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
operator|(
name|ParameterizedType
operator|)
name|type
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|classType
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|type
decl_stmt|;
return|return
operator|new
name|OwbParametrizedTypeImpl
argument_list|(
name|classType
operator|.
name|getDeclaringClass
argument_list|()
argument_list|,
name|classType
argument_list|,
name|classType
operator|.
name|getTypeParameters
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|type
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" is not supported"
argument_list|)
throw|;
block|}
block|}
DECL|method|getRawType (Type type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Class
argument_list|<
name|T
argument_list|>
name|getRawType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
return|return
name|getRawType
argument_list|(
name|type
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getRawType (Type type, Type actualType)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Class
argument_list|<
name|T
argument_list|>
name|getRawType
parameter_list|(
name|Type
name|type
parameter_list|,
name|Type
name|actualType
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|type
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|parameterizedType
init|=
operator|(
name|ParameterizedType
operator|)
name|type
decl_stmt|;
return|return
name|getRawType
argument_list|(
name|parameterizedType
operator|.
name|getRawType
argument_list|()
argument_list|,
name|actualType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|TypeVariable
condition|)
block|{
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|typeVariable
init|=
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|type
decl_stmt|;
name|Type
name|mostSpecificType
init|=
name|getMostSpecificType
argument_list|(
name|getRawTypes
argument_list|(
name|typeVariable
operator|.
name|getBounds
argument_list|()
argument_list|,
name|actualType
argument_list|)
argument_list|,
name|typeVariable
operator|.
name|getBounds
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getRawType
argument_list|(
name|mostSpecificType
argument_list|,
name|actualType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|WildcardType
condition|)
block|{
name|WildcardType
name|wildcardType
init|=
operator|(
name|WildcardType
operator|)
name|type
decl_stmt|;
name|Type
name|mostSpecificType
init|=
name|getMostSpecificType
argument_list|(
name|getRawTypes
argument_list|(
name|wildcardType
operator|.
name|getUpperBounds
argument_list|()
argument_list|,
name|actualType
argument_list|)
argument_list|,
name|wildcardType
operator|.
name|getUpperBounds
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getRawType
argument_list|(
name|mostSpecificType
argument_list|,
name|actualType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|GenericArrayType
name|arrayType
init|=
operator|(
name|GenericArrayType
operator|)
name|type
decl_stmt|;
return|return
name|getRawType
argument_list|(
name|createArrayType
argument_list|(
name|getRawType
argument_list|(
name|arrayType
operator|.
name|getGenericComponentType
argument_list|()
argument_list|,
name|actualType
argument_list|)
argument_list|)
argument_list|,
name|actualType
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|type
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|getRawTypes (Type[] types)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Class
argument_list|<
name|T
argument_list|>
index|[]
name|getRawTypes
parameter_list|(
name|Type
index|[]
name|types
parameter_list|)
block|{
return|return
name|getRawTypes
argument_list|(
name|types
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getRawTypes (Type[] types, Type actualType)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Class
argument_list|<
name|T
argument_list|>
index|[]
name|getRawTypes
parameter_list|(
name|Type
index|[]
name|types
parameter_list|,
name|Type
name|actualType
parameter_list|)
block|{
name|Class
argument_list|<
name|T
argument_list|>
index|[]
name|rawTypes
init|=
operator|new
name|Class
index|[
name|types
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|rawTypes
index|[
name|i
index|]
operator|=
name|getRawType
argument_list|(
name|types
index|[
name|i
index|]
argument_list|,
name|actualType
argument_list|)
expr_stmt|;
block|}
return|return
name|rawTypes
return|;
block|}
DECL|method|getMostSpecificType (Class<?>[] types, Type[] genericTypes)
specifier|private
specifier|static
name|Type
name|getMostSpecificType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|types
parameter_list|,
name|Type
index|[]
name|genericTypes
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|mostSpecificType
init|=
name|types
index|[
literal|0
index|]
decl_stmt|;
name|int
name|mostSpecificIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|mostSpecificType
operator|.
name|isAssignableFrom
argument_list|(
name|types
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|mostSpecificType
operator|=
name|types
index|[
name|i
index|]
expr_stmt|;
name|mostSpecificIndex
operator|=
name|i
expr_stmt|;
block|}
block|}
return|return
name|genericTypes
index|[
name|mostSpecificIndex
index|]
return|;
block|}
DECL|method|getClassTypes (Class<?>[] rawTypes)
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|getClassTypes
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|rawTypes
parameter_list|)
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|rawType
range|:
name|rawTypes
control|)
block|{
if|if
condition|(
operator|!
name|rawType
operator|.
name|isInterface
argument_list|()
condition|)
block|{
name|classTypes
operator|.
name|add
argument_list|(
name|rawType
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|classTypes
operator|.
name|toArray
argument_list|(
operator|new
name|Class
index|[
name|classTypes
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|resolveTypeVariable (TypeVariable<?> variable, Type actualType, Collection<TypeVariable<?>> seen)
specifier|private
specifier|static
name|Type
name|resolveTypeVariable
parameter_list|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|variable
parameter_list|,
name|Type
name|actualType
parameter_list|,
name|Collection
argument_list|<
name|TypeVariable
argument_list|<
name|?
argument_list|>
argument_list|>
name|seen
parameter_list|)
block|{
if|if
condition|(
name|actualType
operator|==
literal|null
condition|)
block|{
return|return
name|variable
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|declaringClass
init|=
name|getDeclaringClass
argument_list|(
name|variable
operator|.
name|getGenericDeclaration
argument_list|()
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|actualClass
init|=
name|getRawType
argument_list|(
name|actualType
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualClass
operator|==
name|declaringClass
condition|)
block|{
return|return
name|resolveTypeVariable
argument_list|(
name|variable
argument_list|,
name|variable
operator|.
name|getGenericDeclaration
argument_list|()
argument_list|,
name|getParameterizedType
argument_list|(
name|actualType
argument_list|)
argument_list|,
name|seen
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|actualClass
operator|.
name|isAssignableFrom
argument_list|(
name|declaringClass
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|directSubclass
init|=
name|getDirectSubclass
argument_list|(
name|declaringClass
argument_list|,
name|actualClass
argument_list|)
decl_stmt|;
name|Type
index|[]
name|typeArguments
init|=
name|resolveTypeArguments
argument_list|(
name|directSubclass
argument_list|,
name|actualType
argument_list|)
decl_stmt|;
name|Type
name|directSubtype
init|=
operator|new
name|OwbParametrizedTypeImpl
argument_list|(
name|directSubclass
operator|.
name|getDeclaringClass
argument_list|()
argument_list|,
name|directSubclass
argument_list|,
name|typeArguments
argument_list|)
decl_stmt|;
return|return
name|resolveTypeVariable
argument_list|(
name|variable
argument_list|,
name|directSubtype
argument_list|,
name|seen
argument_list|)
return|;
block|}
else|else
block|{
comment|// if (declaringClass.isAssignableFrom(actualClass))
name|Type
name|genericSuperclass
init|=
name|getGenericSuperclass
argument_list|(
name|actualClass
argument_list|,
name|declaringClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|genericSuperclass
operator|==
literal|null
condition|)
block|{
return|return
name|variable
return|;
block|}
elseif|else
if|if
condition|(
name|genericSuperclass
operator|instanceof
name|Class
condition|)
block|{
comment|// special handling for type erasure
name|Class
argument_list|<
name|?
argument_list|>
name|superclass
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|genericSuperclass
decl_stmt|;
name|genericSuperclass
operator|=
operator|new
name|OwbParametrizedTypeImpl
argument_list|(
name|superclass
operator|.
name|getDeclaringClass
argument_list|()
argument_list|,
name|superclass
argument_list|,
name|getRawTypes
argument_list|(
name|superclass
operator|.
name|getTypeParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ParameterizedType
name|genericSupertype
init|=
name|getParameterizedType
argument_list|(
name|genericSuperclass
argument_list|)
decl_stmt|;
name|Type
index|[]
name|typeArguments
init|=
name|resolveTypeArguments
argument_list|(
name|getParameterizedType
argument_list|(
name|actualType
argument_list|)
argument_list|,
name|genericSupertype
argument_list|)
decl_stmt|;
name|genericSuperclass
operator|=
operator|new
name|OwbParametrizedTypeImpl
argument_list|(
name|genericSupertype
operator|.
name|getOwnerType
argument_list|()
argument_list|,
name|genericSupertype
operator|.
name|getRawType
argument_list|()
argument_list|,
name|typeArguments
argument_list|)
expr_stmt|;
block|}
name|Type
name|resolvedType
init|=
name|resolveTypeVariable
argument_list|(
name|variable
argument_list|,
name|genericSuperclass
argument_list|,
name|seen
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolvedType
operator|instanceof
name|TypeVariable
condition|)
block|{
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|resolvedTypeVariable
init|=
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|resolvedType
decl_stmt|;
name|TypeVariable
argument_list|<
name|?
argument_list|>
index|[]
name|typeParameters
init|=
name|actualClass
operator|.
name|getTypeParameters
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeParameters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|typeParameters
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|resolvedTypeVariable
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|resolvedType
operator|=
name|getParameterizedType
argument_list|(
name|actualType
argument_list|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
name|i
index|]
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|resolvedType
return|;
block|}
block|}
DECL|method|getDeclaringClass (GenericDeclaration declaration)
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getDeclaringClass
parameter_list|(
name|GenericDeclaration
name|declaration
parameter_list|)
block|{
if|if
condition|(
name|declaration
operator|instanceof
name|Class
condition|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|declaration
return|;
block|}
elseif|else
if|if
condition|(
name|declaration
operator|instanceof
name|Member
condition|)
block|{
return|return
operator|(
operator|(
name|Member
operator|)
name|declaration
operator|)
operator|.
name|getDeclaringClass
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|declaration
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|resolveTypeVariable (TypeVariable<?> variable, GenericDeclaration declaration, ParameterizedType type, Collection<TypeVariable<?>> seen)
specifier|private
specifier|static
name|Type
name|resolveTypeVariable
parameter_list|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|variable
parameter_list|,
name|GenericDeclaration
name|declaration
parameter_list|,
name|ParameterizedType
name|type
parameter_list|,
name|Collection
argument_list|<
name|TypeVariable
argument_list|<
name|?
argument_list|>
argument_list|>
name|seen
parameter_list|)
block|{
name|int
name|index
init|=
name|getIndex
argument_list|(
name|declaration
argument_list|,
name|variable
argument_list|)
decl_stmt|;
if|if
condition|(
name|declaration
operator|instanceof
name|Class
condition|)
block|{
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
return|return
name|type
operator|.
name|getActualTypeArguments
argument_list|()
index|[
name|index
index|]
return|;
block|}
else|else
block|{
name|index
operator|=
name|getIndex
argument_list|(
name|type
argument_list|,
name|variable
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
return|return
name|declaration
operator|.
name|getTypeParameters
argument_list|()
index|[
name|index
index|]
return|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|seen
operator|.
name|contains
argument_list|(
name|variable
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|seen
operator|.
name|add
argument_list|(
name|variable
argument_list|)
expr_stmt|;
name|Type
index|[]
name|resolvedBounds
init|=
name|resolveTypes
argument_list|(
name|declaration
operator|.
name|getTypeParameters
argument_list|()
index|[
name|index
index|]
operator|.
name|getBounds
argument_list|()
argument_list|,
name|type
argument_list|,
name|seen
argument_list|)
decl_stmt|;
return|return
name|OwbTypeVariableImpl
operator|.
name|createTypeVariable
argument_list|(
name|variable
argument_list|,
name|resolvedBounds
argument_list|)
return|;
block|}
return|return
name|variable
return|;
block|}
DECL|method|getIndex (GenericDeclaration declaration, TypeVariable<?> variable)
specifier|private
specifier|static
name|int
name|getIndex
parameter_list|(
name|GenericDeclaration
name|declaration
parameter_list|,
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|variable
parameter_list|)
block|{
name|Type
index|[]
name|typeParameters
init|=
name|declaration
operator|.
name|getTypeParameters
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeParameters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|typeParameters
index|[
name|i
index|]
operator|instanceof
name|TypeVariable
condition|)
block|{
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|variableArgument
init|=
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|typeParameters
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|variableArgument
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|variable
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|method|getIndex (ParameterizedType type, TypeVariable<?> variable)
specifier|private
specifier|static
name|int
name|getIndex
parameter_list|(
name|ParameterizedType
name|type
parameter_list|,
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|variable
parameter_list|)
block|{
name|Type
index|[]
name|actualTypeArguments
init|=
name|type
operator|.
name|getActualTypeArguments
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actualTypeArguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|actualTypeArguments
index|[
name|i
index|]
operator|instanceof
name|TypeVariable
condition|)
block|{
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|variableArgument
init|=
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|actualTypeArguments
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|variableArgument
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|variable
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|method|getDirectSubclass (Class<?> declaringClass, Class<?> actualClass)
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getDirectSubclass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|declaringClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|actualClass
parameter_list|)
block|{
if|if
condition|(
name|actualClass
operator|.
name|isInterface
argument_list|()
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|subclass
init|=
name|declaringClass
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
range|:
name|declaringClass
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
if|if
condition|(
name|iface
operator|==
name|actualClass
condition|)
block|{
return|return
name|subclass
return|;
block|}
if|if
condition|(
name|actualClass
operator|.
name|isAssignableFrom
argument_list|(
name|iface
argument_list|)
condition|)
block|{
name|subclass
operator|=
name|iface
expr_stmt|;
block|}
else|else
block|{
name|subclass
operator|=
name|declaringClass
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|getDirectSubclass
argument_list|(
name|subclass
argument_list|,
name|actualClass
argument_list|)
return|;
block|}
else|else
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|directSubclass
init|=
name|declaringClass
decl_stmt|;
while|while
condition|(
name|directSubclass
operator|.
name|getSuperclass
argument_list|()
operator|!=
name|actualClass
condition|)
block|{
name|directSubclass
operator|=
name|directSubclass
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
return|return
name|directSubclass
return|;
block|}
block|}
DECL|method|getGenericSuperclass (Class<?> subclass, Class<?> superclass)
specifier|private
specifier|static
name|Type
name|getGenericSuperclass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|subclass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|superclass
parameter_list|)
block|{
if|if
condition|(
operator|!
name|superclass
operator|.
name|isInterface
argument_list|()
condition|)
block|{
return|return
name|subclass
operator|.
name|getGenericSuperclass
argument_list|()
return|;
block|}
else|else
block|{
for|for
control|(
name|Type
name|genericInterface
range|:
name|subclass
operator|.
name|getGenericInterfaces
argument_list|()
control|)
block|{
if|if
condition|(
name|getRawType
argument_list|(
name|genericInterface
argument_list|)
operator|==
name|superclass
condition|)
block|{
return|return
name|genericInterface
return|;
block|}
block|}
block|}
return|return
name|superclass
return|;
block|}
DECL|method|resolveTypeArguments (Class<?> subclass, Type supertype)
specifier|private
specifier|static
name|Type
index|[]
name|resolveTypeArguments
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|subclass
parameter_list|,
name|Type
name|supertype
parameter_list|)
block|{
if|if
condition|(
name|supertype
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|parameterizedSupertype
init|=
operator|(
name|ParameterizedType
operator|)
name|supertype
decl_stmt|;
return|return
name|resolveTypeArguments
argument_list|(
name|subclass
argument_list|,
name|parameterizedSupertype
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|subclass
operator|.
name|getTypeParameters
argument_list|()
return|;
block|}
block|}
DECL|method|resolveTypeArguments (Class<?> subclass, ParameterizedType parameterizedSupertype)
specifier|private
specifier|static
name|Type
index|[]
name|resolveTypeArguments
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|subclass
parameter_list|,
name|ParameterizedType
name|parameterizedSupertype
parameter_list|)
block|{
name|Type
name|genericSuperclass
init|=
name|getGenericSuperclass
argument_list|(
name|subclass
argument_list|,
name|getRawType
argument_list|(
name|parameterizedSupertype
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|genericSuperclass
operator|instanceof
name|ParameterizedType
operator|)
condition|)
block|{
return|return
name|subclass
operator|.
name|getTypeParameters
argument_list|()
return|;
block|}
name|ParameterizedType
name|parameterizedSuperclass
init|=
operator|(
name|ParameterizedType
operator|)
name|genericSuperclass
decl_stmt|;
name|Type
index|[]
name|typeParameters
init|=
name|subclass
operator|.
name|getTypeParameters
argument_list|()
decl_stmt|;
name|Type
index|[]
name|actualTypeArguments
init|=
name|parameterizedSupertype
operator|.
name|getActualTypeArguments
argument_list|()
decl_stmt|;
return|return
name|resolveTypeArguments
argument_list|(
name|parameterizedSuperclass
argument_list|,
name|typeParameters
argument_list|,
name|actualTypeArguments
argument_list|)
return|;
block|}
DECL|method|resolveTypeArguments (ParameterizedType subtype, ParameterizedType parameterizedSupertype)
specifier|private
specifier|static
name|Type
index|[]
name|resolveTypeArguments
parameter_list|(
name|ParameterizedType
name|subtype
parameter_list|,
name|ParameterizedType
name|parameterizedSupertype
parameter_list|)
block|{
return|return
name|resolveTypeArguments
argument_list|(
name|getParameterizedType
argument_list|(
name|getRawType
argument_list|(
name|subtype
argument_list|)
argument_list|)
argument_list|,
name|parameterizedSupertype
operator|.
name|getActualTypeArguments
argument_list|()
argument_list|,
name|subtype
operator|.
name|getActualTypeArguments
argument_list|()
argument_list|)
return|;
block|}
DECL|method|resolveTypeArguments (ParameterizedType parameterizedType, Type[] typeParameters, Type[] actualTypeArguments)
specifier|private
specifier|static
name|Type
index|[]
name|resolveTypeArguments
parameter_list|(
name|ParameterizedType
name|parameterizedType
parameter_list|,
name|Type
index|[]
name|typeParameters
parameter_list|,
name|Type
index|[]
name|actualTypeArguments
parameter_list|)
block|{
name|Type
index|[]
name|resolvedTypeArguments
init|=
operator|new
name|Type
index|[
name|typeParameters
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeParameters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|resolvedTypeArguments
index|[
name|i
index|]
operator|=
name|resolveTypeArgument
argument_list|(
name|parameterizedType
argument_list|,
name|typeParameters
index|[
name|i
index|]
argument_list|,
name|actualTypeArguments
argument_list|)
expr_stmt|;
block|}
return|return
name|resolvedTypeArguments
return|;
block|}
DECL|method|resolveTypeArgument (ParameterizedType parameterizedType, Type typeParameter, Type[] actualTypeArguments)
specifier|private
specifier|static
name|Type
name|resolveTypeArgument
parameter_list|(
name|ParameterizedType
name|parameterizedType
parameter_list|,
name|Type
name|typeParameter
parameter_list|,
name|Type
index|[]
name|actualTypeArguments
parameter_list|)
block|{
if|if
condition|(
name|typeParameter
operator|instanceof
name|TypeVariable
condition|)
block|{
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|variable
init|=
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|typeParameter
decl_stmt|;
name|int
name|index
init|=
name|getIndex
argument_list|(
name|parameterizedType
argument_list|,
name|variable
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|typeParameter
return|;
block|}
else|else
block|{
return|return
name|actualTypeArguments
index|[
name|index
index|]
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|typeParameter
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|GenericArrayType
name|array
init|=
operator|(
name|GenericArrayType
operator|)
name|typeParameter
decl_stmt|;
return|return
name|createArrayType
argument_list|(
name|resolveTypeArgument
argument_list|(
name|parameterizedType
argument_list|,
name|array
operator|.
name|getGenericComponentType
argument_list|()
argument_list|,
name|actualTypeArguments
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|typeParameter
return|;
block|}
block|}
DECL|method|createArrayType (Type componentType)
specifier|private
specifier|static
name|Type
name|createArrayType
parameter_list|(
name|Type
name|componentType
parameter_list|)
block|{
if|if
condition|(
name|componentType
operator|instanceof
name|Class
condition|)
block|{
return|return
name|Array
operator|.
name|newInstance
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|componentType
argument_list|,
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|OwbGenericArrayTypeImpl
argument_list|(
name|componentType
argument_list|)
return|;
block|}
block|}
DECL|method|resolveType (ParameterizedType parameterizedType, Type metadataType)
specifier|public
specifier|static
name|Type
name|resolveType
parameter_list|(
name|ParameterizedType
name|parameterizedType
parameter_list|,
name|Type
name|metadataType
parameter_list|)
block|{
return|return
name|resolveType
argument_list|(
name|parameterizedType
argument_list|,
name|metadataType
argument_list|,
name|newSeenList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

