begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
operator|.
name|ELEMENT_NODE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProjectHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|PackageHelper
operator|.
name|loadText
import|;
end_import

begin_comment
comment|/**  * Prepares the Karaf provider camel catalog to include component it supports  *  * @goal prepare-catalog-karaf  */
end_comment

begin_class
DECL|class|PrepareCatalogKarafMojo
specifier|public
class|class
name|PrepareCatalogKarafMojo
extends|extends
name|AbstractMojo
block|{
DECL|field|BUFFER_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
comment|/**      * The maven project.      *      * @parameter property="project"      * @required      * @readonly      */
DECL|field|project
specifier|protected
name|MavenProject
name|project
decl_stmt|;
comment|/**      * The output directory for components catalog      *      * @parameter default-value="${project.build.directory}/classes/org/apache/camel/catalog/karaf/components"      */
DECL|field|componentsOutDir
specifier|protected
name|File
name|componentsOutDir
decl_stmt|;
comment|/**      * The output directory for dataformats catalog      *      * @parameter default-value="${project.build.directory}/classes/org/apache/camel/catalog/karaf/dataformats"      */
DECL|field|dataFormatsOutDir
specifier|protected
name|File
name|dataFormatsOutDir
decl_stmt|;
comment|/**      * The output directory for languages catalog      *      * @parameter default-value="${project.build.directory}/classes/org/apache/camel/catalog/karaf/languages"      */
DECL|field|languagesOutDir
specifier|protected
name|File
name|languagesOutDir
decl_stmt|;
comment|/**      * The karaf features directory      *      * @parameter default-value="${project.build.directory}/../../../platforms/karaf/features/src/main/resources/"      */
DECL|field|featuresDir
specifier|protected
name|File
name|featuresDir
decl_stmt|;
comment|/**      * The components directory where all the Apache Camel components are      *      * @parameter default-value="${project.build.directory}/../../../components"      */
DECL|field|componentsDir
specifier|protected
name|File
name|componentsDir
decl_stmt|;
comment|/**      * The camel-core directory where camel-core components are      *      * @parameter default-value="${project.build.directory}/../../../camel-core"      */
DECL|field|coreDir
specifier|protected
name|File
name|coreDir
decl_stmt|;
comment|/**      * Maven ProjectHelper.      *      * @component      * @readonly      */
DECL|field|projectHelper
specifier|private
name|MavenProjectHelper
name|projectHelper
decl_stmt|;
comment|/**      * Execute goal.      *      * @throws MojoExecutionException execution of the main class or one of the      *                                                        threads it generated failed.      * @throws MojoFailureException   something bad happened...      */
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|features
init|=
name|findKarafFeatures
argument_list|()
decl_stmt|;
name|executeComponents
argument_list|(
name|features
argument_list|)
expr_stmt|;
name|executeDataFormats
argument_list|(
name|features
argument_list|)
expr_stmt|;
name|executeLanguages
argument_list|(
name|features
argument_list|)
expr_stmt|;
block|}
DECL|method|executeComponents (Set<String> features)
specifier|protected
name|void
name|executeComponents
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|features
parameter_list|)
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Copying all Camel component json descriptors"
argument_list|)
expr_stmt|;
comment|// lets use sorted set/maps
name|Set
argument_list|<
name|File
argument_list|>
name|jsonFiles
init|=
operator|new
name|TreeSet
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|File
argument_list|>
name|componentFiles
init|=
operator|new
name|TreeSet
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
comment|// find all json files in components and camel-core
if|if
condition|(
name|componentsDir
operator|!=
literal|null
operator|&&
name|componentsDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|components
init|=
name|componentsDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|components
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|dir
range|:
name|components
control|)
block|{
comment|// skip camel-spring-dm
if|if
condition|(
name|dir
operator|.
name|isDirectory
argument_list|()
operator|&&
literal|"camel-spring-dm"
operator|.
name|equals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|dir
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
literal|"target"
operator|.
name|equals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"target/classes"
argument_list|)
decl_stmt|;
comment|// the directory must be in the list of known features
if|if
condition|(
operator|!
name|features
operator|.
name|contains
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// special for camel-salesforce which is in a sub dir
if|if
condition|(
literal|"camel-salesforce"
operator|.
name|equals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|target
operator|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"camel-salesforce-component/target/classes"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"camel-linkedin"
operator|.
name|equals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|target
operator|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"camel-linkedin-component/target/classes"
argument_list|)
expr_stmt|;
block|}
name|findComponentFilesRecursive
argument_list|(
name|target
argument_list|,
name|jsonFiles
argument_list|,
name|componentFiles
argument_list|,
operator|new
name|CamelComponentsFileFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|coreDir
operator|!=
literal|null
operator|&&
name|coreDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|coreDir
argument_list|,
literal|"target/classes"
argument_list|)
decl_stmt|;
name|findComponentFilesRecursive
argument_list|(
name|target
argument_list|,
name|jsonFiles
argument_list|,
name|componentFiles
argument_list|,
operator|new
name|CamelComponentsFileFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
name|componentFiles
operator|.
name|size
argument_list|()
operator|+
literal|" component.properties files"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
name|jsonFiles
operator|.
name|size
argument_list|()
operator|+
literal|" component json files"
argument_list|)
expr_stmt|;
comment|// make sure to create out dir
name|componentsOutDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|alternativeSchemes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|jsonFiles
control|)
block|{
name|File
name|to
init|=
operator|new
name|File
argument_list|(
name|componentsOutDir
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|copyFile
argument_list|(
name|file
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Cannot copy file from "
operator|+
name|file
operator|+
literal|" -> "
operator|+
name|to
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|File
name|all
init|=
operator|new
name|File
argument_list|(
name|componentsOutDir
argument_list|,
literal|"../components.properties"
argument_list|)
decl_stmt|;
try|try
block|{
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|all
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
index|[]
name|names
init|=
name|componentsOutDir
operator|.
name|list
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// sort the names
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".json"
argument_list|)
condition|)
block|{
comment|// strip out .json from the name
name|String
name|componentName
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|5
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|componentName
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|components
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|components
control|)
block|{
name|fos
operator|.
name|write
argument_list|(
name|name
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
literal|"\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Error writing to file "
operator|+
name|all
argument_list|)
throw|;
block|}
block|}
DECL|method|executeDataFormats (Set<String> features)
specifier|protected
name|void
name|executeDataFormats
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|features
parameter_list|)
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Copying all Camel dataformat json descriptors"
argument_list|)
expr_stmt|;
comment|// lets use sorted set/maps
name|Set
argument_list|<
name|File
argument_list|>
name|jsonFiles
init|=
operator|new
name|TreeSet
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|File
argument_list|>
name|dataFormatFiles
init|=
operator|new
name|TreeSet
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
comment|// find all data formats from the components directory
if|if
condition|(
name|componentsDir
operator|!=
literal|null
operator|&&
name|componentsDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|dataFormats
init|=
name|componentsDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataFormats
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|dir
range|:
name|dataFormats
control|)
block|{
if|if
condition|(
name|dir
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
literal|"target"
operator|.
name|equals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// skip camel-spring-dm
if|if
condition|(
name|dir
operator|.
name|isDirectory
argument_list|()
operator|&&
literal|"camel-spring-dm"
operator|.
name|equals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// the directory must be in the list of known features
if|if
condition|(
operator|!
name|features
operator|.
name|contains
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"target/classes"
argument_list|)
decl_stmt|;
name|findDataFormatFilesRecursive
argument_list|(
name|target
argument_list|,
name|jsonFiles
argument_list|,
name|dataFormatFiles
argument_list|,
operator|new
name|CamelDataFormatsFileFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|coreDir
operator|!=
literal|null
operator|&&
name|coreDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|coreDir
argument_list|,
literal|"target/classes"
argument_list|)
decl_stmt|;
name|findDataFormatFilesRecursive
argument_list|(
name|target
argument_list|,
name|jsonFiles
argument_list|,
name|dataFormatFiles
argument_list|,
operator|new
name|CamelDataFormatsFileFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
name|dataFormatFiles
operator|.
name|size
argument_list|()
operator|+
literal|" dataformat.properties files"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
name|jsonFiles
operator|.
name|size
argument_list|()
operator|+
literal|" dataformat json files"
argument_list|)
expr_stmt|;
comment|// make sure to create out dir
name|dataFormatsOutDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
for|for
control|(
name|File
name|file
range|:
name|jsonFiles
control|)
block|{
name|File
name|to
init|=
operator|new
name|File
argument_list|(
name|dataFormatsOutDir
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|copyFile
argument_list|(
name|file
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Cannot copy file from "
operator|+
name|file
operator|+
literal|" -> "
operator|+
name|to
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|File
name|all
init|=
operator|new
name|File
argument_list|(
name|dataFormatsOutDir
argument_list|,
literal|"../dataformats.properties"
argument_list|)
decl_stmt|;
try|try
block|{
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|all
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
index|[]
name|names
init|=
name|dataFormatsOutDir
operator|.
name|list
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dataFormats
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// sort the names
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".json"
argument_list|)
condition|)
block|{
comment|// strip out .json from the name
name|String
name|dataFormatName
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|5
argument_list|)
decl_stmt|;
name|dataFormats
operator|.
name|add
argument_list|(
name|dataFormatName
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|dataFormats
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|dataFormats
control|)
block|{
name|fos
operator|.
name|write
argument_list|(
name|name
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
literal|"\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Error writing to file "
operator|+
name|all
argument_list|)
throw|;
block|}
block|}
DECL|method|executeLanguages (Set<String> features)
specifier|protected
name|void
name|executeLanguages
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|features
parameter_list|)
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Copying all Camel language json descriptors"
argument_list|)
expr_stmt|;
comment|// lets use sorted set/maps
name|Set
argument_list|<
name|File
argument_list|>
name|jsonFiles
init|=
operator|new
name|TreeSet
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|File
argument_list|>
name|languageFiles
init|=
operator|new
name|TreeSet
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
comment|// find all languages from the components directory
if|if
condition|(
name|componentsDir
operator|!=
literal|null
operator|&&
name|componentsDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|languages
init|=
name|componentsDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|languages
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|dir
range|:
name|languages
control|)
block|{
comment|// skip camel-spring-dm
if|if
condition|(
name|dir
operator|.
name|isDirectory
argument_list|()
operator|&&
literal|"camel-spring-dm"
operator|.
name|equals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// the directory must be in the list of known features
if|if
condition|(
operator|!
name|features
operator|.
name|contains
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|dir
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
literal|"target"
operator|.
name|equals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"target/classes"
argument_list|)
decl_stmt|;
name|findLanguageFilesRecursive
argument_list|(
name|target
argument_list|,
name|jsonFiles
argument_list|,
name|languageFiles
argument_list|,
operator|new
name|CamelLanguagesFileFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|coreDir
operator|!=
literal|null
operator|&&
name|coreDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|coreDir
argument_list|,
literal|"target/classes"
argument_list|)
decl_stmt|;
name|findLanguageFilesRecursive
argument_list|(
name|target
argument_list|,
name|jsonFiles
argument_list|,
name|languageFiles
argument_list|,
operator|new
name|CamelLanguagesFileFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
name|languageFiles
operator|.
name|size
argument_list|()
operator|+
literal|" language.properties files"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
name|jsonFiles
operator|.
name|size
argument_list|()
operator|+
literal|" language json files"
argument_list|)
expr_stmt|;
comment|// make sure to create out dir
name|languagesOutDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
for|for
control|(
name|File
name|file
range|:
name|jsonFiles
control|)
block|{
name|File
name|to
init|=
operator|new
name|File
argument_list|(
name|languagesOutDir
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|copyFile
argument_list|(
name|file
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Cannot copy file from "
operator|+
name|file
operator|+
literal|" -> "
operator|+
name|to
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|File
name|all
init|=
operator|new
name|File
argument_list|(
name|languagesOutDir
argument_list|,
literal|"../languages.properties"
argument_list|)
decl_stmt|;
try|try
block|{
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|all
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
index|[]
name|names
init|=
name|languagesOutDir
operator|.
name|list
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|languages
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// sort the names
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".json"
argument_list|)
condition|)
block|{
comment|// strip out .json from the name
name|String
name|languageName
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|5
argument_list|)
decl_stmt|;
name|languages
operator|.
name|add
argument_list|(
name|languageName
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|languages
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|languages
control|)
block|{
name|fos
operator|.
name|write
argument_list|(
name|name
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
literal|"\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Error writing to file "
operator|+
name|all
argument_list|)
throw|;
block|}
block|}
DECL|method|findComponentFilesRecursive (File dir, Set<File> found, Set<File> components, FileFilter filter)
specifier|private
name|void
name|findComponentFilesRecursive
parameter_list|(
name|File
name|dir
parameter_list|,
name|Set
argument_list|<
name|File
argument_list|>
name|found
parameter_list|,
name|Set
argument_list|<
name|File
argument_list|>
name|components
parameter_list|,
name|FileFilter
name|filter
parameter_list|)
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
comment|// skip files in root dirs as Camel does not store information there but others may do
name|boolean
name|rootDir
init|=
literal|"classes"
operator|.
name|equals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"META-INF"
operator|.
name|equals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|jsonFile
init|=
operator|!
name|rootDir
operator|&&
name|file
operator|.
name|isFile
argument_list|()
operator|&&
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".json"
argument_list|)
decl_stmt|;
name|boolean
name|componentFile
init|=
operator|!
name|rootDir
operator|&&
name|file
operator|.
name|isFile
argument_list|()
operator|&&
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"component.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonFile
condition|)
block|{
name|found
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|componentFile
condition|)
block|{
name|components
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|findComponentFilesRecursive
argument_list|(
name|file
argument_list|,
name|found
argument_list|,
name|components
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|findDataFormatFilesRecursive (File dir, Set<File> found, Set<File> dataFormats, FileFilter filter)
specifier|private
name|void
name|findDataFormatFilesRecursive
parameter_list|(
name|File
name|dir
parameter_list|,
name|Set
argument_list|<
name|File
argument_list|>
name|found
parameter_list|,
name|Set
argument_list|<
name|File
argument_list|>
name|dataFormats
parameter_list|,
name|FileFilter
name|filter
parameter_list|)
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
comment|// skip files in root dirs as Camel does not store information there but others may do
name|boolean
name|rootDir
init|=
literal|"classes"
operator|.
name|equals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"META-INF"
operator|.
name|equals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|jsonFile
init|=
operator|!
name|rootDir
operator|&&
name|file
operator|.
name|isFile
argument_list|()
operator|&&
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".json"
argument_list|)
decl_stmt|;
name|boolean
name|dataFormatFile
init|=
operator|!
name|rootDir
operator|&&
name|file
operator|.
name|isFile
argument_list|()
operator|&&
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"dataformat.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonFile
condition|)
block|{
name|found
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dataFormatFile
condition|)
block|{
name|dataFormats
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|findDataFormatFilesRecursive
argument_list|(
name|file
argument_list|,
name|found
argument_list|,
name|dataFormats
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|findLanguageFilesRecursive (File dir, Set<File> found, Set<File> languages, FileFilter filter)
specifier|private
name|void
name|findLanguageFilesRecursive
parameter_list|(
name|File
name|dir
parameter_list|,
name|Set
argument_list|<
name|File
argument_list|>
name|found
parameter_list|,
name|Set
argument_list|<
name|File
argument_list|>
name|languages
parameter_list|,
name|FileFilter
name|filter
parameter_list|)
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
comment|// skip files in root dirs as Camel does not store information there but others may do
name|boolean
name|rootDir
init|=
literal|"classes"
operator|.
name|equals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"META-INF"
operator|.
name|equals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|jsonFile
init|=
operator|!
name|rootDir
operator|&&
name|file
operator|.
name|isFile
argument_list|()
operator|&&
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".json"
argument_list|)
decl_stmt|;
name|boolean
name|languageFile
init|=
operator|!
name|rootDir
operator|&&
name|file
operator|.
name|isFile
argument_list|()
operator|&&
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"language.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonFile
condition|)
block|{
name|found
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|languageFile
condition|)
block|{
name|languages
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|findLanguageFilesRecursive
argument_list|(
name|file
argument_list|,
name|found
argument_list|,
name|languages
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|CamelComponentsFileFilter
specifier|private
class|class
name|CamelComponentsFileFilter
implements|implements
name|FileFilter
block|{
annotation|@
name|Override
DECL|method|accept (File pathname)
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|pathname
parameter_list|)
block|{
if|if
condition|(
name|pathname
operator|.
name|isDirectory
argument_list|()
operator|&&
name|pathname
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"model"
argument_list|)
condition|)
block|{
comment|// do not check the camel-core model packages as there is no components there
return|return
literal|false
return|;
block|}
if|if
condition|(
name|pathname
operator|.
name|isFile
argument_list|()
operator|&&
name|pathname
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".json"
argument_list|)
condition|)
block|{
comment|// must be a components json file
try|try
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|pathname
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|json
operator|!=
literal|null
operator|&&
name|json
operator|.
name|contains
argument_list|(
literal|"\"kind\": \"component\""
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
name|pathname
operator|.
name|isDirectory
argument_list|()
operator|||
operator|(
name|pathname
operator|.
name|isFile
argument_list|()
operator|&&
name|pathname
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"component.properties"
argument_list|)
operator|)
return|;
block|}
block|}
DECL|class|CamelDataFormatsFileFilter
specifier|private
class|class
name|CamelDataFormatsFileFilter
implements|implements
name|FileFilter
block|{
annotation|@
name|Override
DECL|method|accept (File pathname)
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|pathname
parameter_list|)
block|{
if|if
condition|(
name|pathname
operator|.
name|isDirectory
argument_list|()
operator|&&
name|pathname
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"model"
argument_list|)
condition|)
block|{
comment|// do not check the camel-core model packages as there is no components there
return|return
literal|false
return|;
block|}
if|if
condition|(
name|pathname
operator|.
name|isFile
argument_list|()
operator|&&
name|pathname
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".json"
argument_list|)
condition|)
block|{
comment|// must be a dataformat json file
try|try
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|pathname
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|json
operator|!=
literal|null
operator|&&
name|json
operator|.
name|contains
argument_list|(
literal|"\"kind\": \"dataformat\""
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
name|pathname
operator|.
name|isDirectory
argument_list|()
operator|||
operator|(
name|pathname
operator|.
name|isFile
argument_list|()
operator|&&
name|pathname
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"dataformat.properties"
argument_list|)
operator|)
return|;
block|}
block|}
DECL|class|CamelLanguagesFileFilter
specifier|private
class|class
name|CamelLanguagesFileFilter
implements|implements
name|FileFilter
block|{
annotation|@
name|Override
DECL|method|accept (File pathname)
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|pathname
parameter_list|)
block|{
if|if
condition|(
name|pathname
operator|.
name|isDirectory
argument_list|()
operator|&&
name|pathname
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"model"
argument_list|)
condition|)
block|{
comment|// do not check the camel-core model packages as there is no components there
return|return
literal|false
return|;
block|}
if|if
condition|(
name|pathname
operator|.
name|isFile
argument_list|()
operator|&&
name|pathname
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".json"
argument_list|)
condition|)
block|{
comment|// must be a language json file
try|try
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|pathname
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|json
operator|!=
literal|null
operator|&&
name|json
operator|.
name|contains
argument_list|(
literal|"\"kind\": \"language\""
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
name|pathname
operator|.
name|isDirectory
argument_list|()
operator|||
operator|(
name|pathname
operator|.
name|isFile
argument_list|()
operator|&&
name|pathname
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"language.properties"
argument_list|)
operator|)
return|;
block|}
block|}
DECL|method|copyFile (File from, File to)
specifier|public
specifier|static
name|void
name|copyFile
parameter_list|(
name|File
name|from
parameter_list|,
name|File
name|to
parameter_list|)
throws|throws
name|IOException
block|{
name|FileChannel
name|in
init|=
literal|null
decl_stmt|;
name|FileChannel
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|from
argument_list|)
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|to
argument_list|)
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|long
name|size
init|=
name|in
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|position
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|position
operator|<
name|size
condition|)
block|{
name|position
operator|+=
name|in
operator|.
name|transferTo
argument_list|(
name|position
argument_list|,
name|BUFFER_SIZE
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|findKarafFeatures ()
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|findKarafFeatures
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
comment|// load features.xml file
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|featuresDir
argument_list|,
literal|"features.xml"
argument_list|)
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|dbf
operator|.
name|setIgnoringComments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setIgnoringElementContentWhitespace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setNamespaceAware
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setXIncludeAware
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|children
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"features"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|ELEMENT_NODE
condition|)
block|{
name|NodeList
name|children2
init|=
name|child
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|children2
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|child2
init|=
name|children2
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"feature"
operator|.
name|equals
argument_list|(
name|child2
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
comment|// the name attribute is the maven artifact id of the component
name|String
name|artifactId
init|=
name|child2
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"name"
argument_list|)
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|artifactId
operator|!=
literal|null
operator|&&
name|artifactId
operator|.
name|startsWith
argument_list|(
literal|"camel-"
argument_list|)
condition|)
block|{
comment|// find the component name based on the artifact id
name|answer
operator|.
name|add
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error reading features.xml file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

