begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOError
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|plexus
operator|.
name|build
operator|.
name|incremental
operator|.
name|BuildContext
import|;
end_import

begin_class
DECL|class|AbstractGeneratorMojo
specifier|public
specifier|abstract
class|class
name|AbstractGeneratorMojo
extends|extends
name|AbstractMojo
block|{
DECL|field|GENERATED_MSG
specifier|public
specifier|static
specifier|final
name|String
name|GENERATED_MSG
init|=
literal|"Generated by camel build tools"
decl_stmt|;
DECL|field|NL
specifier|public
specifier|static
specifier|final
name|String
name|NL
init|=
literal|"\n"
decl_stmt|;
comment|/**      * The maven project.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"project"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|readonly
operator|=
literal|true
argument_list|)
DECL|field|project
specifier|protected
name|MavenProject
name|project
decl_stmt|;
comment|/**      * Maven ProjectHelper.      */
annotation|@
name|Component
DECL|field|projectHelper
specifier|protected
name|MavenProjectHelper
name|projectHelper
decl_stmt|;
comment|/**      * build context to check changed files and mark them for refresh (used for      * m2e compatibility)      */
annotation|@
name|Component
DECL|field|buildContext
specifier|protected
name|BuildContext
name|buildContext
decl_stmt|;
DECL|method|addResourceDirectory (Path path)
specifier|protected
name|void
name|addResourceDirectory
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|projectHelper
operator|.
name|addResource
argument_list|(
name|project
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"**/*"
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|refresh (Path file)
specifier|public
name|void
name|refresh
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|refresh
argument_list|(
name|buildContext
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|updateResource (Path out, String data)
specifier|protected
name|void
name|updateResource
parameter_list|(
name|Path
name|out
parameter_list|,
name|String
name|data
parameter_list|)
block|{
name|updateResource
argument_list|(
name|buildContext
argument_list|,
name|out
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|createProperties (String key, String val)
specifier|protected
name|String
name|createProperties
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
return|return
name|createProperties
argument_list|(
name|project
argument_list|,
name|key
argument_list|,
name|val
argument_list|)
return|;
block|}
DECL|method|createProperties (MavenProject project, String key, String val)
specifier|public
specifier|static
name|String
name|createProperties
parameter_list|(
name|MavenProject
name|project
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
name|String
name|data
decl_stmt|;
name|StringBuilder
name|properties
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"# "
operator|+
name|GENERATED_MSG
operator|+
name|NL
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|val
argument_list|)
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"groupId="
argument_list|)
operator|.
name|append
argument_list|(
name|project
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"artifactId="
argument_list|)
operator|.
name|append
argument_list|(
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"version="
argument_list|)
operator|.
name|append
argument_list|(
name|project
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
literal|"projectName="
argument_list|)
operator|.
name|append
argument_list|(
name|project
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|append
argument_list|(
literal|"projectDescription="
argument_list|)
operator|.
name|append
argument_list|(
name|project
operator|.
name|getDescription
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
block|}
name|data
operator|=
name|properties
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|data
return|;
block|}
DECL|method|refresh (BuildContext buildContext, Path file)
specifier|public
specifier|static
name|void
name|refresh
parameter_list|(
name|BuildContext
name|buildContext
parameter_list|,
name|Path
name|file
parameter_list|)
block|{
name|buildContext
operator|.
name|refresh
argument_list|(
name|file
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|updateResource (BuildContext buildContext, Path out, String data)
specifier|public
specifier|static
name|void
name|updateResource
parameter_list|(
name|BuildContext
name|buildContext
parameter_list|,
name|Path
name|out
parameter_list|,
name|String
name|data
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|Files
operator|.
name|isRegularFile
argument_list|(
name|out
argument_list|)
condition|)
block|{
name|Files
operator|.
name|delete
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|refresh
argument_list|(
name|buildContext
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|Files
operator|.
name|isRegularFile
argument_list|(
name|out
argument_list|)
operator|&&
name|Files
operator|.
name|isReadable
argument_list|(
name|out
argument_list|)
condition|)
block|{
name|String
name|content
init|=
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|out
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|content
argument_list|,
name|data
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|Files
operator|.
name|createDirectories
argument_list|(
name|out
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Writer
name|w
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|out
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|w
operator|.
name|append
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|refresh
argument_list|(
name|buildContext
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

