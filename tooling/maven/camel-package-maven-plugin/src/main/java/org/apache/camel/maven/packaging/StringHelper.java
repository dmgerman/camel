begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CaseFormat
import|;
end_import

begin_class
DECL|class|StringHelper
specifier|public
specifier|final
class|class
name|StringHelper
block|{
DECL|method|StringHelper ()
specifier|private
name|StringHelper
parameter_list|()
block|{
comment|// Utils Class
block|}
DECL|method|isEmpty (String s)
specifier|public
specifier|static
name|boolean
name|isEmpty
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|after (String text, String after)
specifier|public
specifier|static
name|String
name|after
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|after
parameter_list|)
block|{
if|if
condition|(
operator|!
name|text
operator|.
name|contains
argument_list|(
name|after
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|text
operator|.
name|substring
argument_list|(
name|text
operator|.
name|indexOf
argument_list|(
name|after
argument_list|)
operator|+
name|after
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
DECL|method|before (String text, String before)
specifier|public
specifier|static
name|String
name|before
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|before
parameter_list|)
block|{
if|if
condition|(
operator|!
name|text
operator|.
name|contains
argument_list|(
name|before
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|indexOf
argument_list|(
name|before
argument_list|)
argument_list|)
return|;
block|}
DECL|method|between (String text, String after, String before)
specifier|public
specifier|static
name|String
name|between
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|after
parameter_list|,
name|String
name|before
parameter_list|)
block|{
name|text
operator|=
name|after
argument_list|(
name|text
argument_list|,
name|after
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|before
argument_list|(
name|text
argument_list|,
name|before
argument_list|)
return|;
block|}
DECL|method|indentCollection (String indent, Collection<String> list)
specifier|public
specifier|static
name|String
name|indentCollection
parameter_list|(
name|String
name|indent
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|text
range|:
name|list
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Converts the value to use title style instead of dash cased      */
DECL|method|camelDashToTitle (String value)
specifier|public
specifier|static
name|String
name|camelDashToTitle
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|value
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|dash
init|=
literal|false
decl_stmt|;
for|for
control|(
name|char
name|c
range|:
name|value
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
literal|'-'
operator|==
name|c
condition|)
block|{
name|dash
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|dash
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toUpperCase
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// upper case first
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toUpperCase
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|dash
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|cutLastZeroDigit (String version)
specifier|public
specifier|static
name|String
name|cutLastZeroDigit
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|String
name|answer
init|=
name|version
decl_stmt|;
comment|// cut last digit so its not 2.18.0 but 2.18
name|String
index|[]
name|parts
init|=
name|version
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|3
operator|&&
name|parts
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
condition|)
block|{
name|answer
operator|=
name|parts
index|[
literal|0
index|]
operator|+
literal|"."
operator|+
name|parts
index|[
literal|1
index|]
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
comment|/**      * To wrap long camel cased texts by words.      *      * @param option  the option which is camel cased.      * @param watermark a watermark to denote the size to cut after      * @param newLine the new line to use when breaking into a new line      */
DECL|method|wrapCamelCaseWords (String option, int watermark, String newLine)
specifier|public
specifier|static
name|String
name|wrapCamelCaseWords
parameter_list|(
name|String
name|option
parameter_list|,
name|int
name|watermark
parameter_list|,
name|String
name|newLine
parameter_list|)
block|{
name|String
name|text
init|=
name|CaseFormat
operator|.
name|UPPER_CAMEL
operator|.
name|to
argument_list|(
name|CaseFormat
operator|.
name|LOWER_HYPHEN
argument_list|,
name|option
argument_list|)
decl_stmt|;
name|text
operator|=
name|text
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|text
operator|=
name|wrapWords
argument_list|(
name|text
argument_list|,
literal|"\n"
argument_list|,
name|watermark
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|text
operator|=
name|text
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'-'
argument_list|)
expr_stmt|;
name|text
operator|=
name|CaseFormat
operator|.
name|LOWER_HYPHEN
operator|.
name|to
argument_list|(
name|CaseFormat
operator|.
name|UPPER_CAMEL
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|text
operator|=
name|text
operator|.
name|replaceAll
argument_list|(
literal|"\\n"
argument_list|,
name|newLine
argument_list|)
expr_stmt|;
return|return
name|text
return|;
block|}
comment|/**      * To wrap a big line by words.      *      * @param line the big line      * @param newLine the new line to use when breaking into a new line      * @param watermark a watermark to denote the size to cut after      * @param wrapLongWords whether to wrap long words      */
DECL|method|wrapWords (String line, String newLine, int watermark, boolean wrapLongWords)
specifier|private
specifier|static
name|String
name|wrapWords
parameter_list|(
name|String
name|line
parameter_list|,
name|String
name|newLine
parameter_list|,
name|int
name|watermark
parameter_list|,
name|boolean
name|wrapLongWords
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
if|if
condition|(
name|newLine
operator|==
literal|null
condition|)
block|{
name|newLine
operator|=
name|System
operator|.
name|lineSeparator
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|watermark
operator|<
literal|1
condition|)
block|{
name|watermark
operator|=
literal|1
expr_stmt|;
block|}
name|int
name|inputLineLength
init|=
name|line
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|inputLineLength
operator|+
literal|32
argument_list|)
decl_stmt|;
while|while
condition|(
name|inputLineLength
operator|-
name|offset
operator|>
name|watermark
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|charAt
argument_list|(
name|offset
argument_list|)
operator|==
literal|32
condition|)
block|{
operator|++
name|offset
expr_stmt|;
block|}
else|else
block|{
name|int
name|spaceToWrapAt
init|=
name|line
operator|.
name|lastIndexOf
argument_list|(
literal|32
argument_list|,
name|watermark
operator|+
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|spaceToWrapAt
operator|>=
name|offset
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|offset
argument_list|,
name|spaceToWrapAt
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newLine
argument_list|)
expr_stmt|;
name|offset
operator|=
name|spaceToWrapAt
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wrapLongWords
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|offset
argument_list|,
name|watermark
operator|+
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newLine
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|watermark
expr_stmt|;
block|}
else|else
block|{
name|spaceToWrapAt
operator|=
name|line
operator|.
name|indexOf
argument_list|(
literal|32
argument_list|,
name|watermark
operator|+
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|spaceToWrapAt
operator|>=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|offset
argument_list|,
name|spaceToWrapAt
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newLine
argument_list|)
expr_stmt|;
name|offset
operator|=
name|spaceToWrapAt
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|=
name|inputLineLength
expr_stmt|;
block|}
block|}
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

