begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|StringHelper
operator|.
name|wrapCamelCaseWords
import|;
end_import

begin_class
DECL|class|SpringBootAutoConfigureOptionModel
specifier|public
class|class
name|SpringBootAutoConfigureOptionModel
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|javaType
specifier|private
name|String
name|javaType
decl_stmt|;
DECL|field|defaultValue
specifier|private
name|String
name|defaultValue
decl_stmt|;
DECL|field|description
specifier|private
name|String
name|description
decl_stmt|;
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getJavaType ()
specifier|public
name|String
name|getJavaType
parameter_list|()
block|{
return|return
name|javaType
return|;
block|}
DECL|method|setJavaType (String javaType)
specifier|public
name|void
name|setJavaType
parameter_list|(
name|String
name|javaType
parameter_list|)
block|{
name|this
operator|.
name|javaType
operator|=
name|javaType
expr_stmt|;
block|}
DECL|method|getDefaultValue ()
specifier|public
name|String
name|getDefaultValue
parameter_list|()
block|{
return|return
name|defaultValue
return|;
block|}
DECL|method|setDefaultValue (String defaultValue)
specifier|public
name|void
name|setDefaultValue
parameter_list|(
name|String
name|defaultValue
parameter_list|)
block|{
name|this
operator|.
name|defaultValue
operator|=
name|defaultValue
expr_stmt|;
block|}
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
DECL|method|setDescription (String description)
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
DECL|method|getShortJavaType ()
specifier|public
name|String
name|getShortJavaType
parameter_list|()
block|{
return|return
name|getShortJavaType
argument_list|(
literal|40
argument_list|)
return|;
block|}
DECL|method|getShortJavaType (int watermark)
specifier|public
name|String
name|getShortJavaType
parameter_list|(
name|int
name|watermark
parameter_list|)
block|{
name|String
name|text
init|=
name|StringHelper
operator|.
name|getClassShortName
argument_list|(
name|javaType
argument_list|)
decl_stmt|;
comment|// if its some kind of custom java object then lets wrap it as its long
if|if
condition|(
operator|!
name|javaType
operator|.
name|startsWith
argument_list|(
literal|"java."
argument_list|)
condition|)
block|{
name|text
operator|=
name|wrapCamelCaseWords
argument_list|(
name|text
argument_list|,
name|watermark
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|text
return|;
block|}
DECL|method|getShortDefaultValue (int watermark)
specifier|public
name|String
name|getShortDefaultValue
parameter_list|(
name|int
name|watermark
parameter_list|)
block|{
if|if
condition|(
name|defaultValue
operator|==
literal|null
operator|||
name|defaultValue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|text
init|=
name|defaultValue
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|endsWith
argument_list|(
literal|"<T>"
argument_list|)
condition|)
block|{
name|text
operator|=
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|text
operator|.
name|endsWith
argument_list|(
literal|"<T>>"
argument_list|)
condition|)
block|{
name|text
operator|=
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
block|}
comment|// TODO: dirty hack for AUTO_ACKNOWLEDGE which we should wrap
if|if
condition|(
literal|"AUTO_ACKNOWLEDGE"
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
return|return
literal|"AUTO_ ACKNOWLEDGE"
return|;
block|}
return|return
name|text
return|;
block|}
block|}
end_class

end_unit

