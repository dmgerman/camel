begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging.srcgen
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|srcgen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_class
DECL|class|JavaClass
specifier|public
class|class
name|JavaClass
block|{
DECL|field|classLoader
name|ClassLoader
name|classLoader
decl_stmt|;
DECL|field|parent
name|JavaClass
name|parent
decl_stmt|;
DECL|field|packageName
name|String
name|packageName
decl_stmt|;
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|extendsName
name|String
name|extendsName
init|=
literal|"java.lang.Object"
decl_stmt|;
DECL|field|imports
name|List
argument_list|<
name|String
argument_list|>
name|imports
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|annotations
name|List
argument_list|<
name|Annotation
argument_list|>
name|annotations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|properties
name|List
argument_list|<
name|Property
argument_list|>
name|properties
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|fields
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|methods
name|List
argument_list|<
name|Method
argument_list|>
name|methods
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|nested
name|List
argument_list|<
name|JavaClass
argument_list|>
name|nested
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|javadoc
name|Javadoc
name|javadoc
init|=
operator|new
name|Javadoc
argument_list|()
decl_stmt|;
DECL|field|isStatic
name|boolean
name|isStatic
decl_stmt|;
DECL|field|isPublic
name|boolean
name|isPublic
init|=
literal|true
decl_stmt|;
DECL|field|isPackagePrivate
name|boolean
name|isPackagePrivate
decl_stmt|;
DECL|field|isAbstract
name|boolean
name|isAbstract
decl_stmt|;
DECL|field|isClass
name|boolean
name|isClass
init|=
literal|true
decl_stmt|;
DECL|field|isEnum
name|boolean
name|isEnum
decl_stmt|;
DECL|method|JavaClass ()
specifier|public
name|JavaClass
parameter_list|()
block|{     }
DECL|method|JavaClass (ClassLoader classLoader)
specifier|public
name|JavaClass
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|)
block|{
name|this
operator|.
name|classLoader
operator|=
name|classLoader
expr_stmt|;
block|}
DECL|method|JavaClass (JavaClass parent)
specifier|protected
name|JavaClass
parameter_list|(
name|JavaClass
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
DECL|method|setStatic (boolean aStatic)
specifier|public
name|JavaClass
name|setStatic
parameter_list|(
name|boolean
name|aStatic
parameter_list|)
block|{
name|isStatic
operator|=
name|aStatic
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setPackagePrivate ()
specifier|public
name|JavaClass
name|setPackagePrivate
parameter_list|()
block|{
name|isPublic
operator|=
literal|false
expr_stmt|;
name|isPackagePrivate
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setPublic ()
specifier|public
name|JavaClass
name|setPublic
parameter_list|()
block|{
name|isPublic
operator|=
literal|true
expr_stmt|;
name|isPackagePrivate
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setPackage (String packageName)
specifier|public
name|JavaClass
name|setPackage
parameter_list|(
name|String
name|packageName
parameter_list|)
block|{
name|this
operator|.
name|packageName
operator|=
name|packageName
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|JavaClass
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getCanonicalName ()
specifier|public
name|String
name|getCanonicalName
parameter_list|()
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
return|return
name|parent
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"$"
operator|+
name|name
return|;
block|}
else|else
block|{
return|return
name|packageName
operator|+
literal|"."
operator|+
name|name
return|;
block|}
block|}
DECL|method|extendSuperType (JavaClass extend)
specifier|public
name|JavaClass
name|extendSuperType
parameter_list|(
name|JavaClass
name|extend
parameter_list|)
block|{
return|return
name|extendSuperType
argument_list|(
name|extend
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|extendSuperType (String extendsName)
specifier|public
name|JavaClass
name|extendSuperType
parameter_list|(
name|String
name|extendsName
parameter_list|)
block|{
name|this
operator|.
name|extendsName
operator|=
name|extendsName
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getSuperType ()
specifier|public
name|String
name|getSuperType
parameter_list|()
block|{
return|return
name|extendsName
return|;
block|}
DECL|method|getImports ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getImports
parameter_list|()
block|{
return|return
name|imports
return|;
block|}
DECL|method|addImport (Class<?> clazz)
specifier|public
name|void
name|addImport
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|addImport
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addImport (String importName)
specifier|public
name|void
name|addImport
parameter_list|(
name|String
name|importName
parameter_list|)
block|{
name|this
operator|.
name|imports
operator|.
name|add
argument_list|(
name|importName
argument_list|)
expr_stmt|;
block|}
DECL|method|removeImport (String importName)
specifier|public
name|void
name|removeImport
parameter_list|(
name|String
name|importName
parameter_list|)
block|{
name|this
operator|.
name|imports
operator|.
name|remove
argument_list|(
name|importName
argument_list|)
expr_stmt|;
block|}
DECL|method|removeImport (JavaClass importName)
specifier|public
name|void
name|removeImport
parameter_list|(
name|JavaClass
name|importName
parameter_list|)
block|{
name|removeImport
argument_list|(
name|importName
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addAnnotation (String type)
specifier|public
name|Annotation
name|addAnnotation
parameter_list|(
name|String
name|type
parameter_list|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
name|classLoader
operator|.
name|loadClass
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|addAnnotation
argument_list|(
name|cl
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to parse type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|addAnnotation (Class<?> type)
specifier|public
name|Annotation
name|addAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
operator|!
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Not an annotation: "
operator|+
name|type
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Annotation
name|ann
init|=
operator|new
name|Annotation
argument_list|(
operator|(
name|Class
operator|)
name|type
argument_list|)
decl_stmt|;
name|annotations
operator|.
name|add
argument_list|(
name|ann
argument_list|)
expr_stmt|;
return|return
name|ann
return|;
block|}
DECL|method|addProperty (String type, String name)
specifier|public
name|Property
name|addProperty
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|)
block|{
try|try
block|{
return|return
name|addProperty
argument_list|(
name|GenericType
operator|.
name|parse
argument_list|(
name|type
argument_list|,
name|classLoader
argument_list|)
argument_list|,
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to parse type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|addProperty (GenericType type, String name)
specifier|public
name|Property
name|addProperty
parameter_list|(
name|GenericType
name|type
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Property
name|prop
init|=
operator|new
name|Property
argument_list|(
name|type
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|properties
operator|.
name|add
argument_list|(
name|prop
argument_list|)
expr_stmt|;
return|return
name|prop
return|;
block|}
DECL|method|getJavaDoc ()
specifier|public
name|Javadoc
name|getJavaDoc
parameter_list|()
block|{
return|return
name|javadoc
return|;
block|}
DECL|method|addField ()
specifier|public
name|Field
name|addField
parameter_list|()
block|{
name|Field
name|field
init|=
operator|new
name|Field
argument_list|()
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
DECL|method|addMethod ()
specifier|public
name|Method
name|addMethod
parameter_list|()
block|{
name|Method
name|method
init|=
operator|new
name|Method
argument_list|()
decl_stmt|;
name|methods
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
return|return
name|method
return|;
block|}
DECL|method|addNestedType ()
specifier|public
name|JavaClass
name|addNestedType
parameter_list|()
block|{
name|JavaClass
name|clazz
init|=
operator|new
name|JavaClass
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|nested
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
return|return
name|clazz
return|;
block|}
DECL|method|isClass ()
specifier|public
name|boolean
name|isClass
parameter_list|()
block|{
return|return
name|isClass
return|;
block|}
DECL|method|setClass (boolean isClass)
specifier|public
name|JavaClass
name|setClass
parameter_list|(
name|boolean
name|isClass
parameter_list|)
block|{
name|this
operator|.
name|isClass
operator|=
name|isClass
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isAbstract ()
specifier|public
name|boolean
name|isAbstract
parameter_list|()
block|{
return|return
name|isAbstract
return|;
block|}
DECL|method|setAbstract (boolean isAbstract)
specifier|public
name|JavaClass
name|setAbstract
parameter_list|(
name|boolean
name|isAbstract
parameter_list|)
block|{
name|this
operator|.
name|isAbstract
operator|=
name|isAbstract
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isEnum ()
specifier|public
name|boolean
name|isEnum
parameter_list|()
block|{
return|return
name|isEnum
return|;
block|}
DECL|method|setEnum (boolean isEnum)
specifier|public
name|JavaClass
name|setEnum
parameter_list|(
name|boolean
name|isEnum
parameter_list|)
block|{
name|this
operator|.
name|isEnum
operator|=
name|isEnum
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getProperties ()
specifier|public
name|List
argument_list|<
name|Property
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"JavaClass["
operator|+
name|getCanonicalName
argument_list|()
operator|+
literal|"]"
return|;
block|}
DECL|method|printClass ()
specifier|public
name|String
name|printClass
parameter_list|()
block|{
return|return
name|printClass
argument_list|(
literal|true
argument_list|)
return|;
block|}
DECL|method|printClass (boolean innerClassesLast)
specifier|public
name|String
name|printClass
parameter_list|(
name|boolean
name|innerClassesLast
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|imports
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|JavaClass
operator|::
name|importOrder
argument_list|)
argument_list|)
decl_stmt|;
name|imports
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|imports
argument_list|)
expr_stmt|;
name|addImports
argument_list|(
name|imports
argument_list|)
expr_stmt|;
name|nested
operator|.
name|forEach
argument_list|(
name|jc
lambda|->
name|jc
operator|.
name|addImports
argument_list|(
name|imports
argument_list|)
argument_list|)
expr_stmt|;
name|imports
operator|.
name|removeIf
argument_list|(
name|f
lambda|->
name|f
operator|.
name|startsWith
argument_list|(
literal|"java.lang."
argument_list|)
operator|||
name|f
operator|.
name|startsWith
argument_list|(
name|packageName
operator|+
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
name|imports
operator|.
name|removeIf
argument_list|(
name|GenericType
operator|::
name|isPrimitive
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"package "
argument_list|)
operator|.
name|append
argument_list|(
name|packageName
argument_list|)
operator|.
name|append
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|imports
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|imp
range|:
name|imports
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"import "
argument_list|)
operator|.
name|append
argument_list|(
name|imp
argument_list|)
operator|.
name|append
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|printClass
argument_list|(
name|innerClassesLast
argument_list|,
name|sb
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|printClass (boolean innerClassesLast, StringBuilder sb, String indent)
specifier|private
name|void
name|printClass
parameter_list|(
name|boolean
name|innerClassesLast
parameter_list|,
name|StringBuilder
name|sb
parameter_list|,
name|String
name|indent
parameter_list|)
block|{
name|printJavadoc
argument_list|(
name|sb
argument_list|,
name|indent
argument_list|,
name|javadoc
argument_list|)
expr_stmt|;
name|printAnnotations
argument_list|(
name|sb
argument_list|,
name|indent
argument_list|,
name|annotations
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb2
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb2
operator|.
name|append
argument_list|(
name|indent
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPublic
condition|)
block|{
name|sb2
operator|.
name|append
argument_list|(
literal|"public "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isStatic
condition|)
block|{
name|sb2
operator|.
name|append
argument_list|(
literal|"static "
argument_list|)
expr_stmt|;
block|}
name|sb2
operator|.
name|append
argument_list|(
literal|"class "
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|extendsName
operator|!=
literal|null
operator|&&
operator|!
literal|"java.lang.Object"
operator|.
name|equals
argument_list|(
name|extendsName
argument_list|)
condition|)
block|{
name|sb2
operator|.
name|append
argument_list|(
literal|" extends "
argument_list|)
operator|.
name|append
argument_list|(
name|extendsName
argument_list|)
expr_stmt|;
block|}
name|sb2
operator|.
name|append
argument_list|(
literal|" {"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sb2
operator|.
name|length
argument_list|()
operator|<
literal|80
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|sb2
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPublic
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"public "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isStatic
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"static "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"class "
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|extendsName
operator|!=
literal|null
operator|&&
operator|!
literal|"java.lang.Object"
operator|.
name|equals
argument_list|(
name|extendsName
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"        extends\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"            "
argument_list|)
operator|.
name|append
argument_list|(
name|extendsName
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" {\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
name|printField
argument_list|(
name|sb
argument_list|,
name|indent
operator|+
literal|"    "
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Property
name|property
range|:
name|properties
control|)
block|{
if|if
condition|(
name|property
operator|.
name|field
operator|!=
literal|null
condition|)
block|{
name|printField
argument_list|(
name|sb
argument_list|,
name|indent
operator|+
literal|"    "
argument_list|,
name|property
operator|.
name|field
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|innerClassesLast
condition|)
block|{
for|for
control|(
name|JavaClass
name|nest
range|:
name|nested
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|nest
operator|.
name|printClass
argument_list|(
name|innerClassesLast
argument_list|,
name|sb
argument_list|,
name|indent
operator|+
literal|"    "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
name|printMethod
argument_list|(
name|sb
argument_list|,
name|indent
operator|+
literal|"    "
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Property
name|property
range|:
name|properties
control|)
block|{
if|if
condition|(
name|property
operator|.
name|accessor
operator|!=
literal|null
condition|)
block|{
name|printMethod
argument_list|(
name|sb
argument_list|,
name|indent
operator|+
literal|"    "
argument_list|,
name|property
operator|.
name|accessor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|property
operator|.
name|mutator
operator|!=
literal|null
condition|)
block|{
name|printMethod
argument_list|(
name|sb
argument_list|,
name|indent
operator|+
literal|"    "
argument_list|,
name|property
operator|.
name|mutator
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|innerClassesLast
condition|)
block|{
for|for
control|(
name|JavaClass
name|nest
range|:
name|nested
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|nest
operator|.
name|printClass
argument_list|(
name|innerClassesLast
argument_list|,
name|sb
argument_list|,
name|indent
operator|+
literal|"    "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
DECL|method|addImports (Set<String> imports)
specifier|private
name|void
name|addImports
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|imports
parameter_list|)
block|{
name|annotations
operator|.
name|forEach
argument_list|(
name|ann
lambda|->
name|addImports
argument_list|(
name|imports
argument_list|,
name|ann
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|forEach
argument_list|(
name|f
lambda|->
name|addImports
argument_list|(
name|imports
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|methods
operator|.
name|forEach
argument_list|(
name|m
lambda|->
name|addImports
argument_list|(
name|imports
argument_list|,
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|forEach
argument_list|(
name|p
lambda|->
name|addImports
argument_list|(
name|imports
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addImports (Set<String> imports, Annotation annotation)
specifier|private
name|void
name|addImports
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|imports
parameter_list|,
name|Annotation
name|annotation
parameter_list|)
block|{
name|addImports
argument_list|(
name|imports
argument_list|,
name|annotation
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
DECL|method|addImports (Set<String> imports, Property property)
specifier|private
name|void
name|addImports
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|imports
parameter_list|,
name|Property
name|property
parameter_list|)
block|{
name|addImports
argument_list|(
name|imports
argument_list|,
name|property
operator|.
name|field
argument_list|)
expr_stmt|;
name|addImports
argument_list|(
name|imports
argument_list|,
name|property
operator|.
name|accessor
argument_list|)
expr_stmt|;
name|addImports
argument_list|(
name|imports
argument_list|,
name|property
operator|.
name|mutator
argument_list|)
expr_stmt|;
block|}
DECL|method|addImports (Set<String> imports, Field field)
specifier|private
name|void
name|addImports
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|imports
parameter_list|,
name|Field
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|annotations
operator|.
name|forEach
argument_list|(
name|a
lambda|->
name|addImports
argument_list|(
name|imports
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|addImports
argument_list|(
name|imports
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addImports (Set<String> imports, Method method)
specifier|private
name|void
name|addImports
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|imports
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|method
operator|.
name|annotations
operator|.
name|forEach
argument_list|(
name|a
lambda|->
name|addImports
argument_list|(
name|imports
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|addImports
argument_list|(
name|imports
argument_list|,
name|method
operator|.
name|returnType
argument_list|)
expr_stmt|;
name|method
operator|.
name|parameters
operator|.
name|forEach
argument_list|(
name|p
lambda|->
name|addImports
argument_list|(
name|imports
argument_list|,
name|p
operator|.
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addImports (Set<String> imports, GenericType type)
specifier|private
name|void
name|addImports
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|imports
parameter_list|,
name|GenericType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|addImports
argument_list|(
name|imports
argument_list|,
name|type
operator|.
name|getRawClass
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|type
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|addImports
argument_list|(
name|imports
argument_list|,
name|type
operator|.
name|getActualTypeArgument
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addImports (Set<String> imports, Class clazz)
specifier|private
name|void
name|addImports
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|imports
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|addImports
argument_list|(
name|imports
argument_list|,
name|clazz
operator|.
name|getComponentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|imports
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'$'
argument_list|,
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|printMethod (StringBuilder sb, String indent, Method method)
specifier|private
name|void
name|printMethod
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|indent
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
if|if
condition|(
name|fields
operator|.
name|size
argument_list|()
operator|+
name|properties
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|.
name|javadoc
operator|.
name|text
operator|!=
literal|null
condition|)
block|{
name|printJavadoc
argument_list|(
name|sb
argument_list|,
name|indent
argument_list|,
name|method
operator|.
name|javadoc
argument_list|)
expr_stmt|;
block|}
name|printAnnotations
argument_list|(
name|sb
argument_list|,
name|indent
argument_list|,
name|method
operator|.
name|annotations
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb2
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb2
operator|.
name|append
argument_list|(
name|indent
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|isPublic
condition|)
block|{
name|sb2
operator|.
name|append
argument_list|(
literal|"public "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|method
operator|.
name|isConstructor
condition|)
block|{
name|sb2
operator|.
name|append
argument_list|(
name|method
operator|.
name|returnType
operator|!=
literal|null
condition|?
name|shortName
argument_list|(
name|method
operator|.
name|returnType
argument_list|)
else|:
literal|"void"
argument_list|)
expr_stmt|;
name|sb2
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|sb2
operator|.
name|append
argument_list|(
name|method
operator|.
name|name
argument_list|)
expr_stmt|;
name|sb2
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|sb2
operator|.
name|append
argument_list|(
name|method
operator|.
name|parameters
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|p
lambda|->
name|shortName
argument_list|(
name|p
operator|.
name|type
argument_list|)
operator|+
literal|" "
operator|+
name|p
operator|.
name|name
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb2
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|method
operator|.
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb2
operator|.
name|append
argument_list|(
literal|"throws "
argument_list|)
expr_stmt|;
name|sb2
operator|.
name|append
argument_list|(
name|method
operator|.
name|exceptions
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|shortName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|,
literal|""
argument_list|,
literal|" "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb2
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sb2
operator|.
name|length
argument_list|()
operator|<
literal|84
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|sb2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|isPublic
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"public "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|shortName
argument_list|(
name|method
operator|.
name|returnType
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|method
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|parameters
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"(\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|method
operator|.
name|parameters
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|p
lambda|->
name|indent
operator|+
literal|"        "
operator|+
name|shortName
argument_list|(
name|p
operator|.
name|type
argument_list|)
operator|+
literal|" "
operator|+
name|p
operator|.
name|name
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|",\n"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|method
operator|.
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n            throws"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|method
operator|.
name|exceptions
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|shortName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|,
literal|" "
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" {"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|l
range|:
name|method
operator|.
name|body
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|printField (StringBuilder sb, String indent, Field field)
specifier|private
name|void
name|printField
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|indent
parameter_list|,
name|Field
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|javadoc
operator|.
name|text
operator|!=
literal|null
condition|)
block|{
name|printJavadoc
argument_list|(
name|sb
argument_list|,
name|indent
argument_list|,
name|field
operator|.
name|javadoc
argument_list|)
expr_stmt|;
block|}
name|printAnnotations
argument_list|(
name|sb
argument_list|,
name|indent
argument_list|,
name|field
operator|.
name|annotations
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|isPublic
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"public "
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|isPrivate
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"private "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|isStatic
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"static "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|isFinal
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"final "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|shortName
argument_list|(
name|field
operator|.
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|field
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|literalInit
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|field
operator|.
name|literalInit
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|printJavadoc (StringBuilder sb, String indent, Javadoc doc)
specifier|private
name|void
name|printJavadoc
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|indent
parameter_list|,
name|Javadoc
name|doc
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|len
init|=
literal|78
operator|-
name|indent
operator|.
name|length
argument_list|()
decl_stmt|;
name|String
name|rem
init|=
name|doc
operator|.
name|text
decl_stmt|;
if|if
condition|(
name|rem
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|rem
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|idx
init|=
name|rem
operator|.
name|length
argument_list|()
operator|>=
name|len
condition|?
name|rem
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
argument_list|)
operator|.
name|lastIndexOf
argument_list|(
literal|' '
argument_list|)
else|:
operator|-
literal|1
decl_stmt|;
name|int
name|idx2
init|=
name|rem
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx2
operator|>=
literal|0
operator|&&
operator|(
name|idx
operator|<
literal|0
operator|||
name|idx2
operator|<
name|idx
operator|||
name|idx2
operator|<
name|len
operator|)
condition|)
block|{
name|idx
operator|=
name|idx2
expr_stmt|;
block|}
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|String
name|s
init|=
name|rem
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|endsWith
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|l
init|=
name|rem
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
name|l
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
name|l
operator|=
name|l
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|lines
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|rem
operator|=
name|l
expr_stmt|;
block|}
else|else
block|{
name|lines
operator|.
name|add
argument_list|(
name|rem
argument_list|)
expr_stmt|;
name|rem
operator|=
literal|""
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"/**\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|" * "
argument_list|)
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|" */\n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printAnnotations (StringBuilder sb, String indent, List<Annotation> anns)
specifier|private
name|void
name|printAnnotations
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|indent
parameter_list|,
name|List
argument_list|<
name|Annotation
argument_list|>
name|anns
parameter_list|)
block|{
if|if
condition|(
name|anns
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Annotation
name|ann
range|:
name|anns
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|shortName
argument_list|(
name|ann
operator|.
name|type
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ann
operator|.
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|ann
operator|.
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"value"
argument_list|)
operator|&&
name|ann
operator|.
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|shortName (GenericType name)
specifier|private
name|String
name|shortName
parameter_list|(
name|GenericType
name|name
parameter_list|)
block|{
return|return
name|shortName
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|shortName (String name)
specifier|private
name|String
name|shortName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|s
init|=
name|name
operator|.
name|replace
argument_list|(
literal|'$'
argument_list|,
literal|'.'
argument_list|)
decl_stmt|;
comment|//        int idx = s.lastIndexOf('.');
comment|//        return idx> 0 ? s.substring(idx + 1) : s;
name|s
operator|=
name|s
operator|.
name|replaceAll
argument_list|(
literal|"([a-z][a-z0-9]+\\.([a-z][a-z0-9_]+\\.)*([A-Z][a-zA-Z0-9_]+\\.)?)([A-za-z]+)"
argument_list|,
literal|"$4"
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
name|this
operator|.
name|name
operator|+
literal|"."
argument_list|)
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
name|this
operator|.
name|name
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
DECL|method|importOrder (String s1)
specifier|private
specifier|static
name|String
name|importOrder
parameter_list|(
name|String
name|s1
parameter_list|)
block|{
comment|// java comes first
if|if
condition|(
name|s1
operator|.
name|startsWith
argument_list|(
literal|"java."
argument_list|)
condition|)
block|{
name|s1
operator|=
literal|"___"
operator|+
name|s1
expr_stmt|;
block|}
comment|// then javax comes next
if|if
condition|(
name|s1
operator|.
name|startsWith
argument_list|(
literal|"javax."
argument_list|)
condition|)
block|{
name|s1
operator|=
literal|"__"
operator|+
name|s1
expr_stmt|;
block|}
comment|// org.w3c is for some odd reason also before others
if|if
condition|(
name|s1
operator|.
name|startsWith
argument_list|(
literal|"org.w3c."
argument_list|)
condition|)
block|{
name|s1
operator|=
literal|"_"
operator|+
name|s1
expr_stmt|;
block|}
return|return
name|s1
return|;
block|}
block|}
end_class

end_unit

