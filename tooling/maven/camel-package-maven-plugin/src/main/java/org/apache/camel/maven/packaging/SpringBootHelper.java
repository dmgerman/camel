begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Useful methods for spring-boot mojos.  */
end_comment

begin_class
DECL|class|SpringBootHelper
specifier|public
specifier|final
class|class
name|SpringBootHelper
block|{
DECL|field|STARTER_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|STARTER_SUFFIX
init|=
literal|"-starter"
decl_stmt|;
DECL|method|SpringBootHelper ()
specifier|private
name|SpringBootHelper
parameter_list|()
block|{     }
DECL|method|starterSrcDir (File baseDir, String artifactId)
specifier|public
specifier|static
name|File
name|starterSrcDir
parameter_list|(
name|File
name|baseDir
parameter_list|,
name|String
name|artifactId
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|starterDir
argument_list|(
name|baseDir
argument_list|,
name|artifactId
argument_list|)
argument_list|,
literal|"src/main/java"
argument_list|)
return|;
block|}
DECL|method|starterResourceDir (File baseDir, String artifactId)
specifier|public
specifier|static
name|File
name|starterResourceDir
parameter_list|(
name|File
name|baseDir
parameter_list|,
name|String
name|artifactId
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|starterDir
argument_list|(
name|baseDir
argument_list|,
name|artifactId
argument_list|)
argument_list|,
literal|"src/main/resources"
argument_list|)
return|;
block|}
DECL|method|starterDir (File baseDir, String artifactId)
specifier|public
specifier|static
name|File
name|starterDir
parameter_list|(
name|File
name|baseDir
parameter_list|,
name|String
name|artifactId
parameter_list|)
block|{
name|String
name|starterName
init|=
name|artifactId
operator|+
name|STARTER_SUFFIX
decl_stmt|;
name|File
name|allStartersDir
init|=
name|allStartersDir
argument_list|(
name|baseDir
argument_list|)
decl_stmt|;
name|File
name|starterDir
init|=
operator|new
name|File
argument_list|(
name|allStartersDir
argument_list|,
name|starterName
argument_list|)
decl_stmt|;
return|return
name|starterDir
return|;
block|}
DECL|method|allStartersDir (File baseDir)
specifier|public
specifier|static
name|File
name|allStartersDir
parameter_list|(
name|File
name|baseDir
parameter_list|)
block|{
name|File
name|allStartersDir
init|=
operator|new
name|File
argument_list|(
name|camelProjectRoot
argument_list|(
name|baseDir
argument_list|,
literal|"components-starter"
argument_list|)
argument_list|,
literal|"components-starter"
argument_list|)
decl_stmt|;
return|return
name|allStartersDir
return|;
block|}
DECL|method|camelProjectRoot (File baseDir, String expectedDirName)
specifier|public
specifier|static
name|File
name|camelProjectRoot
parameter_list|(
name|File
name|baseDir
parameter_list|,
name|String
name|expectedDirName
parameter_list|)
block|{
comment|// another solution could be to look for pom.xml file and see if that pom.xml is the camel root pom
comment|// however looking for a dir named components-starter should be fine also (there is only 1 with such name)
try|try
block|{
name|File
name|root
init|=
name|baseDir
operator|.
name|getCanonicalFile
argument_list|()
decl_stmt|;
while|while
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|File
index|[]
name|names
init|=
name|root
operator|.
name|listFiles
argument_list|(
name|pathname
lambda|->
name|pathname
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|expectedDirName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|!=
literal|null
operator|&&
name|names
operator|.
name|length
operator|==
literal|1
condition|)
block|{
break|break;
block|}
name|root
operator|=
name|root
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot find Apache Camel project root directory"
argument_list|)
throw|;
block|}
return|return
name|root
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error while getting directory"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

