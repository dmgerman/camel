begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|ComponentModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|DataFormatModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|LanguageModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
operator|.
name|OtherModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProjectHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|PackageHelper
operator|.
name|loadText
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|PackageHelper
operator|.
name|writeText
import|;
end_import

begin_comment
comment|/**  * Prepares the user guide to keep the table of content up to date with the components, data formats, and languages.  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"prepare-user-guide"
argument_list|,
name|threadSafe
operator|=
literal|true
argument_list|)
DECL|class|PrepareUserGuideMojo
specifier|public
class|class
name|PrepareUserGuideMojo
extends|extends
name|AbstractMojo
block|{
comment|/**      * The maven project.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"project"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|readonly
operator|=
literal|true
argument_list|)
DECL|field|project
specifier|protected
name|MavenProject
name|project
decl_stmt|;
comment|/**      * The directory for components catalog      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/classes/org/apache/camel/catalog/components"
argument_list|)
DECL|field|componentsDir
specifier|protected
name|File
name|componentsDir
decl_stmt|;
comment|/**      * The directory for data formats catalog      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/classes/org/apache/camel/catalog/dataformats"
argument_list|)
DECL|field|dataFormatsDir
specifier|protected
name|File
name|dataFormatsDir
decl_stmt|;
comment|/**      * The directory for languages catalog      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/classes/org/apache/camel/catalog/languages"
argument_list|)
DECL|field|languagesDir
specifier|protected
name|File
name|languagesDir
decl_stmt|;
comment|/**      * The directory for others catalog      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/classes/org/apache/camel/catalog/others"
argument_list|)
DECL|field|othersDir
specifier|protected
name|File
name|othersDir
decl_stmt|;
comment|/**      * The directory for the user guide      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.directory}/../../../docs/user-manual/en"
argument_list|)
DECL|field|userGuideDir
specifier|protected
name|File
name|userGuideDir
decl_stmt|;
comment|/**      * Maven ProjectHelper.      */
annotation|@
name|Component
DECL|field|projectHelper
specifier|private
name|MavenProjectHelper
name|projectHelper
decl_stmt|;
comment|/**      * Execute goal.      *      * @throws MojoExecutionException execution of the main class or one of the      *                                                        threads it generated failed.      * @throws MojoFailureException   something bad happened...      */
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|executeComponents
argument_list|()
expr_stmt|;
name|executeOthers
argument_list|()
expr_stmt|;
name|executeDataFormats
argument_list|()
expr_stmt|;
name|executeLanguages
argument_list|()
expr_stmt|;
block|}
DECL|method|executeComponents ()
specifier|protected
name|void
name|executeComponents
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|Set
argument_list|<
name|File
argument_list|>
name|componentFiles
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|componentsDir
operator|!=
literal|null
operator|&&
name|componentsDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|componentsDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|componentFiles
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|List
argument_list|<
name|ComponentModel
argument_list|>
name|models
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|componentFiles
control|)
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|ComponentModel
name|model
init|=
name|generateComponentModel
argument_list|(
name|json
argument_list|)
decl_stmt|;
comment|// filter out alternative schemas which reuses documentation
name|boolean
name|add
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|model
operator|.
name|getAlternativeSchemes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|first
init|=
name|model
operator|.
name|getAlternativeSchemes
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|model
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|first
argument_list|)
condition|)
block|{
name|add
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|add
condition|)
block|{
name|models
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
comment|// sor the models
name|Collections
operator|.
name|sort
argument_list|(
name|models
argument_list|,
operator|new
name|ComponentComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// the summary file has the TOC
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|userGuideDir
argument_list|,
literal|"SUMMARY.md"
argument_list|)
decl_stmt|;
comment|// update core components
name|StringBuilder
name|core
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|core
operator|.
name|append
argument_list|(
literal|"* Core Components\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|ComponentModel
name|model
range|:
name|models
control|)
block|{
if|if
condition|(
name|model
operator|.
name|getLabel
argument_list|()
operator|.
name|contains
argument_list|(
literal|"core"
argument_list|)
condition|)
block|{
name|String
name|line
init|=
literal|"\t* "
operator|+
name|link
argument_list|(
name|model
argument_list|)
operator|+
literal|"\n"
decl_stmt|;
name|core
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|updated
init|=
name|updateCoreComponents
argument_list|(
name|file
argument_list|,
name|core
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// update regular components
name|StringBuilder
name|regular
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|regular
operator|.
name|append
argument_list|(
literal|"* Components\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|ComponentModel
name|model
range|:
name|models
control|)
block|{
if|if
condition|(
operator|!
name|model
operator|.
name|getLabel
argument_list|()
operator|.
name|contains
argument_list|(
literal|"core"
argument_list|)
condition|)
block|{
name|String
name|line
init|=
literal|"\t* "
operator|+
name|link
argument_list|(
name|model
argument_list|)
operator|+
literal|"\n"
decl_stmt|;
name|regular
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
name|updated
operator||=
name|updateComponents
argument_list|(
name|file
argument_list|,
name|regular
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|updated
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated user guide file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to user guide file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Error due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|executeOthers ()
specifier|protected
name|void
name|executeOthers
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|Set
argument_list|<
name|File
argument_list|>
name|otherFiles
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|othersDir
operator|!=
literal|null
operator|&&
name|othersDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|othersDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|otherFiles
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|List
argument_list|<
name|OtherModel
argument_list|>
name|models
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|otherFiles
control|)
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|OtherModel
name|model
init|=
name|generateOtherModel
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|models
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
comment|// sor the models
name|Collections
operator|.
name|sort
argument_list|(
name|models
argument_list|,
operator|new
name|OtherComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// the summary file has the TOC
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|userGuideDir
argument_list|,
literal|"SUMMARY.md"
argument_list|)
decl_stmt|;
comment|// update core components
name|StringBuilder
name|other
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|other
operator|.
name|append
argument_list|(
literal|"* Miscellaneous Components\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|OtherModel
name|model
range|:
name|models
control|)
block|{
name|String
name|line
init|=
literal|"\t* "
operator|+
name|link
argument_list|(
name|model
argument_list|)
operator|+
literal|"\n"
decl_stmt|;
name|other
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|boolean
name|updated
init|=
name|updateOthers
argument_list|(
name|file
argument_list|,
name|other
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|updated
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated user guide file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to user guide file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Error due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|executeDataFormats ()
specifier|protected
name|void
name|executeDataFormats
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|Set
argument_list|<
name|File
argument_list|>
name|dataFormatFiles
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataFormatsDir
operator|!=
literal|null
operator|&&
name|dataFormatsDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|dataFormatsDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|dataFormatFiles
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|List
argument_list|<
name|DataFormatModel
argument_list|>
name|models
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|dataFormatFiles
control|)
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|DataFormatModel
name|model
init|=
name|generateDataFormatModel
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|models
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
comment|// sor the models
name|Collections
operator|.
name|sort
argument_list|(
name|models
argument_list|,
operator|new
name|DataFormatComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// the summary file has the TOC
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|userGuideDir
argument_list|,
literal|"SUMMARY.md"
argument_list|)
decl_stmt|;
comment|// update data formats
name|StringBuilder
name|dataFormats
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|dataFormats
operator|.
name|append
argument_list|(
literal|"* Data Formats\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|DataFormatModel
name|model
range|:
name|models
control|)
block|{
name|String
name|line
init|=
literal|"\t* "
operator|+
name|link
argument_list|(
name|model
argument_list|)
operator|+
literal|"\n"
decl_stmt|;
name|dataFormats
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|boolean
name|updated
init|=
name|updateDataFormats
argument_list|(
name|file
argument_list|,
name|dataFormats
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|updated
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated user guide file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to user guide file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Error due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|executeLanguages ()
specifier|protected
name|void
name|executeLanguages
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|Set
argument_list|<
name|File
argument_list|>
name|languageFiles
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|languagesDir
operator|!=
literal|null
operator|&&
name|languagesDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|languagesDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|languageFiles
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|List
argument_list|<
name|LanguageModel
argument_list|>
name|models
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|languageFiles
control|)
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|LanguageModel
name|model
init|=
name|generateLanguageModel
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|models
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
comment|// sor the models
name|Collections
operator|.
name|sort
argument_list|(
name|models
argument_list|,
operator|new
name|LanguageComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// the summary file has the TOC
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|userGuideDir
argument_list|,
literal|"SUMMARY.md"
argument_list|)
decl_stmt|;
comment|// update languages
name|StringBuilder
name|languages
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|languages
operator|.
name|append
argument_list|(
literal|"* Expression Languages\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|LanguageModel
name|model
range|:
name|models
control|)
block|{
name|String
name|line
init|=
literal|"\t* "
operator|+
name|link
argument_list|(
name|model
argument_list|)
operator|+
literal|"\n"
decl_stmt|;
name|languages
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|boolean
name|updated
init|=
name|updateLanguages
argument_list|(
name|file
argument_list|,
name|languages
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|updated
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated user guide file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to user guide file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Error due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|updateCoreComponents (File file, String changed)
specifier|private
name|boolean
name|updateCoreComponents
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|changed
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|String
name|text
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|existing
init|=
name|StringHelper
operator|.
name|between
argument_list|(
name|text
argument_list|,
literal|"<!-- core components: START -->"
argument_list|,
literal|"<!-- core components: END -->"
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
comment|// remove leading line breaks etc
name|existing
operator|=
name|existing
operator|.
name|trim
argument_list|()
expr_stmt|;
name|changed
operator|=
name|changed
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|existing
operator|.
name|equals
argument_list|(
name|changed
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|String
name|before
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|text
argument_list|,
literal|"<!-- core components: START -->"
argument_list|)
decl_stmt|;
name|String
name|after
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|text
argument_list|,
literal|"<!-- core components: END -->"
argument_list|)
decl_stmt|;
name|text
operator|=
name|before
operator|+
literal|"<!-- core components: START -->\n"
operator|+
name|changed
operator|+
literal|"\n<!-- core components: END -->"
operator|+
name|after
expr_stmt|;
name|writeText
argument_list|(
name|file
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Cannot find markers in file "
operator|+
name|file
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Add the following markers"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t<!-- core components: START -->"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t<!-- core components: END -->"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error reading file "
operator|+
name|file
operator|+
literal|" Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|updateComponents (File file, String changed)
specifier|private
name|boolean
name|updateComponents
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|changed
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|String
name|text
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|existing
init|=
name|StringHelper
operator|.
name|between
argument_list|(
name|text
argument_list|,
literal|"<!-- components: START -->"
argument_list|,
literal|"<!-- components: END -->"
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
comment|// remove leading line breaks etc
name|existing
operator|=
name|existing
operator|.
name|trim
argument_list|()
expr_stmt|;
name|changed
operator|=
name|changed
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|existing
operator|.
name|equals
argument_list|(
name|changed
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|String
name|before
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|text
argument_list|,
literal|"<!-- components: START -->"
argument_list|)
decl_stmt|;
name|String
name|after
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|text
argument_list|,
literal|"<!-- components: END -->"
argument_list|)
decl_stmt|;
name|text
operator|=
name|before
operator|+
literal|"<!-- components: START -->\n"
operator|+
name|changed
operator|+
literal|"\n<!-- components: END -->"
operator|+
name|after
expr_stmt|;
name|writeText
argument_list|(
name|file
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Cannot find markers in file "
operator|+
name|file
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Add the following markers"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t<!-- components: START -->"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t<!-- components: END -->"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error reading file "
operator|+
name|file
operator|+
literal|" Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|updateOthers (File file, String changed)
specifier|private
name|boolean
name|updateOthers
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|changed
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|String
name|text
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|existing
init|=
name|StringHelper
operator|.
name|between
argument_list|(
name|text
argument_list|,
literal|"<!-- others: START -->"
argument_list|,
literal|"<!-- others: END -->"
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
comment|// remove leading line breaks etc
name|existing
operator|=
name|existing
operator|.
name|trim
argument_list|()
expr_stmt|;
name|changed
operator|=
name|changed
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|existing
operator|.
name|equals
argument_list|(
name|changed
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|String
name|before
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|text
argument_list|,
literal|"<!-- others: START -->"
argument_list|)
decl_stmt|;
name|String
name|after
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|text
argument_list|,
literal|"<!-- others: END -->"
argument_list|)
decl_stmt|;
name|text
operator|=
name|before
operator|+
literal|"<!-- others: START -->\n"
operator|+
name|changed
operator|+
literal|"\n<!-- others: END -->"
operator|+
name|after
expr_stmt|;
name|writeText
argument_list|(
name|file
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Cannot find markers in file "
operator|+
name|file
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Add the following markers"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t<!-- others: START -->"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t<!-- others: END -->"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error reading file "
operator|+
name|file
operator|+
literal|" Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|updateDataFormats (File file, String changed)
specifier|private
name|boolean
name|updateDataFormats
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|changed
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|String
name|text
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|existing
init|=
name|StringHelper
operator|.
name|between
argument_list|(
name|text
argument_list|,
literal|"<!-- dataformats: START -->"
argument_list|,
literal|"<!-- dataformats: END -->"
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
comment|// remove leading line breaks etc
name|existing
operator|=
name|existing
operator|.
name|trim
argument_list|()
expr_stmt|;
name|changed
operator|=
name|changed
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|existing
operator|.
name|equals
argument_list|(
name|changed
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|String
name|before
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|text
argument_list|,
literal|"<!-- dataformats: START -->"
argument_list|)
decl_stmt|;
name|String
name|after
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|text
argument_list|,
literal|"<!-- dataformats: END -->"
argument_list|)
decl_stmt|;
name|text
operator|=
name|before
operator|+
literal|"<!-- dataformats: START -->\n"
operator|+
name|changed
operator|+
literal|"\n<!-- dataformats: END -->"
operator|+
name|after
expr_stmt|;
name|writeText
argument_list|(
name|file
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Cannot find markers in file "
operator|+
name|file
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Add the following markers"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t<!-- dataformats: START -->"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t<!-- dataformats: END -->"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error reading file "
operator|+
name|file
operator|+
literal|" Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|updateLanguages (File file, String changed)
specifier|private
name|boolean
name|updateLanguages
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|changed
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|String
name|text
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|existing
init|=
name|StringHelper
operator|.
name|between
argument_list|(
name|text
argument_list|,
literal|"<!-- languages: START -->"
argument_list|,
literal|"<!-- languages: END -->"
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
comment|// remove leading line breaks etc
name|existing
operator|=
name|existing
operator|.
name|trim
argument_list|()
expr_stmt|;
name|changed
operator|=
name|changed
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|existing
operator|.
name|equals
argument_list|(
name|changed
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|String
name|before
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|text
argument_list|,
literal|"<!-- languages: START -->"
argument_list|)
decl_stmt|;
name|String
name|after
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|text
argument_list|,
literal|"<!-- languages: END -->"
argument_list|)
decl_stmt|;
name|text
operator|=
name|before
operator|+
literal|"<!-- languages: START -->\n"
operator|+
name|changed
operator|+
literal|"\n<!-- languages: END -->"
operator|+
name|after
expr_stmt|;
name|writeText
argument_list|(
name|file
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Cannot find markers in file "
operator|+
name|file
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Add the following markers"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t<!-- languages: START -->"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"\t<!-- languages: END -->"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error reading file "
operator|+
name|file
operator|+
literal|" Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|link (ComponentModel model)
specifier|private
specifier|static
name|String
name|link
parameter_list|(
name|ComponentModel
name|model
parameter_list|)
block|{
return|return
literal|"["
operator|+
name|model
operator|.
name|getTitle
argument_list|()
operator|+
literal|"]("
operator|+
name|model
operator|.
name|getScheme
argument_list|()
operator|+
literal|"-component.adoc)"
return|;
block|}
DECL|method|link (OtherModel model)
specifier|private
specifier|static
name|String
name|link
parameter_list|(
name|OtherModel
name|model
parameter_list|)
block|{
return|return
literal|"["
operator|+
name|model
operator|.
name|getTitle
argument_list|()
operator|+
literal|"]("
operator|+
name|model
operator|.
name|getName
argument_list|()
operator|+
literal|".adoc)"
return|;
block|}
DECL|method|link (DataFormatModel model)
specifier|private
specifier|static
name|String
name|link
parameter_list|(
name|DataFormatModel
name|model
parameter_list|)
block|{
comment|// special for some data formats
name|String
name|name
init|=
name|asDataFormatName
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
literal|"["
operator|+
name|model
operator|.
name|getTitle
argument_list|()
operator|+
literal|"]("
operator|+
name|name
operator|+
literal|"-dataformat.adoc)"
return|;
block|}
DECL|method|link (LanguageModel model)
specifier|private
specifier|static
name|String
name|link
parameter_list|(
name|LanguageModel
name|model
parameter_list|)
block|{
return|return
literal|"["
operator|+
name|model
operator|.
name|getTitle
argument_list|()
operator|+
literal|"]("
operator|+
name|model
operator|.
name|getName
argument_list|()
operator|+
literal|"-language.adoc)"
return|;
block|}
DECL|method|asDataFormatName (String name)
specifier|private
specifier|static
name|String
name|asDataFormatName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// special for some dataformats which share the same readme file
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"bindy"
argument_list|)
condition|)
block|{
return|return
literal|"bindy"
return|;
block|}
else|else
block|{
return|return
name|name
return|;
block|}
block|}
DECL|class|ComponentComparator
specifier|private
specifier|static
class|class
name|ComponentComparator
implements|implements
name|Comparator
argument_list|<
name|ComponentModel
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (ComponentModel o1, ComponentModel o2)
specifier|public
name|int
name|compare
parameter_list|(
name|ComponentModel
name|o1
parameter_list|,
name|ComponentModel
name|o2
parameter_list|)
block|{
comment|// lets sort by title
return|return
name|o1
operator|.
name|getTitle
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|o2
operator|.
name|getTitle
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|OtherComparator
specifier|private
specifier|static
class|class
name|OtherComparator
implements|implements
name|Comparator
argument_list|<
name|OtherModel
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (OtherModel o1, OtherModel o2)
specifier|public
name|int
name|compare
parameter_list|(
name|OtherModel
name|o1
parameter_list|,
name|OtherModel
name|o2
parameter_list|)
block|{
comment|// lets sort by title
return|return
name|o1
operator|.
name|getTitle
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|o2
operator|.
name|getTitle
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|DataFormatComparator
specifier|private
specifier|static
class|class
name|DataFormatComparator
implements|implements
name|Comparator
argument_list|<
name|DataFormatModel
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (DataFormatModel o1, DataFormatModel o2)
specifier|public
name|int
name|compare
parameter_list|(
name|DataFormatModel
name|o1
parameter_list|,
name|DataFormatModel
name|o2
parameter_list|)
block|{
comment|// lets sort by title
return|return
name|o1
operator|.
name|getTitle
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|o2
operator|.
name|getTitle
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|LanguageComparator
specifier|private
specifier|static
class|class
name|LanguageComparator
implements|implements
name|Comparator
argument_list|<
name|LanguageModel
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (LanguageModel o1, LanguageModel o2)
specifier|public
name|int
name|compare
parameter_list|(
name|LanguageModel
name|o1
parameter_list|,
name|LanguageModel
name|o2
parameter_list|)
block|{
comment|// lets sort by title
return|return
name|o1
operator|.
name|getTitle
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|o2
operator|.
name|getTitle
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|generateComponentModel (String json)
specifier|private
name|ComponentModel
name|generateComponentModel
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"component"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ComponentModel
name|component
init|=
operator|new
name|ComponentModel
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|component
operator|.
name|setScheme
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"scheme"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setSyntax
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"syntax"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setAlternativeSyntax
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"alternativeSyntax"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setAlternativeSchemes
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"alternativeSchemes"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setTitle
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDescription
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setFirstVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"firstVersion"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setLabel
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDeprecated
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDeprecationNote
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setConsumerOnly
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"consumerOnly"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setProducerOnly
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"producerOnly"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setJavaType
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setGroupId
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setArtifactId
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|component
return|;
block|}
DECL|method|generateOtherModel (String json)
specifier|private
name|OtherModel
name|generateOtherModel
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"other"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|OtherModel
name|other
init|=
operator|new
name|OtherModel
argument_list|()
decl_stmt|;
name|other
operator|.
name|setName
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setTitle
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setDescription
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setFirstVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"firstVersion"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setLabel
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setDeprecated
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setDeprecationNote
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setGroupId
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setArtifactId
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|other
return|;
block|}
DECL|method|generateDataFormatModel (String json)
specifier|private
name|DataFormatModel
name|generateDataFormatModel
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"dataformat"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|DataFormatModel
name|dataFormat
init|=
operator|new
name|DataFormatModel
argument_list|()
decl_stmt|;
name|dataFormat
operator|.
name|setName
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setTitle
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setModelName
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"modelName"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setDescription
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setFirstVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"firstVersion"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setLabel
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setDeprecated
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setDeprecationNote
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setJavaType
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setGroupId
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setArtifactId
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|dataFormat
return|;
block|}
DECL|method|generateLanguageModel (String json)
specifier|private
name|LanguageModel
name|generateLanguageModel
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"language"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|LanguageModel
name|language
init|=
operator|new
name|LanguageModel
argument_list|()
decl_stmt|;
name|language
operator|.
name|setTitle
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setName
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setModelName
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"modelName"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setDescription
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setFirstVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"firstVersion"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setLabel
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setDeprecated
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setDeprecationNote
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"deprecationNote"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setJavaType
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setGroupId
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setArtifactId
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|language
operator|.
name|setVersion
argument_list|(
name|JSonSchemaHelper
operator|.
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|language
return|;
block|}
block|}
end_class

end_unit

