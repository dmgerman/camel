begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|ParameterizedTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|provider
operator|.
name|Arguments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|provider
operator|.
name|MethodSource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|provider
operator|.
name|Arguments
operator|.
name|arguments
import|;
end_import

begin_class
DECL|class|StringHelperTest
specifier|public
class|class
name|StringHelperTest
block|{
DECL|method|getClassShortNameTypeVarations ()
specifier|static
name|Stream
argument_list|<
name|Arguments
argument_list|>
name|getClassShortNameTypeVarations
parameter_list|()
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|arguments
argument_list|(
literal|"String"
argument_list|,
literal|"String"
argument_list|)
argument_list|,
name|arguments
argument_list|(
literal|"String"
argument_list|,
literal|"java.lang.String"
argument_list|)
argument_list|,
name|arguments
argument_list|(
literal|"List"
argument_list|,
literal|"List<String>"
argument_list|)
argument_list|,
name|arguments
argument_list|(
literal|"List"
argument_list|,
literal|"java.util.List<String>"
argument_list|)
argument_list|,
name|arguments
argument_list|(
literal|"List"
argument_list|,
literal|"List<java.lang.String>"
argument_list|)
argument_list|,
name|arguments
argument_list|(
literal|"List"
argument_list|,
literal|"java.util.List.List<org.apache.camel.Exchange>"
argument_list|)
argument_list|,
name|arguments
argument_list|(
literal|"List"
argument_list|,
literal|"java.util.List<Map<String,Integer>>"
argument_list|)
argument_list|,
name|arguments
argument_list|(
literal|"List"
argument_list|,
literal|"java.util.List<Map<java.lang.String,Integer>>"
argument_list|)
argument_list|,
name|arguments
argument_list|(
literal|"List"
argument_list|,
literal|"java.util.List<Map<String,java.lang.Integer>>"
argument_list|)
argument_list|,
name|arguments
argument_list|(
literal|"List"
argument_list|,
literal|"java.util.List<Map<java.lang.String,java.lang.Integer>>"
argument_list|)
argument_list|,
name|arguments
argument_list|(
literal|"List"
argument_list|,
literal|"java.util.List<java.util.Map<java.lang.String,java.lang.Integer>>"
argument_list|)
argument_list|)
return|;
block|}
empty_stmt|;
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"getClassShortNameTypeVarations"
argument_list|)
DECL|method|getClassShortName (String expectedBaseClassName, String className)
specifier|public
name|void
name|getClassShortName
parameter_list|(
name|String
name|expectedBaseClassName
parameter_list|,
name|String
name|className
parameter_list|)
block|{
name|Assertions
operator|.
name|assertEquals
argument_list|(
name|expectedBaseClassName
argument_list|,
name|StringHelper
operator|.
name|getClassShortName
argument_list|(
name|className
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

