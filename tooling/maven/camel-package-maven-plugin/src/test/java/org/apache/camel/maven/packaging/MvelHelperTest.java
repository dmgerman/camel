begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.packaging
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|packaging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|ParameterizedTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|provider
operator|.
name|Arguments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|provider
operator|.
name|MethodSource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|provider
operator|.
name|Arguments
operator|.
name|arguments
import|;
end_import

begin_class
DECL|class|MvelHelperTest
specifier|public
class|class
name|MvelHelperTest
block|{
annotation|@
name|Test
DECL|method|shouldBeRobustAtEscaping ()
specifier|public
name|void
name|shouldBeRobustAtEscaping
parameter_list|()
block|{
name|assertThat
argument_list|(
name|MvelHelper
operator|.
name|escape
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|MvelHelper
operator|.
name|escape
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|MvelHelper
operator|.
name|escape
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"dollarEscapeCases"
argument_list|)
DECL|method|shouldEscapeDollarSigns (final String given, final String expected)
specifier|public
name|void
name|shouldEscapeDollarSigns
parameter_list|(
specifier|final
name|String
name|given
parameter_list|,
specifier|final
name|String
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|MvelHelper
operator|.
name|escape
argument_list|(
name|given
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"urlEscapeCases"
argument_list|)
DECL|method|shouldUrls (final String given, final String expected)
specifier|public
name|void
name|shouldUrls
parameter_list|(
specifier|final
name|String
name|given
parameter_list|,
specifier|final
name|String
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|MvelHelper
operator|.
name|escape
argument_list|(
name|given
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|dollarEscapeCases ()
specifier|static
name|Stream
argument_list|<
name|Arguments
argument_list|>
name|dollarEscapeCases
parameter_list|()
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|arguments
argument_list|(
literal|"$"
argument_list|,
literal|"\\$"
argument_list|)
argument_list|,
name|arguments
argument_list|(
literal|"some ${expression} here"
argument_list|,
literal|"some \\${expression} here"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|urlEscapeCases ()
specifier|static
name|Stream
argument_list|<
name|Arguments
argument_list|>
name|urlEscapeCases
parameter_list|()
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|arguments
argument_list|(
literal|"http"
argument_list|,
literal|"http"
argument_list|)
argument_list|,
name|arguments
argument_list|(
literal|"some ${expression} here"
argument_list|,
literal|"some \\${expression} here"
argument_list|)
argument_list|,
name|arguments
argument_list|(
literal|"http://example.com"
argument_list|,
literal|"\\http://example.com"
argument_list|)
argument_list|,
name|arguments
argument_list|(
literal|"some http://example.com here"
argument_list|,
literal|"some \\http://example.com here"
argument_list|)
argument_list|,
name|arguments
argument_list|(
literal|"https://example.com"
argument_list|,
literal|"\\https://example.com"
argument_list|)
argument_list|,
name|arguments
argument_list|(
literal|"ftp://example.com"
argument_list|,
literal|"\\ftp://example.com"
argument_list|)
argument_list|,
name|arguments
argument_list|(
literal|"Sets the POST URL for zipkin's<a href=\"http://zipkin.io/zipkin-api/#/\">v2 api</a>, usually \"http://zipkinhost:9411/api/v2/spans\""
argument_list|,
literal|"Sets the POST URL for zipkin's<a href=\"http://zipkin.io/zipkin-api/#/\">v2 api</a>, usually \"\\http://zipkinhost:9411/api/v2/spans\""
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

