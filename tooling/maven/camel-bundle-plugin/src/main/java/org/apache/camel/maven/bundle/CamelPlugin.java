begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.bundle
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|bundle
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|annotation
operator|.
name|plugin
operator|.
name|BndPlugin
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|osgi
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|osgi
operator|.
name|Jar
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|osgi
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|service
operator|.
name|AnalyzerPlugin
import|;
end_import

begin_class
annotation|@
name|BndPlugin
argument_list|(
name|name
operator|=
literal|"camel"
argument_list|)
DECL|class|CamelPlugin
specifier|public
class|class
name|CamelPlugin
implements|implements
name|AnalyzerPlugin
block|{
annotation|@
name|Override
DECL|method|analyzeJar (Analyzer analyzer)
specifier|public
name|boolean
name|analyzeJar
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|Jar
name|jar
init|=
name|analyzer
operator|.
name|getJar
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|>
name|dir
init|=
name|jar
operator|.
name|getDirectories
argument_list|()
decl_stmt|;
name|Stream
argument_list|<
name|String
argument_list|>
name|components
init|=
name|dir
operator|.
name|getOrDefault
argument_list|(
literal|"META-INF/services/org/apache/camel/component"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|s
lambda|->
name|s
operator|.
name|substring
argument_list|(
name|s
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|s
lambda|->
literal|"osgi.service;effective:=active;objectClass=\"org.apache.camel.spi.ComponentResolver\";component="
operator|+
name|s
argument_list|)
decl_stmt|;
name|Stream
argument_list|<
name|String
argument_list|>
name|languages
init|=
name|dir
operator|.
name|getOrDefault
argument_list|(
literal|"META-INF/services/org/apache/camel/language"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|s
lambda|->
name|s
operator|.
name|substring
argument_list|(
name|s
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|s
lambda|->
literal|"osgi.service;effective:=active;objectClass=\"org.apache.camel.spi.LanguageResolver\";language="
operator|+
name|s
argument_list|)
decl_stmt|;
name|Stream
argument_list|<
name|String
argument_list|>
name|dataformats
init|=
name|dir
operator|.
name|getOrDefault
argument_list|(
literal|"META-INF/services/org/apache/camel/dataformat"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|s
lambda|->
name|s
operator|.
name|substring
argument_list|(
name|s
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|s
lambda|->
literal|"osgi.service;effective:=active;objectClass=\"org.apache.camel.spi.DataformatResolver\";dataformat="
operator|+
name|s
argument_list|)
decl_stmt|;
name|String
name|header
init|=
name|analyzer
operator|.
name|getProperty
argument_list|(
literal|"Provide-Capability"
argument_list|)
decl_stmt|;
name|header
operator|=
name|Stream
operator|.
name|concat
argument_list|(
name|header
operator|!=
literal|null
operator|&&
operator|!
name|header
operator|.
name|isEmpty
argument_list|()
condition|?
name|Stream
operator|.
name|of
argument_list|(
name|header
argument_list|)
else|:
name|Stream
operator|.
name|empty
argument_list|()
argument_list|,
name|Stream
operator|.
name|concat
argument_list|(
name|components
argument_list|,
name|Stream
operator|.
name|concat
argument_list|(
name|languages
argument_list|,
name|dataformats
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|setProperty
argument_list|(
literal|"Provide-Capability"
argument_list|,
name|header
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

