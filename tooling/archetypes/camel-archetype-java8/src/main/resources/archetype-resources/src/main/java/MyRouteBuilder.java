begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_expr_stmt
unit|#
operator|#
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
expr|#
operator|#
name|Licensed
name|to
name|the
name|Apache
name|Software
name|Foundation
argument_list|(
name|ASF
argument_list|)
name|under
name|one
name|or
name|more
expr|#
operator|#
name|contributor
name|license
name|agreements
operator|.
name|See
name|the
name|NOTICE
name|file
name|distributed
name|with
expr|#
operator|#
name|this
name|work
end_expr_stmt

begin_for
for|for additional information regarding copyright ownership. ## The ASF licenses this file to You under the Apache License
operator|,
name|Version
literal|2.0
expr|#
operator|#
operator|(
name|the
literal|"License"
operator|)
expr_stmt|;
end_for

begin_expr_stmt
name|you
name|may
name|not
name|use
name|this
name|file
name|except
name|in
name|compliance
name|with
expr|#
operator|#
name|the
name|License
operator|.
name|You
name|may
name|obtain
name|a
name|copy
name|of
name|the
name|License
name|at
expr|#
operator|#
expr|#
operator|#
name|http
operator|:
comment|//www.apache.org/licenses/LICENSE-2.0
expr|#
operator|#
expr|#
operator|#
name|Unless
name|required
name|by
name|applicable
name|law
name|or
name|agreed
name|to
name|in
name|writing
operator|,
name|software
expr|#
operator|#
name|distributed
name|under
name|the
name|License
name|is
name|distributed
name|on
name|an
literal|"AS IS"
name|BASIS
operator|,
expr_stmt|#
operator|#
name|WITHOUT
name|WARRANTIES
name|OR
name|CONDITIONS
name|OF
name|ANY
name|KIND
operator|,
name|either
name|express
name|or
name|implied
operator|.
expr|#
operator|#
name|See
name|the
name|License
end_expr_stmt

begin_for
for|for the specific language governing permissions and ## limitations under the License. ## ------------------------------------------------------------------------ package $
block|{
package|package
block|}
end_for

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_comment
comment|/**  * A Camel Java8 DSL Router  */
end_comment

begin_class
DECL|class|MyRouteBuilder
specifier|public
class|class
name|MyRouteBuilder
extends|extends
name|RouteBuilder
block|{
DECL|field|OBJECTS
specifier|private
specifier|static
specifier|final
name|Object
index|[]
name|OBJECTS
init|=
operator|new
name|Object
index|[]
block|{
literal|"A string"
block|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
block|,
operator|new
name|Double
argument_list|(
literal|1.0
argument_list|)
block|}
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
decl_stmt|;
comment|/**      * Let's configure the Camel routing rules using Java code...      */
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// here is a sample which set a raondom body then performs content
comment|// based routing on the message using method references
name|from
argument_list|(
literal|"timer:simple?period=1000"
argument_list|)
operator|.
name|process
argument_list|()
operator|.
name|message
argument_list|(
name|m
lambda|->
name|m
operator|.
name|setHeader
argument_list|(
literal|"index"
argument_list|,
name|index
operator|++
operator|%
literal|3
argument_list|)
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|message
argument_list|(
name|this
operator|::
name|randomBody
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|()
operator|.
name|body
argument_list|(
name|String
operator|.
name|class
operator|::
name|isInstance
argument_list|)
operator|.
name|log
argument_list|(
literal|"Got a String body"
argument_list|)
operator|.
name|when
argument_list|()
operator|.
name|body
argument_list|(
name|Integer
operator|.
name|class
operator|::
name|isInstance
argument_list|)
operator|.
name|log
argument_list|(
literal|"Got an Integer body"
argument_list|)
operator|.
name|when
argument_list|()
operator|.
name|body
argument_list|(
name|Double
operator|.
name|class
operator|::
name|isInstance
argument_list|)
operator|.
name|log
argument_list|(
literal|"Got a Double body"
argument_list|)
operator|.
name|otherwise
argument_list|()
operator|.
name|log
argument_list|(
literal|"Other type message"
argument_list|)
expr_stmt|;
block|}
DECL|method|randomBody (Message m)
specifier|private
name|Object
name|randomBody
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
return|return
name|OBJECTS
index|[
name|m
operator|.
name|getHeader
argument_list|(
literal|"index"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
index|]
return|;
block|}
block|}
end_class

end_unit

