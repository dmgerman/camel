begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_expr_stmt
unit|#
name|set
argument_list|(
name|$symbol_pound
operator|=
literal|'#'
argument_list|)
expr|#
name|set
argument_list|(
name|$symbol_dollar
operator|=
literal|'$'
argument_list|)
expr|#
name|set
argument_list|(
name|$symbol_escape
operator|=
literal|'\' )
expr|#
operator|#
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
expr|#
operator|#
name|Licensed
name|to
name|the
name|Apache
name|Software
name|Foundation
argument_list|(
name|ASF
argument_list|)
name|under
name|one
name|or
name|more
expr|#
operator|#
name|contributor
name|license
name|agreements
operator|.
name|See
name|the
name|NOTICE
name|file
name|distributed
name|with
expr|#
operator|#
name|this
name|work
for|for additional information regarding copyright ownership. ## The ASF licenses this file to You under the Apache License
operator|,
name|Version
literal|2.0
expr|#
operator|#
operator|(
name|the
literal|"License"
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|you
name|may
name|not
name|use
name|this
name|file
name|except
name|in
name|compliance
name|with
expr|#
operator|#
name|the
name|License
operator|.
name|You
name|may
name|obtain
name|a
name|copy
name|of
name|the
name|License
name|at
expr|#
operator|#
expr|#
operator|#
name|http
operator|:
comment|//www.apache.org/licenses/LICENSE-2.0
expr|#
operator|#
expr|#
operator|#
name|Unless
name|required
name|by
name|applicable
name|law
name|or
name|agreed
name|to
name|in
name|writing
operator|,
name|software
expr|#
operator|#
name|distributed
name|under
name|the
name|License
name|is
name|distributed
name|on
name|an
literal|"AS IS"
name|BASIS
operator|,
expr_stmt|#
operator|#
name|WITHOUT
name|WARRANTIES
name|OR
name|CONDITIONS
name|OF
name|ANY
name|KIND
operator|,
name|either
name|express
name|or
name|implied
operator|.
expr|#
operator|#
name|See
name|the
name|License
end_expr_stmt

begin_for
for|for the specific language governing permissions and ## limitations under the License. ## ------------------------------------------------------------------------ package $
block|{
package|package
block|}
end_for

begin_expr_stmt
operator|.
name|internal
expr_stmt|;
end_expr_stmt

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|Validate
import|;
end_import

begin_class
DECL|class|$
specifier|public
class|class
name|$
block|{
name|className
block|}
end_class

begin_expr_stmt
DECL|class|$
name|Route
expr|extends
name|RouteBuilder
block|{
name|Registry
name|registry
block|;
comment|// Configured fields
specifier|private
name|String
name|camelRouteId
block|;
specifier|private
name|Integer
name|maximumRedeliveries
block|;
specifier|private
name|Long
name|redeliveryDelay
block|;
specifier|private
name|Double
name|backOffMultiplier
block|;
specifier|private
name|Long
name|maximumRedeliveryDelay
block|;
specifier|public
name|$
block|{
name|className
block|}
name|Route
argument_list|(
name|final
name|Registry
name|registry
argument_list|)
block|{
name|this
operator|.
name|registry
operator|=
name|registry
block|;     }
expr|@
name|Override
specifier|public
name|void
name|configure
argument_list|()
throws|throws
name|Exception
block|{
name|checkProperties
argument_list|()
block|;
name|errorHandler
argument_list|(
name|defaultErrorHandler
argument_list|()
operator|.
name|retryAttemptedLogLevel
argument_list|(
name|LoggingLevel
operator|.
name|WARN
argument_list|)
operator|.
name|maximumRedeliveries
argument_list|(
name|maximumRedeliveries
argument_list|)
operator|.
name|redeliveryDelay
argument_list|(
name|redeliveryDelay
argument_list|)
operator|.
name|backOffMultiplier
argument_list|(
name|backOffMultiplier
argument_list|)
operator|.
name|maximumRedeliveryDelay
argument_list|(
name|maximumRedeliveryDelay
argument_list|)
argument_list|)
block|;
name|from
argument_list|(
literal|"{{from}}"
argument_list|)
operator|.
name|startupOrder
argument_list|(
literal|2
argument_list|)
operator|.
name|routeId
argument_list|(
name|camelRouteId
argument_list|)
operator|.
name|onCompletion
argument_list|()
operator|.
name|to
argument_list|(
literal|"direct:processCompletion"
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|removeHeaders
argument_list|(
literal|"CamelHttp*"
argument_list|)
operator|.
name|to
argument_list|(
literal|"{{to}}"
argument_list|)
block|;
name|from
argument_list|(
literal|"direct:processCompletion"
argument_list|)
operator|.
name|startupOrder
argument_list|(
literal|1
argument_list|)
operator|.
name|routeId
argument_list|(
name|camelRouteId
operator|+
literal|".completion"
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|(
name|simple
argument_list|(
literal|"${exception} == null"
argument_list|)
argument_list|)
operator|.
name|log
argument_list|(
literal|"{{messageOk}}"
argument_list|)
operator|.
name|otherwise
argument_list|()
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|ERROR
argument_list|,
literal|"{{messageError}}"
argument_list|)
operator|.
name|end
argument_list|()
block|; 	}
specifier|public
name|void
name|checkProperties
argument_list|()
block|{
name|Validate
operator|.
name|notNull
argument_list|(
name|camelRouteId
argument_list|,
literal|"camelRouteId property is not set"
argument_list|)
block|;
name|Validate
operator|.
name|notNull
argument_list|(
name|maximumRedeliveries
argument_list|,
literal|"maximumRedeliveries property is not set"
argument_list|)
block|;
name|Validate
operator|.
name|notNull
argument_list|(
name|redeliveryDelay
argument_list|,
literal|"redeliveryDelay property is not set"
argument_list|)
block|;
name|Validate
operator|.
name|notNull
argument_list|(
name|backOffMultiplier
argument_list|,
literal|"backOffMultiplier property is not set"
argument_list|)
block|;
name|Validate
operator|.
name|notNull
argument_list|(
name|maximumRedeliveryDelay
argument_list|,
literal|"maximumRedeliveryDelay property is not set"
argument_list|)
block|;     }
end_expr_stmt

unit|}
end_unit

