begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_expr_stmt
unit|#
operator|#
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
expr|#
operator|#
name|Licensed
name|to
name|the
name|Apache
name|Software
name|Foundation
argument_list|(
name|ASF
argument_list|)
name|under
name|one
name|or
name|more
expr|#
operator|#
name|contributor
name|license
name|agreements
operator|.
name|See
name|the
name|NOTICE
name|file
name|distributed
name|with
expr|#
operator|#
name|this
name|work
end_expr_stmt

begin_for
for|for additional information regarding copyright ownership. ## The ASF licenses this file to You under the Apache License
operator|,
name|Version
literal|2.0
expr|#
operator|#
operator|(
name|the
literal|"License"
operator|)
expr_stmt|;
end_for

begin_expr_stmt
name|you
name|may
name|not
name|use
name|this
name|file
name|except
name|in
name|compliance
name|with
expr|#
operator|#
name|the
name|License
operator|.
name|You
name|may
name|obtain
name|a
name|copy
name|of
name|the
name|License
name|at
expr|#
operator|#
expr|#
operator|#
name|http
operator|:
comment|//www.apache.org/licenses/LICENSE-2.0
expr|#
operator|#
expr|#
operator|#
name|Unless
name|required
name|by
name|applicable
name|law
name|or
name|agreed
name|to
name|in
name|writing
operator|,
name|software
expr|#
operator|#
name|distributed
name|under
name|the
name|License
name|is
name|distributed
name|on
name|an
literal|"AS IS"
name|BASIS
operator|,
expr_stmt|#
operator|#
name|WITHOUT
name|WARRANTIES
name|OR
name|CONDITIONS
name|OF
name|ANY
name|KIND
operator|,
name|either
name|express
name|or
name|implied
operator|.
expr|#
operator|#
name|See
name|the
name|License
end_expr_stmt

begin_for
for|for the specific language governing permissions and ## limitations under the License. ## ------------------------------------------------------------------------ package $
block|{
package|package
block|}
end_for

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
operator|.
name|ApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
operator|.
name|ApiMethodHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|$
block|{
package|package
block|}
end_import

begin_expr_stmt
operator|.
name|internal
operator|.
name|$
block|{
name|name
block|}
name|ApiCollection
expr_stmt|;
end_expr_stmt

begin_import
import|import
name|$
block|{
package|package
block|}
end_import

begin_expr_stmt
operator|.
name|internal
operator|.
name|$
block|{
name|name
block|}
name|ApiName
expr_stmt|;
end_expr_stmt

begin_import
import|import
name|$
block|{
package|package
block|}
end_import

begin_expr_stmt
operator|.
name|internal
operator|.
name|$
block|{
name|name
block|}
name|PropertiesHelper
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**  * Represents a ${name} endpoint.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"${scheme}"
argument_list|,
name|consumerClass
operator|=
name|$
block|{
name|name
block|}
name|Consumer
operator|.
name|class
argument_list|,
name|consumerPrefix
operator|=
literal|"consumer"
argument_list|)
DECL|class|$
specifier|public
class|class
name|$
block|{
name|name
block|}
end_class

begin_expr_stmt
DECL|class|$
name|Endpoint
expr|extends
name|DefaultEndpoint
block|{
specifier|private
specifier|static
name|final
name|Logger
name|LOG
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|$
block|{
name|name
block|}
name|Endpoint
operator|.
name|class
argument_list|)
block|;      @
name|UriParam
specifier|private
name|final
name|$
block|{
name|name
block|}
name|Configuration
name|configuration
block|;
comment|// property name for Exchange 'In' message body
block|@
name|UriParam
specifier|private
name|String
name|inBody
block|;
comment|// API name
specifier|private
name|final
name|$
block|{
name|name
block|}
name|ApiName
name|apiName
block|;
comment|// API method name
specifier|private
name|final
name|String
name|methodName
block|;
comment|// API method helper
specifier|private
name|final
name|ApiMethodHelper
name|methodHelper
block|;
comment|// candidate methods based on method name and endpoint configuration
specifier|private
name|List
argument_list|<
name|Enum
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
argument_list|>
name|candidates
block|;
comment|// TODO create and manage API proxies
specifier|private
name|final
name|Map
operator|<
name|$
block|{
name|name
block|}
name|ApiName
block|,
name|Object
operator|>
name|proxyCache
block|;
specifier|public
name|$
block|{
name|name
block|}
name|Endpoint
argument_list|(
name|String
name|uri
argument_list|,
name|$
block|{
name|name
block|}
name|Component
name|component
argument_list|,
name|$
block|{
name|name
block|}
name|ApiName
name|apiName
argument_list|,
name|String
name|methodName
argument_list|,
name|$
block|{
name|name
block|}
name|Configuration
name|endpointConfiguration
argument_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
block|;
name|this
operator|.
name|apiName
operator|=
name|apiName
block|;
name|this
operator|.
name|methodName
operator|=
name|methodName
block|;
name|this
operator|.
name|configuration
operator|=
name|endpointConfiguration
block|;
name|methodHelper
operator|=
name|$
block|{
name|name
block|}
name|ApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getHelper
argument_list|(
name|apiName
argument_list|)
block|;
comment|// TODO manage API proxies
name|proxyCache
operator|=
operator|new
name|HashMap
operator|<
name|$
block|{
name|name
block|}
name|ApiName
block|,
name|Object
operator|>
operator|(
operator|)
block|;
name|proxyCache
operator|.
name|put
argument_list|(
name|$
block|{
name|name
block|}
name|ApiName
operator|.
name|HELLO_FILE
argument_list|,
operator|new
name|$
block|{
name|name
block|}
name|FileHello
argument_list|()
argument_list|)
block|;
name|proxyCache
operator|.
name|put
argument_list|(
name|$
block|{
name|name
block|}
name|ApiName
operator|.
name|HELLO_JAVADOC
argument_list|,
operator|new
name|$
block|{
name|name
block|}
name|JavadocHello
argument_list|()
argument_list|)
block|;     }
specifier|public
name|Producer
name|createProducer
argument_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|$
block|{
name|name
block|}
name|Producer
argument_list|(
name|this
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
comment|// make sure inBody is not set for consumers
if|if
condition|(
name|inBody
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Option inBody is not supported for consumer endpoint"
argument_list|)
throw|;
block|}
name|final
name|$
block|{
name|name
block|}
name|Consumer
name|consumer
operator|=
operator|new
name|$
block|{
name|name
block|}
name|Consumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
expr_stmt|;
comment|// also set consumer.* properties
name|configureConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|configureProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
name|super
operator|.
name|configureProperties
argument_list|(
name|options
argument_list|)
expr_stmt|;
comment|// set configuration properties first
try|try
block|{
name|EndpointHelper
operator|.
name|setReferenceProperties
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|configuration
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|EndpointHelper
operator|.
name|setProperties
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|configuration
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// validate and initialize state
name|initState
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|initState
parameter_list|()
block|{
comment|// get endpoint property names
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|arguments
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|arguments
operator|.
name|addAll
argument_list|(
name|$
block|{
name|name
block|}
name|PropertiesHelper
operator|.
name|getHelper
argument_list|()
operator|.
name|getEndpointPropertyNames
argument_list|(
name|configuration
argument_list|)
argument_list|)
expr_stmt|;
comment|// add inBody argument for producers
if|if
condition|(
name|inBody
operator|!=
literal|null
condition|)
block|{
name|arguments
operator|.
name|add
argument_list|(
name|inBody
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
index|[]
name|argNames
init|=
name|arguments
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|arguments
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
comment|// create a list of candidate methods
name|candidates
operator|=
operator|new
name|ArrayList
argument_list|<
name|Enum
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|candidates
operator|.
name|addAll
argument_list|(
name|methodHelper
operator|.
name|getCandidateMethods
argument_list|(
name|methodName
argument_list|,
name|argNames
argument_list|)
argument_list|)
expr_stmt|;
comment|// error if there are no candidates
if|if
condition|(
name|candidates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"No matching method for %s/%s, with arguments %s"
argument_list|,
name|apiName
operator|.
name|getName
argument_list|()
argument_list|,
name|methodName
argument_list|,
name|arguments
argument_list|)
argument_list|)
throw|;
block|}
comment|// log missing/extra properties for debugging
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|missing
init|=
name|methodHelper
operator|.
name|getMissingProperties
argument_list|(
name|methodName
argument_list|,
name|arguments
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|missing
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Method {} could use one or more properties from {}"
argument_list|,
name|methodName
argument_list|,
name|missing
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_decl_stmt
annotation|@
name|Override
specifier|public
name|$
block|{
name|name
block|}
end_decl_stmt

begin_function
name|Component
name|getComponent
parameter_list|()
block|{
return|return
operator|(
name|$
block|{
name|name
block|}
name|Component
operator|)
name|super
operator|.
name|getComponent
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
specifier|public
name|$
block|{
name|name
block|}
name|Configuration
name|getConfiguration
argument_list|()
block|{
return|return
name|configuration
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|public
name|$
block|{
name|name
block|}
name|ApiName
name|getApiName
argument_list|()
block|{
return|return
name|apiName
return|;
block|}
end_expr_stmt

begin_function
specifier|public
name|String
name|getMethodName
parameter_list|()
block|{
return|return
name|methodName
return|;
block|}
end_function

begin_function
specifier|public
name|ApiMethodHelper
name|getMethodHelper
parameter_list|()
block|{
return|return
name|methodHelper
return|;
block|}
end_function

begin_function
specifier|public
name|List
argument_list|<
name|Enum
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
argument_list|>
name|getCandidates
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|candidates
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|String
name|getInBody
parameter_list|()
block|{
return|return
name|inBody
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setInBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
comment|// validate property name
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|inBody
argument_list|,
literal|"inBody"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|$
block|{
name|name
block|}
name|PropertiesHelper
operator|.
name|getHelper
argument_list|()
operator|.
name|getValidEndpointProperties
argument_list|(
name|configuration
argument_list|)
operator|.
name|contains
argument_list|(
name|inBody
argument_list|)
block|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown property "
operator|+
name|inBody
argument_list|)
throw|;
block|}
end_function

begin_expr_stmt
name|this
operator|.
name|inBody
operator|=
name|inBody
expr_stmt|;
end_expr_stmt

begin_function
unit|}      public
name|Object
name|getApiProxy
parameter_list|()
block|{
comment|// TODO manage API proxies
return|return
name|proxyCache
operator|.
name|get
argument_list|(
name|apiName
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

