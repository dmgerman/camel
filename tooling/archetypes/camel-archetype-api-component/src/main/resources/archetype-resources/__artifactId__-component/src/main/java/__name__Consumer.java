begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_expr_stmt
unit|#
operator|#
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
expr|#
operator|#
name|Licensed
name|to
name|the
name|Apache
name|Software
name|Foundation
argument_list|(
name|ASF
argument_list|)
name|under
name|one
name|or
name|more
expr|#
operator|#
name|contributor
name|license
name|agreements
operator|.
name|See
name|the
name|NOTICE
name|file
name|distributed
name|with
expr|#
operator|#
name|this
name|work
end_expr_stmt

begin_for
for|for additional information regarding copyright ownership. ## The ASF licenses this file to You under the Apache License
operator|,
name|Version
literal|2.0
expr|#
operator|#
operator|(
name|the
literal|"License"
operator|)
expr_stmt|;
end_for

begin_expr_stmt
name|you
name|may
name|not
name|use
name|this
name|file
name|except
name|in
name|compliance
name|with
expr|#
operator|#
name|the
name|License
operator|.
name|You
name|may
name|obtain
name|a
name|copy
name|of
name|the
name|License
name|at
expr|#
operator|#
expr|#
operator|#
name|http
operator|:
comment|//www.apache.org/licenses/LICENSE-2.0
expr|#
operator|#
expr|#
operator|#
name|Unless
name|required
name|by
name|applicable
name|law
name|or
name|agreed
name|to
name|in
name|writing
operator|,
name|software
expr|#
operator|#
name|distributed
name|under
name|the
name|License
name|is
name|distributed
name|on
name|an
literal|"AS IS"
name|BASIS
operator|,
expr_stmt|#
operator|#
name|WITHOUT
name|WARRANTIES
name|OR
name|CONDITIONS
name|OF
name|ANY
name|KIND
operator|,
name|either
name|express
name|or
name|implied
operator|.
expr|#
operator|#
name|See
name|the
name|License
end_expr_stmt

begin_for
for|for the specific language governing permissions and ## limitations under the License. ## ------------------------------------------------------------------------ package $
block|{
package|package
block|}
end_for

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ScheduledPollConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
operator|.
name|ApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
operator|.
name|ApiMethodHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|$
block|{
package|package
block|}
end_import

begin_expr_stmt
operator|.
name|internal
operator|.
name|$
block|{
name|name
block|}
name|PropertiesHelper
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**  * The ${name} consumer.  */
end_comment

begin_class
DECL|class|$
specifier|public
class|class
name|$
block|{
name|name
block|}
end_class

begin_expr_stmt
DECL|class|$
name|Consumer
expr|extends
name|ScheduledPollConsumer
block|{
specifier|private
specifier|static
name|final
name|Logger
name|LOG
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|$
block|{
name|name
block|}
name|Consumer
operator|.
name|class
argument_list|)
block|;
specifier|private
name|final
name|$
block|{
name|name
block|}
name|Endpoint
name|endpoint
block|;
comment|// helpers
specifier|private
name|final
name|$
block|{
name|name
block|}
name|PropertiesHelper
name|propertiesHelper
block|;
specifier|private
name|final
name|ApiMethodHelper
name|methodHelper
block|;
comment|// API method to invoke
specifier|private
name|final
name|Enum
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
name|method
block|;
comment|// properties used to invoke
specifier|private
name|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|endpointProperties
block|;
specifier|public
name|$
block|{
name|name
block|}
name|Consumer
argument_list|(
name|$
block|{
name|name
block|}
name|Endpoint
name|endpoint
argument_list|,
name|Processor
name|processor
argument_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
block|;
comment|// cache variables
name|this
operator|.
name|endpoint
operator|=
name|endpoint
block|;
name|this
operator|.
name|propertiesHelper
operator|=
name|$
block|{
name|name
block|}
name|PropertiesHelper
operator|.
name|getHelper
argument_list|()
block|;
name|this
operator|.
name|methodHelper
operator|=
name|endpoint
operator|.
name|getMethodHelper
argument_list|()
block|;
comment|// determine the consumer method to invoke
name|this
operator|.
name|method
operator|=
name|findMethod
argument_list|()
block|;
comment|// get endpoint properties in a map
name|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|;
name|propertiesHelper
operator|.
name|getEndpointProperties
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|properties
argument_list|)
block|;
name|this
operator|.
name|endpointProperties
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|properties
argument_list|)
block|;     }
expr|@
name|Override
specifier|public
name|boolean
name|isGreedy
argument_list|()
block|{
comment|// make this consumer not greedy to avoid making too many ${name} calls
return|return
literal|false
return|;
block|}
specifier|private
name|Enum
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
name|findMethod
argument_list|()
block|{
name|Enum
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
name|result
decl_stmt|;
comment|// find one that takes the largest subset of endpoint parameters
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|argNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|argNames
operator|.
name|addAll
argument_list|(
name|propertiesHelper
operator|.
name|getEndpointPropertyNames
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|argNamesArray
init|=
name|argNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|argNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Enum
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
argument_list|>
name|filteredMethods
init|=
name|methodHelper
operator|.
name|filterMethods
argument_list|(
name|endpoint
operator|.
name|getCandidates
argument_list|()
argument_list|,
name|ApiMethodHelper
operator|.
name|MatchType
operator|.
name|SUPER_SET
argument_list|,
name|argNamesArray
argument_list|)
decl_stmt|;
if|if
condition|(
name|filteredMethods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Missing properties for %s/%s, need one or more from %s"
argument_list|,
name|endpoint
operator|.
name|getApiName
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|methodHelper
operator|.
name|getMissingProperties
argument_list|(
name|endpoint
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|argNames
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|filteredMethods
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// single match
name|result
operator|=
name|filteredMethods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|methodHelper
operator|.
name|getHighestPriorityMethod
argument_list|(
name|filteredMethods
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Using highest priority operation {} from operations {}"
argument_list|,
name|method
argument_list|,
name|filteredMethods
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_expr_stmt

begin_function
annotation|@
name|Override
specifier|protected
name|int
name|poll
parameter_list|()
throws|throws
name|Exception
block|{
comment|// invoke the consumer method
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
init|=
name|getMethodArguments
argument_list|()
decl_stmt|;
try|try
block|{
name|Object
name|result
init|=
name|methodHelper
operator|.
name|invokeMethod
argument_list|(
name|endpoint
operator|.
name|getApiProxy
argument_list|()
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
decl_stmt|;
comment|// process result according to type
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
operator|(
name|result
operator|instanceof
name|Collection
operator|||
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
operator|)
condition|)
block|{
comment|// create an exchange for every element
specifier|final
name|Object
name|array
init|=
name|getResultAsArray
argument_list|(
name|result
argument_list|)
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|Array
operator|.
name|getLength
argument_list|(
name|array
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|processResult
argument_list|(
name|Array
operator|.
name|get
argument_list|(
name|array
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
else|else
block|{
name|processResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
comment|// number of messages polled
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|processResult
parameter_list|(
name|Object
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
try|try
block|{
comment|// send message to next processor in the route
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// log exception if an exception occurred and was not handled
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
literal|"Error processing exchange"
argument_list|,
name|exchange
argument_list|,
name|exchange
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|private
name|Object
name|getResultAsArray
parameter_list|(
name|Object
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
comment|// no conversion needed
return|return
name|result
return|;
block|}
comment|// must be a Collection
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|result
decl_stmt|;
return|return
name|collection
operator|.
name|toArray
argument_list|(
operator|new
name|Object
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getMethodArguments
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|arguments
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|arguments
operator|.
name|putAll
argument_list|(
name|endpointProperties
argument_list|)
expr_stmt|;
comment|// TODO do consumer specific argument manipulation, such as setting constants or per poll properties
return|return
name|arguments
return|;
block|}
end_function

unit|}
end_unit

