begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.generator.openapi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|generator
operator|.
name|openapi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|models
operator|.
name|OasOperation
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|models
operator|.
name|OasPathItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
DECL|class|PathVisitor
class|class
name|PathVisitor
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|destinationGenerator
specifier|private
specifier|final
name|DestinationGenerator
name|destinationGenerator
decl_stmt|;
DECL|field|emitter
specifier|private
specifier|final
name|CodeEmitter
argument_list|<
name|T
argument_list|>
name|emitter
decl_stmt|;
DECL|field|filter
specifier|private
specifier|final
name|OperationFilter
name|filter
decl_stmt|;
DECL|method|PathVisitor (final String basePath, final CodeEmitter<T> emitter, OperationFilter filter, final DestinationGenerator destinationGenerator)
name|PathVisitor
parameter_list|(
specifier|final
name|String
name|basePath
parameter_list|,
specifier|final
name|CodeEmitter
argument_list|<
name|T
argument_list|>
name|emitter
parameter_list|,
name|OperationFilter
name|filter
parameter_list|,
specifier|final
name|DestinationGenerator
name|destinationGenerator
parameter_list|)
block|{
name|this
operator|.
name|emitter
operator|=
name|emitter
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|destinationGenerator
operator|=
name|destinationGenerator
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
name|emitter
operator|.
name|emit
argument_list|(
literal|"rest"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|emitter
operator|.
name|emit
argument_list|(
literal|"rest"
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|visit (final String path, final OasPathItem definition)
name|void
name|visit
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|OasPathItem
name|definition
parameter_list|)
block|{
specifier|final
name|OperationVisitor
argument_list|<
name|T
argument_list|>
name|restDslOperation
init|=
operator|new
name|OperationVisitor
argument_list|<>
argument_list|(
name|emitter
argument_list|,
name|filter
argument_list|,
name|path
argument_list|,
name|destinationGenerator
argument_list|)
decl_stmt|;
name|getOperationMap
argument_list|(
name|definition
argument_list|)
operator|.
name|forEach
argument_list|(
name|restDslOperation
operator|::
name|visit
argument_list|)
expr_stmt|;
block|}
DECL|method|visit (final OasPathItem definition)
name|void
name|visit
parameter_list|(
specifier|final
name|OasPathItem
name|definition
parameter_list|)
block|{
specifier|final
name|OperationVisitor
argument_list|<
name|T
argument_list|>
name|restDslOperation
init|=
operator|new
name|OperationVisitor
argument_list|<>
argument_list|(
name|emitter
argument_list|,
name|filter
argument_list|,
name|definition
operator|.
name|getPath
argument_list|()
argument_list|,
name|destinationGenerator
argument_list|)
decl_stmt|;
name|getOperationMap
argument_list|(
name|definition
argument_list|)
operator|.
name|forEach
argument_list|(
name|restDslOperation
operator|::
name|visit
argument_list|)
expr_stmt|;
block|}
DECL|method|getOperationMap (OasPathItem path)
specifier|private
name|Map
argument_list|<
name|HttpMethod
argument_list|,
name|OasOperation
argument_list|>
name|getOperationMap
parameter_list|(
name|OasPathItem
name|path
parameter_list|)
block|{
name|Map
argument_list|<
name|HttpMethod
argument_list|,
name|OasOperation
argument_list|>
name|result
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|HttpMethod
argument_list|,
name|OasOperation
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|get
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|HttpMethod
operator|.
name|GET
argument_list|,
name|path
operator|.
name|get
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|put
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|HttpMethod
operator|.
name|PUT
argument_list|,
name|path
operator|.
name|put
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|post
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|HttpMethod
operator|.
name|POST
argument_list|,
name|path
operator|.
name|post
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|delete
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|HttpMethod
operator|.
name|DELETE
argument_list|,
name|path
operator|.
name|delete
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|patch
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|HttpMethod
operator|.
name|PATCH
argument_list|,
name|path
operator|.
name|patch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|head
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|HttpMethod
operator|.
name|HEAD
argument_list|,
name|path
operator|.
name|head
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|options
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|HttpMethod
operator|.
name|OPTIONS
argument_list|,
name|path
operator|.
name|options
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|enum|HttpMethod
specifier|public
enum|enum
name|HttpMethod
block|{
DECL|enumConstant|POST
name|POST
block|,
DECL|enumConstant|GET
name|GET
block|,
DECL|enumConstant|PUT
name|PUT
block|,
DECL|enumConstant|PATCH
name|PATCH
block|,
DECL|enumConstant|DELETE
name|DELETE
block|,
DECL|enumConstant|HEAD
name|HEAD
block|,
DECL|enumConstant|OPTIONS
name|OPTIONS
block|}
block|}
end_class

end_unit

