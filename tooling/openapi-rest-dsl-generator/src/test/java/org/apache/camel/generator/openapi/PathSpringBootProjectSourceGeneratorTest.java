begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.generator.openapi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|generator
operator|.
name|openapi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|PathSpringBootProjectSourceGeneratorTest
specifier|public
class|class
name|PathSpringBootProjectSourceGeneratorTest
block|{
annotation|@
name|Test
DECL|method|shouldGenerateSourceCodeWithDefaults ()
specifier|public
name|void
name|shouldGenerateSourceCodeWithDefaults
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|Path
name|path
init|=
operator|new
name|File
argument_list|(
literal|"target/generated-sources"
argument_list|)
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|SpringBootProjectSourceCodeGenerator
operator|.
name|generator
argument_list|()
operator|.
name|withPackageName
argument_list|(
literal|"com.foo"
argument_list|)
operator|.
name|generate
argument_list|(
name|path
argument_list|)
expr_stmt|;
specifier|final
name|String
name|generatedContent
init|=
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"target/generated-sources/com/foo/CamelRestController.java"
argument_list|)
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
specifier|final
name|URI
name|file
init|=
name|PathSpringBootProjectSourceGeneratorTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/SpringBootRestController.txt"
argument_list|)
operator|.
name|toURI
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expectedContent
init|=
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|generatedContent
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedContent
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

