begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.generator.swagger
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|generator
operator|.
name|swagger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestOperationParamDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestParamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestsDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|VerbDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|RestDefinitionEmitterTest
specifier|public
class|class
name|RestDefinitionEmitterTest
block|{
annotation|@
name|Test
DECL|method|shouldGenerateObjects ()
specifier|public
name|void
name|shouldGenerateObjects
parameter_list|()
block|{
specifier|final
name|DefaultCamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
specifier|final
name|RestDefinitionEmitter
name|emitter
init|=
operator|new
name|RestDefinitionEmitter
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|emitter
operator|.
name|emit
argument_list|(
literal|"rest"
argument_list|)
expr_stmt|;
name|emitter
operator|.
name|emit
argument_list|(
literal|"put"
argument_list|,
literal|"/pet"
argument_list|)
expr_stmt|;
name|emitter
operator|.
name|emit
argument_list|(
literal|"consumes"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|String
index|[]
block|{
literal|"application/json"
block|,
literal|"application/xml"
block|}
block|}
argument_list|)
expr_stmt|;
name|emitter
operator|.
name|emit
argument_list|(
literal|"produces"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|String
index|[]
block|{
literal|"application/xml"
block|,
literal|"application/json"
block|}
block|}
argument_list|)
expr_stmt|;
name|emitter
operator|.
name|emit
argument_list|(
literal|"param"
argument_list|)
expr_stmt|;
name|emitter
operator|.
name|emit
argument_list|(
literal|"name"
argument_list|,
literal|"body"
argument_list|)
expr_stmt|;
name|emitter
operator|.
name|emit
argument_list|(
literal|"type"
argument_list|,
name|RestParamType
operator|.
name|body
argument_list|)
expr_stmt|;
name|emitter
operator|.
name|emit
argument_list|(
literal|"required"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|emitter
operator|.
name|emit
argument_list|(
literal|"endParam"
argument_list|)
expr_stmt|;
specifier|final
name|RestsDefinition
name|result
init|=
name|emitter
operator|.
name|result
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RestDefinition
argument_list|>
name|rests
init|=
name|result
operator|.
name|getRests
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|rests
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|RestDefinition
name|rest
init|=
name|rests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|VerbDefinition
argument_list|>
name|verbs
init|=
name|rest
operator|.
name|getVerbs
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|verbs
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|VerbDefinition
name|definition
init|=
name|verbs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|definition
operator|.
name|asVerb
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"put"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|definition
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"/pet"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|definition
operator|.
name|getConsumes
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"application/json,application/xml"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|definition
operator|.
name|getProduces
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"application/xml,application/json"
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RestOperationParamDefinition
argument_list|>
name|params
init|=
name|definition
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|params
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|RestOperationParamDefinition
name|param
init|=
name|params
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"body"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RestParamType
operator|.
name|body
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|param
operator|.
name|getRequired
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

