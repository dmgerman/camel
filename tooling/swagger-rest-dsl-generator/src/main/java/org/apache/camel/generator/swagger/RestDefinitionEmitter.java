begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.generator.swagger
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|generator
operator|.
name|swagger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestsDefinition
import|;
end_import

begin_class
DECL|class|RestDefinitionEmitter
class|class
name|RestDefinitionEmitter
implements|implements
name|CodeEmitter
argument_list|<
name|RestsDefinition
argument_list|>
block|{
DECL|field|definition
specifier|private
specifier|final
name|RestsDefinition
name|definition
decl_stmt|;
DECL|field|variable
specifier|private
name|Object
name|variable
decl_stmt|;
DECL|method|RestDefinitionEmitter (final CamelContext context)
name|RestDefinitionEmitter
parameter_list|(
specifier|final
name|CamelContext
name|context
parameter_list|)
block|{
name|definition
operator|=
operator|new
name|RestsDefinition
argument_list|()
expr_stmt|;
name|variable
operator|=
name|definition
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|emit (final String method, final Object... args)
specifier|public
name|CodeEmitter
argument_list|<
name|RestsDefinition
argument_list|>
name|emit
parameter_list|(
specifier|final
name|String
name|method
parameter_list|,
specifier|final
name|Object
modifier|...
name|args
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|type
init|=
name|variable
operator|.
name|getClass
argument_list|()
decl_stmt|;
specifier|final
name|Object
index|[]
name|arguments
init|=
name|argumentsFor
argument_list|(
name|args
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|declaredMethod
init|=
name|type
operator|.
name|getMethod
argument_list|(
name|method
argument_list|,
name|parameterTypesOf
argument_list|(
name|arguments
argument_list|)
argument_list|)
decl_stmt|;
name|variable
operator|=
name|declaredMethod
operator|.
name|invoke
argument_list|(
name|variable
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|result ()
specifier|public
name|RestsDefinition
name|result
parameter_list|()
block|{
return|return
name|definition
return|;
block|}
DECL|method|argumentsFor (final Object[] args)
name|Object
index|[]
name|argumentsFor
parameter_list|(
specifier|final
name|Object
index|[]
name|args
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|arguments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|args
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Object
name|arg
range|:
name|args
control|)
block|{
if|if
condition|(
name|arg
operator|instanceof
name|String
index|[]
condition|)
block|{
name|arguments
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|stream
argument_list|(
operator|(
name|String
index|[]
operator|)
name|arg
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arguments
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|arguments
operator|.
name|toArray
argument_list|(
operator|new
name|Object
index|[
name|arguments
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|parameterTypesOf (final Object[] args)
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypesOf
parameter_list|(
specifier|final
name|Object
index|[]
name|args
parameter_list|)
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[
name|args
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|parameterTypes
index|[
name|i
index|]
operator|=
name|args
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
return|return
name|parameterTypes
return|;
block|}
DECL|method|typesOf (final Object[] args)
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|typesOf
parameter_list|(
specifier|final
name|Object
index|[]
name|args
parameter_list|)
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|types
init|=
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[
name|args
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
name|args
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
return|return
name|types
return|;
block|}
block|}
end_class

end_unit

