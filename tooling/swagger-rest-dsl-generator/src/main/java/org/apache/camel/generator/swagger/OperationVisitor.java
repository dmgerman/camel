begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.generator.swagger
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|generator
operator|.
name|swagger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|parameters
operator|.
name|AbstractSerializableParameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|parameters
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|properties
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|CollectionFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestParamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
DECL|class|OperationVisitor
class|class
name|OperationVisitor
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|destinationGenerator
specifier|private
specifier|final
name|DestinationGenerator
name|destinationGenerator
decl_stmt|;
DECL|field|emitter
specifier|private
specifier|final
name|CodeEmitter
argument_list|<
name|T
argument_list|>
name|emitter
decl_stmt|;
DECL|field|filter
specifier|private
specifier|final
name|OperationFilter
name|filter
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|method|OperationVisitor (final CodeEmitter<T> emitter, final OperationFilter filter, final String path, final DestinationGenerator destinationGenerator)
name|OperationVisitor
parameter_list|(
specifier|final
name|CodeEmitter
argument_list|<
name|T
argument_list|>
name|emitter
parameter_list|,
specifier|final
name|OperationFilter
name|filter
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|DestinationGenerator
name|destinationGenerator
parameter_list|)
block|{
name|this
operator|.
name|emitter
operator|=
name|emitter
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|destinationGenerator
operator|=
name|destinationGenerator
expr_stmt|;
block|}
DECL|method|asStringList (final List<?> values)
name|List
argument_list|<
name|String
argument_list|>
name|asStringList
parameter_list|(
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|stringList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|values
operator|.
name|forEach
argument_list|(
name|v
lambda|->
name|stringList
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|stringList
return|;
block|}
DECL|method|emit (final Parameter parameter)
name|CodeEmitter
argument_list|<
name|T
argument_list|>
name|emit
parameter_list|(
specifier|final
name|Parameter
name|parameter
parameter_list|)
block|{
name|emitter
operator|.
name|emit
argument_list|(
literal|"param"
argument_list|)
expr_stmt|;
name|emit
argument_list|(
literal|"name"
argument_list|,
name|parameter
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|parameterType
init|=
name|parameter
operator|.
name|getIn
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|parameterType
argument_list|)
condition|)
block|{
name|emit
argument_list|(
literal|"type"
argument_list|,
name|RestParamType
operator|.
name|valueOf
argument_list|(
name|parameterType
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parameter
operator|instanceof
name|AbstractSerializableParameter
condition|)
block|{
specifier|final
name|AbstractSerializableParameter
name|serializableParameter
init|=
operator|(
name|AbstractSerializableParameter
operator|)
name|parameter
decl_stmt|;
specifier|final
name|String
name|dataType
init|=
name|serializableParameter
operator|.
name|getType
argument_list|()
decl_stmt|;
name|emit
argument_list|(
literal|"dataType"
argument_list|,
name|dataType
argument_list|)
expr_stmt|;
name|emit
argument_list|(
literal|"allowableValues"
argument_list|,
name|asStringList
argument_list|(
name|serializableParameter
operator|.
name|getEnumValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|collectionFormat
init|=
name|serializableParameter
operator|.
name|getCollectionFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|collectionFormat
argument_list|)
condition|)
block|{
name|emit
argument_list|(
literal|"collectionFormat"
argument_list|,
name|CollectionFormat
operator|.
name|valueOf
argument_list|(
name|collectionFormat
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|emit
argument_list|(
literal|"defaultValue"
argument_list|,
name|serializableParameter
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Property
name|items
init|=
name|serializableParameter
operator|.
name|getItems
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"array"
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
operator|&&
name|items
operator|!=
literal|null
condition|)
block|{
name|emit
argument_list|(
literal|"arrayType"
argument_list|,
name|items
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|emit
argument_list|(
literal|"required"
argument_list|,
name|parameter
operator|.
name|getRequired
argument_list|()
argument_list|)
expr_stmt|;
name|emit
argument_list|(
literal|"description"
argument_list|,
name|parameter
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|emitter
operator|.
name|emit
argument_list|(
literal|"endParam"
argument_list|)
expr_stmt|;
return|return
name|emitter
return|;
block|}
DECL|method|emit (final String method, final List<String> values)
name|CodeEmitter
argument_list|<
name|T
argument_list|>
name|emit
parameter_list|(
specifier|final
name|String
name|method
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|emitter
return|;
block|}
return|return
name|emitter
operator|.
name|emit
argument_list|(
name|method
argument_list|,
operator|new
name|Object
index|[]
block|{
name|values
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|values
operator|.
name|size
argument_list|()
index|]
argument_list|)
block|}
argument_list|)
return|;
block|}
DECL|method|emit (final String method, final Object value)
name|CodeEmitter
argument_list|<
name|T
argument_list|>
name|emit
parameter_list|(
specifier|final
name|String
name|method
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|emitter
return|;
block|}
return|return
name|emitter
operator|.
name|emit
argument_list|(
name|method
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|visit (final HttpMethod method, final Operation operation)
name|void
name|visit
parameter_list|(
specifier|final
name|HttpMethod
name|method
parameter_list|,
specifier|final
name|Operation
name|operation
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|.
name|accept
argument_list|(
name|operation
operator|.
name|getOperationId
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|String
name|methodName
init|=
name|method
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|emitter
operator|.
name|emit
argument_list|(
name|methodName
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|emit
argument_list|(
literal|"id"
argument_list|,
name|operation
operator|.
name|getOperationId
argument_list|()
argument_list|)
expr_stmt|;
name|emit
argument_list|(
literal|"description"
argument_list|,
name|operation
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|emit
argument_list|(
literal|"consumes"
argument_list|,
name|operation
operator|.
name|getConsumes
argument_list|()
argument_list|)
expr_stmt|;
name|emit
argument_list|(
literal|"produces"
argument_list|,
name|operation
operator|.
name|getProduces
argument_list|()
argument_list|)
expr_stmt|;
name|operation
operator|.
name|getParameters
argument_list|()
operator|.
name|forEach
argument_list|(
name|parameter
lambda|->
block|{
name|emit
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|emitter
operator|.
name|emit
argument_list|(
literal|"to"
argument_list|,
name|destinationGenerator
operator|.
name|generateDestinationFor
argument_list|(
name|operation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

