begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.generator.swagger
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|generator
operator|.
name|swagger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|javapoet
operator|.
name|AnnotationSpec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|javapoet
operator|.
name|ClassName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|javapoet
operator|.
name|JavaFile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|javapoet
operator|.
name|MethodSpec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|javapoet
operator|.
name|TypeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|notEmpty
import|;
end_import

begin_class
DECL|class|SpringBootProjectSourceCodeGenerator
specifier|public
class|class
name|SpringBootProjectSourceCodeGenerator
block|{
DECL|field|DEFAULT_INDENT
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_INDENT
init|=
literal|"    "
decl_stmt|;
DECL|field|indent
specifier|private
name|String
name|indent
init|=
name|DEFAULT_INDENT
decl_stmt|;
DECL|field|packageName
specifier|private
name|String
name|packageName
decl_stmt|;
DECL|method|generate (Path destination)
specifier|public
name|void
name|generate
parameter_list|(
name|Path
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|JavaFile
name|javaFile
init|=
name|generateSourceCode
argument_list|()
decl_stmt|;
name|javaFile
operator|.
name|writeTo
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
DECL|method|withIndent (final String indent)
specifier|public
name|SpringBootProjectSourceCodeGenerator
name|withIndent
parameter_list|(
specifier|final
name|String
name|indent
parameter_list|)
block|{
name|this
operator|.
name|indent
operator|=
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|indent
argument_list|,
literal|"indent"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withPackageName (final String packageName)
specifier|public
name|SpringBootProjectSourceCodeGenerator
name|withPackageName
parameter_list|(
specifier|final
name|String
name|packageName
parameter_list|)
block|{
name|notEmpty
argument_list|(
name|packageName
argument_list|,
literal|"packageName"
argument_list|)
expr_stmt|;
name|this
operator|.
name|packageName
operator|=
name|packageName
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|generateSourceCode ()
name|JavaFile
name|generateSourceCode
parameter_list|()
block|{
name|notEmpty
argument_list|(
name|packageName
argument_list|,
literal|"packageName"
argument_list|)
expr_stmt|;
specifier|final
name|MethodSpec
name|methodSpec
init|=
name|generateRestMethod
argument_list|()
decl_stmt|;
specifier|final
name|String
name|classNameToUse
init|=
literal|"CamelRestController"
decl_stmt|;
specifier|final
name|AnnotationSpec
operator|.
name|Builder
name|generatedAnnotation
init|=
name|AnnotationSpec
operator|.
name|builder
argument_list|(
name|Generated
operator|.
name|class
argument_list|)
operator|.
name|addMember
argument_list|(
literal|"value"
argument_list|,
literal|"$S"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AnnotationSpec
operator|.
name|Builder
name|restAnnotation
init|=
name|AnnotationSpec
operator|.
name|builder
argument_list|(
name|ClassName
operator|.
name|bestGuess
argument_list|(
literal|"org.springframework.web.bind.annotation.RestController"
argument_list|)
argument_list|)
decl_stmt|;
name|TypeSpec
operator|.
name|Builder
name|builder
init|=
name|TypeSpec
operator|.
name|classBuilder
argument_list|(
name|classNameToUse
argument_list|)
operator|.
name|addModifiers
argument_list|(
name|Modifier
operator|.
name|PUBLIC
argument_list|,
name|Modifier
operator|.
name|FINAL
argument_list|)
operator|.
name|addMethod
argument_list|(
name|methodSpec
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|generatedAnnotation
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|restAnnotation
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addJavadoc
argument_list|(
literal|"Forward requests to the Camel servlet so it can service REST requests.\n"
argument_list|)
decl_stmt|;
name|TypeSpec
name|generatedRestController
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|JavaFile
operator|.
name|builder
argument_list|(
name|packageName
argument_list|,
name|generatedRestController
argument_list|)
operator|.
name|indent
argument_list|(
name|indent
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|generateRestMethod ()
name|MethodSpec
name|generateRestMethod
parameter_list|()
block|{
name|ClassName
name|req
init|=
name|ClassName
operator|.
name|bestGuess
argument_list|(
literal|"javax.servlet.http.HttpServletRequest"
argument_list|)
decl_stmt|;
name|ClassName
name|res
init|=
name|ClassName
operator|.
name|bestGuess
argument_list|(
literal|"javax.servlet.http.HttpServletResponse"
argument_list|)
decl_stmt|;
specifier|final
name|AnnotationSpec
operator|.
name|Builder
name|reqAnnotation
init|=
name|AnnotationSpec
operator|.
name|builder
argument_list|(
name|ClassName
operator|.
name|bestGuess
argument_list|(
literal|"org.springframework.web.bind.annotation.RequestMapping"
argument_list|)
argument_list|)
operator|.
name|addMember
argument_list|(
literal|"value"
argument_list|,
literal|"\"/**\""
argument_list|)
decl_stmt|;
specifier|final
name|MethodSpec
operator|.
name|Builder
name|forward
init|=
name|MethodSpec
operator|.
name|methodBuilder
argument_list|(
literal|"camelServlet"
argument_list|)
operator|.
name|addModifiers
argument_list|(
name|Modifier
operator|.
name|PUBLIC
argument_list|)
operator|.
name|addParameter
argument_list|(
name|req
argument_list|,
literal|"request"
argument_list|)
operator|.
name|addParameter
argument_list|(
name|res
argument_list|,
literal|"response"
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|reqAnnotation
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|returns
argument_list|(
name|void
operator|.
name|class
argument_list|)
decl_stmt|;
name|forward
operator|.
name|addCode
argument_list|(
literal|"try {\n"
argument_list|)
expr_stmt|;
name|forward
operator|.
name|addCode
argument_list|(
literal|"    String path = request.getRequestURI();\n"
argument_list|)
expr_stmt|;
name|forward
operator|.
name|addCode
argument_list|(
literal|"    request.getServletContext().getRequestDispatcher(\"/camel/\" + path).forward(request, response);\n"
argument_list|)
expr_stmt|;
name|forward
operator|.
name|addCode
argument_list|(
literal|"} catch (Exception e) {\n"
argument_list|)
expr_stmt|;
name|forward
operator|.
name|addCode
argument_list|(
literal|"    response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n"
argument_list|)
expr_stmt|;
name|forward
operator|.
name|addCode
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
return|return
name|forward
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|generator ()
specifier|public
specifier|static
name|SpringBootProjectSourceCodeGenerator
name|generator
parameter_list|()
block|{
return|return
operator|new
name|SpringBootProjectSourceCodeGenerator
argument_list|()
return|;
block|}
block|}
end_class

end_unit

