begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.generator.swagger
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|generator
operator|.
name|swagger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringJoiner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|javapoet
operator|.
name|MethodSpec
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ClassUtils
operator|.
name|isPrimitiveOrWrapper
import|;
end_import

begin_class
DECL|class|MethodBodySourceCodeEmitter
class|class
name|MethodBodySourceCodeEmitter
implements|implements
name|CodeEmitter
argument_list|<
name|MethodSpec
argument_list|>
block|{
DECL|field|builder
specifier|private
specifier|final
name|MethodSpec
operator|.
name|Builder
name|builder
decl_stmt|;
DECL|field|first
specifier|private
name|boolean
name|first
init|=
literal|true
decl_stmt|;
DECL|field|indentIntentStack
specifier|private
specifier|final
name|Deque
argument_list|<
name|Integer
argument_list|>
name|indentIntentStack
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|indentStack
specifier|private
specifier|final
name|Deque
argument_list|<
name|Integer
argument_list|>
name|indentStack
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|MethodBodySourceCodeEmitter (final MethodSpec.Builder builder)
name|MethodBodySourceCodeEmitter
parameter_list|(
specifier|final
name|MethodSpec
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
name|indentStack
operator|.
name|push
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|emit (final String method, final Object... args)
specifier|public
name|CodeEmitter
argument_list|<
name|MethodSpec
argument_list|>
name|emit
parameter_list|(
specifier|final
name|String
name|method
parameter_list|,
specifier|final
name|Object
modifier|...
name|args
parameter_list|)
block|{
specifier|final
name|boolean
name|hasArgs
init|=
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|length
operator|>
literal|0
decl_stmt|;
specifier|final
name|int
name|indent
init|=
name|indentLevelOf
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|builder
operator|.
name|addCode
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addCode
argument_list|(
name|String
operator|.
name|join
argument_list|(
literal|""
argument_list|,
name|Collections
operator|.
name|nCopies
argument_list|(
name|indentStack
operator|.
name|peek
argument_list|()
argument_list|,
literal|"$<"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addCode
argument_list|(
name|String
operator|.
name|join
argument_list|(
literal|""
argument_list|,
name|Collections
operator|.
name|nCopies
argument_list|(
name|indent
argument_list|,
literal|"$>"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|builder
operator|.
name|addCode
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
name|indentStack
operator|.
name|push
argument_list|(
name|indent
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasArgs
condition|)
block|{
name|builder
operator|.
name|addCode
argument_list|(
literal|"$L("
operator|+
name|invocationLiteralsFor
argument_list|(
name|args
argument_list|)
operator|+
literal|")"
argument_list|,
name|extend
argument_list|(
name|method
argument_list|,
name|argumentsFor
argument_list|(
name|args
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|addCode
argument_list|(
literal|"$L()"
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|result ()
specifier|public
name|MethodSpec
name|result
parameter_list|()
block|{
name|builder
operator|.
name|addCode
argument_list|(
name|String
operator|.
name|join
argument_list|(
literal|""
argument_list|,
name|Collections
operator|.
name|nCopies
argument_list|(
name|indentStack
operator|.
name|peek
argument_list|()
argument_list|,
literal|"$<"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addCode
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|argumentsFor (final Object[] args)
name|Object
index|[]
name|argumentsFor
parameter_list|(
specifier|final
name|Object
index|[]
name|args
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|arguments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|args
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Object
name|arg
range|:
name|args
control|)
block|{
if|if
condition|(
name|isPrimitiveOrWrapper
argument_list|(
name|arg
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|arguments
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|instanceof
name|String
condition|)
block|{
name|arguments
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|instanceof
name|Enum
condition|)
block|{
name|arguments
operator|.
name|add
argument_list|(
name|arg
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|arguments
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|instanceof
name|String
index|[]
condition|)
block|{
name|arguments
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|stream
argument_list|(
operator|(
name|String
index|[]
operator|)
name|arg
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|arguments
operator|.
name|toArray
argument_list|(
operator|new
name|Object
index|[
name|arguments
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|extend (final Object first, final Object... others)
name|Object
index|[]
name|extend
parameter_list|(
specifier|final
name|Object
name|first
parameter_list|,
specifier|final
name|Object
modifier|...
name|others
parameter_list|)
block|{
if|if
condition|(
name|others
operator|==
literal|null
operator|||
name|others
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|Object
index|[]
block|{
name|first
block|}
return|;
block|}
specifier|final
name|Object
index|[]
name|ret
init|=
operator|new
name|Object
index|[
literal|1
operator|+
name|others
operator|.
name|length
index|]
decl_stmt|;
name|ret
index|[
literal|0
index|]
operator|=
name|first
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|others
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|,
literal|1
argument_list|,
name|others
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|indentLevelOf (final String method)
name|int
name|indentLevelOf
parameter_list|(
specifier|final
name|String
name|method
parameter_list|)
block|{
switch|switch
condition|(
name|method
condition|)
block|{
case|case
literal|"rest"
case|:
return|return
literal|0
return|;
case|case
literal|"post"
case|:
case|case
literal|"get"
case|:
case|case
literal|"put"
case|:
case|case
literal|"patch"
case|:
case|case
literal|"delete"
case|:
case|case
literal|"head"
case|:
case|case
literal|"options"
case|:
return|return
literal|1
return|;
case|case
literal|"param"
case|:
name|indentIntentStack
operator|.
name|push
argument_list|(
literal|3
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
case|case
literal|"endParam"
case|:
name|indentIntentStack
operator|.
name|pop
argument_list|()
expr_stmt|;
return|return
literal|2
return|;
case|case
literal|"route"
case|:
name|indentIntentStack
operator|.
name|push
argument_list|(
literal|3
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
case|case
literal|"endRest"
case|:
name|indentIntentStack
operator|.
name|pop
argument_list|()
expr_stmt|;
return|return
literal|2
return|;
default|default:
if|if
condition|(
name|indentIntentStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|2
return|;
block|}
return|return
name|indentIntentStack
operator|.
name|peek
argument_list|()
return|;
block|}
block|}
DECL|method|invocationLiteralsFor (final Object[] args)
name|String
name|invocationLiteralsFor
parameter_list|(
specifier|final
name|Object
index|[]
name|args
parameter_list|)
block|{
specifier|final
name|StringJoiner
name|literals
init|=
operator|new
name|StringJoiner
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Object
name|arg
range|:
name|args
control|)
block|{
if|if
condition|(
name|isPrimitiveOrWrapper
argument_list|(
name|arg
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|literals
operator|.
name|add
argument_list|(
literal|"$L"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|instanceof
name|String
condition|)
block|{
name|literals
operator|.
name|add
argument_list|(
literal|"$S"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|instanceof
name|Enum
condition|)
block|{
name|literals
operator|.
name|add
argument_list|(
literal|"$T.$L"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|instanceof
name|String
index|[]
condition|)
block|{
name|literals
operator|.
name|add
argument_list|(
literal|"$S"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|literals
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

