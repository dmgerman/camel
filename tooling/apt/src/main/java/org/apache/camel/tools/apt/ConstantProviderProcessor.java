begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.tools.apt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|RoundEnvironment
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|SupportedAnnotationTypes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|TypeElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|VariableElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|type
operator|.
name|TypeMirror
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|util
operator|.
name|ElementFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|Diagnostic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|JavaFileObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|annotations
operator|.
name|ConstantProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|AnnotationProcessorHelper
operator|.
name|dumpExceptionToErrorFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
operator|.
name|Strings
operator|.
name|canonicalClassName
import|;
end_import

begin_class
annotation|@
name|SupportedAnnotationTypes
argument_list|(
block|{
literal|"org.apache.camel.spi.annotations.ConstantProvider"
block|}
argument_list|)
DECL|class|ConstantProviderProcessor
specifier|public
class|class
name|ConstantProviderProcessor
extends|extends
name|AbstractCamelAnnotationProcessor
block|{
DECL|method|acceptClass (Element element)
name|boolean
name|acceptClass
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|doProcess (Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)
specifier|protected
name|void
name|doProcess
parameter_list|(
name|Set
argument_list|<
name|?
extends|extends
name|TypeElement
argument_list|>
name|annotations
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|)
throws|throws
name|Exception
block|{
name|TypeElement
name|constantAnnotationType
init|=
name|this
operator|.
name|processingEnv
operator|.
name|getElementUtils
argument_list|()
operator|.
name|getTypeElement
argument_list|(
literal|"org.apache.camel.spi.annotations.ConstantProvider"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|elements
init|=
name|roundEnv
operator|.
name|getElementsAnnotatedWith
argument_list|(
name|constantAnnotationType
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|constantClasses
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Element
name|element
range|:
name|elements
control|)
block|{
if|if
condition|(
name|element
operator|instanceof
name|TypeElement
condition|)
block|{
name|TypeElement
name|te
init|=
operator|(
name|TypeElement
operator|)
name|element
decl_stmt|;
comment|// we only support top-level classes (not inner classes)
if|if
condition|(
operator|!
name|te
operator|.
name|getNestingKind
argument_list|()
operator|.
name|isNested
argument_list|()
operator|&&
name|acceptClass
argument_list|(
name|te
argument_list|)
condition|)
block|{
specifier|final
name|String
name|javaTypeName
init|=
name|canonicalClassName
argument_list|(
name|te
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|constantClasses
operator|.
name|put
argument_list|(
name|javaTypeName
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// skip all converter classes from core as we just want to use the optimized TypeConverterLoader files
name|constantClasses
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|String
name|fqn
init|=
name|v
operator|.
name|getAnnotation
argument_list|(
name|ConstantProvider
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|String
operator|::
name|compareToIgnoreCase
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Element
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|v
operator|.
name|getEnclosedElements
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|VariableElement
name|field
range|:
name|ElementFilter
operator|.
name|fieldsIn
argument_list|(
name|set
argument_list|)
control|)
block|{
name|TypeMirror
name|fieldType
init|=
name|field
operator|.
name|asType
argument_list|()
decl_stmt|;
name|String
name|fullTypeClassName
init|=
name|fieldType
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|fullTypeClassName
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|field
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|text
init|=
operator|(
name|String
operator|)
name|field
operator|.
name|getConstantValue
argument_list|()
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|dumpExceptionToErrorFile
argument_list|(
literal|"camel-apt-error.log"
argument_list|,
literal|"Name: "
operator|+
name|field
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"="
operator|+
name|text
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|fields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|generateConstantProviderClass
argument_list|(
name|fqn
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|generateConstantProviderClass (String fqn, Map<String, String> fields)
specifier|private
name|void
name|generateConstantProviderClass
parameter_list|(
name|String
name|fqn
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|)
block|{
name|String
name|pn
init|=
name|fqn
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fqn
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|cn
init|=
name|fqn
operator|.
name|substring
argument_list|(
name|fqn
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Writer
name|w
init|=
literal|null
decl_stmt|;
try|try
block|{
name|JavaFileObject
name|src
init|=
name|processingEnv
operator|.
name|getFiler
argument_list|()
operator|.
name|createSourceFile
argument_list|(
name|fqn
argument_list|)
decl_stmt|;
name|w
operator|=
name|src
operator|.
name|openWriter
argument_list|()
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"/* Generated by org.apache.camel:apt */\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"package "
operator|+
name|pn
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"import java.util.HashMap;\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"import java.util.Map;\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"/**\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|" * Source code generated by org.apache.camel:apt\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|" */\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"public class "
operator|+
name|cn
operator|+
literal|" {\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"    private static final Map<String, String> MAP;\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"    static {\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"        Map<String, String> map = new HashMap<>("
operator|+
name|fields
operator|.
name|size
argument_list|()
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|fields
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|w
operator|.
name|write
argument_list|(
literal|"        map.put(\""
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"\", \""
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|"\");\n"
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|write
argument_list|(
literal|"        MAP = map;\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"    public static String provider(String key) {\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"        return MAP.get(key);\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|processingEnv
operator|.
name|getMessager
argument_list|()
operator|.
name|printMessage
argument_list|(
name|Diagnostic
operator|.
name|Kind
operator|.
name|ERROR
argument_list|,
literal|"Unable to generate source code file: "
operator|+
name|fqn
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|dumpExceptionToErrorFile
argument_list|(
literal|"camel-apt-error.log"
argument_list|,
literal|"Unable to generate source code file: "
operator|+
name|fqn
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

