begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.tools.apt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|RoundEnvironment
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|SupportedAnnotationTypes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|AnnotationMirror
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|TypeElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|FileObject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|StandardLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|annotations
operator|.
name|ServiceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|annotations
operator|.
name|SubServiceFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
operator|.
name|Strings
operator|.
name|canonicalClassName
import|;
end_import

begin_class
annotation|@
name|SupportedAnnotationTypes
argument_list|(
block|{
literal|"org.apache.camel.spi.annotations.*"
block|}
argument_list|)
DECL|class|SpiProcessor
specifier|public
class|class
name|SpiProcessor
extends|extends
name|AbstractCamelAnnotationProcessor
block|{
annotation|@
name|Override
DECL|method|doProcess (Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)
specifier|protected
name|void
name|doProcess
parameter_list|(
name|Set
argument_list|<
name|?
extends|extends
name|TypeElement
argument_list|>
name|annotations
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|)
throws|throws
name|Exception
block|{
name|roundEnv
operator|.
name|getRootElements
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|instanceof
name|TypeElement
argument_list|)
operator|.
name|map
argument_list|(
name|TypeElement
operator|.
name|class
operator|::
name|cast
argument_list|)
operator|.
name|forEach
argument_list|(
name|this
operator|::
name|processServiceFactory
argument_list|)
expr_stmt|;
block|}
DECL|method|processServiceFactory (TypeElement element)
specifier|private
name|void
name|processServiceFactory
parameter_list|(
name|TypeElement
name|element
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|javaTypeName
init|=
name|canonicalClassName
argument_list|(
name|element
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AnnotationMirror
name|pam
range|:
name|element
operator|.
name|getAnnotationMirrors
argument_list|()
control|)
block|{
name|ServiceFactory
name|sf
init|=
name|pam
operator|.
name|getAnnotationType
argument_list|()
operator|.
name|asElement
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|ServiceFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
name|String
name|pvals
init|=
name|pam
operator|.
name|getElementValues
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pval
range|:
name|pvals
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|FileObject
name|resource
init|=
name|processingEnv
operator|.
name|getFiler
argument_list|()
operator|.
name|createResource
argument_list|(
name|StandardLocation
operator|.
name|CLASS_OUTPUT
argument_list|,
literal|""
argument_list|,
literal|"META-INF/services/org/apache/camel/"
operator|+
name|sf
operator|.
name|value
argument_list|()
operator|+
literal|"/"
operator|+
name|pval
argument_list|,
name|element
argument_list|)
decl_stmt|;
try|try
init|(
name|Writer
name|w
init|=
name|resource
operator|.
name|openWriter
argument_list|()
init|)
block|{
name|w
operator|.
name|append
argument_list|(
literal|"# Generated by camel annotation processor\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|append
argument_list|(
literal|"class="
argument_list|)
operator|.
name|append
argument_list|(
name|javaTypeName
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|AnnotationMirror
name|am
range|:
name|element
operator|.
name|getAnnotationMirrors
argument_list|()
control|)
block|{
name|SubServiceFactory
name|factory
init|=
name|am
operator|.
name|getAnnotationType
argument_list|()
operator|.
name|asElement
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|SubServiceFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
name|String
name|key
init|=
name|factory
operator|.
name|value
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|am
operator|.
name|getElementValues
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|w
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|".class="
argument_list|)
operator|.
name|append
argument_list|(
name|val
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

