begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.tools.apt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|ProcessingEnvironment
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|RoundEnvironment
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|ElementKind
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|TypeElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|VariableElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|type
operator|.
name|TypeMirror
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|util
operator|.
name|ElementFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|util
operator|.
name|Elements
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElementRef
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElements
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
operator|.
name|JsonSchemaHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
operator|.
name|Strings
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|AnnotationProcessorHelper
operator|.
name|findJavaDoc
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|AnnotationProcessorHelper
operator|.
name|findTypeElement
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|AnnotationProcessorHelper
operator|.
name|processFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
operator|.
name|JsonSchemaHelper
operator|.
name|sanitizeDescription
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
operator|.
name|Strings
operator|.
name|canonicalClassName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
operator|.
name|Strings
operator|.
name|isNullOrEmpty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
operator|.
name|Strings
operator|.
name|safeNull
import|;
end_import

begin_comment
comment|/**  * Process camel-spring's<camelContext> and generate json schema documentation  */
end_comment

begin_class
DECL|class|SpringAnnotationProcessorHelper
specifier|public
class|class
name|SpringAnnotationProcessorHelper
block|{
DECL|method|processModelClass (final ProcessingEnvironment processingEnv, final RoundEnvironment roundEnv, final TypeElement classElement)
specifier|protected
name|void
name|processModelClass
parameter_list|(
specifier|final
name|ProcessingEnvironment
name|processingEnv
parameter_list|,
specifier|final
name|RoundEnvironment
name|roundEnv
parameter_list|,
specifier|final
name|TypeElement
name|classElement
parameter_list|)
block|{
specifier|final
name|String
name|javaTypeName
init|=
name|canonicalClassName
argument_list|(
name|classElement
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|packageName
init|=
name|javaTypeName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|javaTypeName
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
comment|// skip abstract classes
if|if
condition|(
name|classElement
operator|.
name|getModifiers
argument_list|()
operator|.
name|contains
argument_list|(
name|Modifier
operator|.
name|ABSTRACT
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|XmlRootElement
name|rootElement
init|=
name|classElement
operator|.
name|getAnnotation
argument_list|(
name|XmlRootElement
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootElement
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|aName
init|=
name|rootElement
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|aName
argument_list|)
operator|||
literal|"##default"
operator|.
name|equals
argument_list|(
name|aName
argument_list|)
condition|)
block|{
name|XmlType
name|typeElement
init|=
name|classElement
operator|.
name|getAnnotation
argument_list|(
name|XmlType
operator|.
name|class
argument_list|)
decl_stmt|;
name|aName
operator|=
name|typeElement
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
specifier|final
name|String
name|name
init|=
name|aName
decl_stmt|;
comment|// lets use the xsd name as the file name
name|String
name|fileName
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|name
argument_list|)
operator|||
literal|"##default"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|fileName
operator|=
name|classElement
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|".json"
expr_stmt|;
block|}
else|else
block|{
name|fileName
operator|=
name|name
operator|+
literal|".json"
expr_stmt|;
block|}
comment|// write json schema
name|processFile
argument_list|(
name|processingEnv
argument_list|,
name|packageName
argument_list|,
name|fileName
argument_list|,
name|writer
lambda|->
name|writeJSonSchemeDocumentation
argument_list|(
name|processingEnv
argument_list|,
name|writer
argument_list|,
name|roundEnv
argument_list|,
name|classElement
argument_list|,
name|rootElement
argument_list|,
name|javaTypeName
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeJSonSchemeDocumentation (ProcessingEnvironment processingEnv, PrintWriter writer, RoundEnvironment roundEnv, TypeElement classElement, XmlRootElement rootElement, String javaTypeName, String modelName)
specifier|protected
name|void
name|writeJSonSchemeDocumentation
parameter_list|(
name|ProcessingEnvironment
name|processingEnv
parameter_list|,
name|PrintWriter
name|writer
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|,
name|TypeElement
name|classElement
parameter_list|,
name|XmlRootElement
name|rootElement
parameter_list|,
name|String
name|javaTypeName
parameter_list|,
name|String
name|modelName
parameter_list|)
block|{
comment|// gather eip information
name|EipModel
name|eipModel
init|=
name|findEipModelProperties
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|classElement
argument_list|,
name|javaTypeName
argument_list|,
name|modelName
argument_list|)
decl_stmt|;
comment|// collect eip information
name|Set
argument_list|<
name|EipOption
argument_list|>
name|eipOptions
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
operator|new
name|EipOptionComparator
argument_list|(
name|eipModel
argument_list|)
argument_list|)
decl_stmt|;
name|findClassProperties
argument_list|(
name|processingEnv
argument_list|,
name|writer
argument_list|,
name|roundEnv
argument_list|,
name|eipOptions
argument_list|,
name|classElement
argument_list|,
name|classElement
argument_list|,
literal|""
argument_list|,
name|modelName
argument_list|)
expr_stmt|;
name|String
name|json
init|=
name|createParameterJsonSchema
argument_list|(
name|eipModel
argument_list|,
name|eipOptions
argument_list|)
decl_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
DECL|method|createParameterJsonSchema (EipModel eipModel, Set<EipOption> options)
specifier|public
name|String
name|createParameterJsonSchema
parameter_list|(
name|EipModel
name|eipModel
parameter_list|,
name|Set
argument_list|<
name|EipOption
argument_list|>
name|options
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{"
argument_list|)
decl_stmt|;
comment|// eip model
name|buffer
operator|.
name|append
argument_list|(
literal|"\n \"model\": {"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"kind\": \""
argument_list|)
operator|.
name|append
argument_list|(
literal|"model"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"name\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|eipModel
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
if|if
condition|(
name|eipModel
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"title\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|eipModel
operator|.
name|getTitle
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// fallback and use name as title
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"title\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|Strings
operator|.
name|asTitle
argument_list|(
name|eipModel
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"description\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|safeNull
argument_list|(
name|eipModel
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"javaType\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|eipModel
operator|.
name|getJavaType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"label\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|safeNull
argument_list|(
name|eipModel
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"deprecated\": false,"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"input\": false,"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"output\": false"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n  },"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n  \"properties\": {"
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|EipOption
name|entry
range|:
name|options
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    "
argument_list|)
expr_stmt|;
comment|// as its json we need to sanitize the docs
name|String
name|doc
init|=
name|entry
operator|.
name|getDocumentation
argument_list|()
decl_stmt|;
name|doc
operator|=
name|sanitizeDescription
argument_list|(
name|doc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|JsonSchemaHelper
operator|.
name|toJson
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
name|entry
operator|.
name|isRequired
argument_list|()
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|,
name|entry
operator|.
name|getDefaultValue
argument_list|()
argument_list|,
name|doc
argument_list|,
name|entry
operator|.
name|isDeprecated
argument_list|()
argument_list|,
name|entry
operator|.
name|getDeprecationNote
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|entry
operator|.
name|isEnumType
argument_list|()
argument_list|,
name|entry
operator|.
name|getEnums
argument_list|()
argument_list|,
name|entry
operator|.
name|isOneOf
argument_list|()
argument_list|,
name|entry
operator|.
name|getOneOfTypes
argument_list|()
argument_list|,
name|entry
operator|.
name|isAsPredicate
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n  }"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n}\n"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|findEipModelProperties (ProcessingEnvironment processingEnv, RoundEnvironment roundEnv, TypeElement classElement, String javaTypeName, String name)
specifier|protected
name|EipModel
name|findEipModelProperties
parameter_list|(
name|ProcessingEnvironment
name|processingEnv
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|,
name|TypeElement
name|classElement
parameter_list|,
name|String
name|javaTypeName
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|EipModel
name|model
init|=
operator|new
name|EipModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|setJavaType
argument_list|(
name|javaTypeName
argument_list|)
expr_stmt|;
name|model
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Metadata
name|metadata
init|=
name|classElement
operator|.
name|getAnnotation
argument_list|(
name|Metadata
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|metadata
operator|.
name|label
argument_list|()
argument_list|)
condition|)
block|{
name|model
operator|.
name|setLabel
argument_list|(
name|metadata
operator|.
name|label
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|metadata
operator|.
name|title
argument_list|()
argument_list|)
condition|)
block|{
name|model
operator|.
name|setTitle
argument_list|(
name|metadata
operator|.
name|title
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// favor to use class javadoc of component as description
if|if
condition|(
name|model
operator|.
name|getJavaType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Elements
name|elementUtils
init|=
name|processingEnv
operator|.
name|getElementUtils
argument_list|()
decl_stmt|;
name|TypeElement
name|typeElement
init|=
name|findTypeElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeElement
operator|!=
literal|null
condition|)
block|{
name|String
name|doc
init|=
name|elementUtils
operator|.
name|getDocComment
argument_list|(
name|typeElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
comment|// need to sanitize the description first (we only want a
comment|// summary)
name|doc
operator|=
name|sanitizeDescription
argument_list|(
name|doc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// the javadoc may actually be empty, so only change the doc
comment|// if we got something
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|model
operator|.
name|setDescription
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|model
return|;
block|}
DECL|method|findClassProperties (ProcessingEnvironment processingEnv, PrintWriter writer, RoundEnvironment roundEnv, Set<EipOption> eipOptions, TypeElement originalClassType, TypeElement classElement, String prefix, String modelName)
specifier|protected
name|void
name|findClassProperties
parameter_list|(
name|ProcessingEnvironment
name|processingEnv
parameter_list|,
name|PrintWriter
name|writer
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|,
name|Set
argument_list|<
name|EipOption
argument_list|>
name|eipOptions
parameter_list|,
name|TypeElement
name|originalClassType
parameter_list|,
name|TypeElement
name|classElement
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|modelName
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|VariableElement
argument_list|>
name|fieldElements
init|=
name|ElementFilter
operator|.
name|fieldsIn
argument_list|(
name|classElement
operator|.
name|getEnclosedElements
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|VariableElement
name|fieldElement
range|:
name|fieldElements
control|)
block|{
name|String
name|fieldName
init|=
name|fieldElement
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|XmlAttribute
name|attribute
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|XmlAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|attribute
operator|!=
literal|null
condition|)
block|{
name|boolean
name|skip
init|=
name|processAttribute
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|originalClassType
argument_list|,
name|classElement
argument_list|,
name|fieldElement
argument_list|,
name|fieldName
argument_list|,
name|attribute
argument_list|,
name|eipOptions
argument_list|,
name|prefix
argument_list|,
name|modelName
argument_list|)
decl_stmt|;
if|if
condition|(
name|skip
condition|)
block|{
continue|continue;
block|}
block|}
name|XmlElements
name|elements
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|XmlElements
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|elements
operator|!=
literal|null
condition|)
block|{
name|processElements
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|classElement
argument_list|,
name|elements
argument_list|,
name|fieldElement
argument_list|,
name|eipOptions
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
name|XmlElementRef
name|elementRef
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|XmlElementRef
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|elementRef
operator|!=
literal|null
condition|)
block|{
name|processElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|classElement
argument_list|,
literal|null
argument_list|,
name|elementRef
argument_list|,
name|fieldElement
argument_list|,
name|eipOptions
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
name|XmlElement
name|element
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|XmlElement
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"rests"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|processRests
argument_list|(
name|roundEnv
argument_list|,
name|classElement
argument_list|,
name|element
argument_list|,
name|fieldElement
argument_list|,
name|fieldName
argument_list|,
name|eipOptions
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"routes"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|processRoutes
argument_list|(
name|roundEnv
argument_list|,
name|classElement
argument_list|,
name|element
argument_list|,
name|fieldElement
argument_list|,
name|fieldName
argument_list|,
name|eipOptions
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|classElement
argument_list|,
name|element
argument_list|,
literal|null
argument_list|,
name|fieldElement
argument_list|,
name|eipOptions
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// check super classes which may also have fields
name|TypeElement
name|baseTypeElement
init|=
literal|null
decl_stmt|;
name|TypeMirror
name|superclass
init|=
name|classElement
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superclass
operator|!=
literal|null
condition|)
block|{
name|String
name|superClassName
init|=
name|canonicalClassName
argument_list|(
name|superclass
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|baseTypeElement
operator|=
name|findTypeElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|superClassName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|baseTypeElement
operator|!=
literal|null
condition|)
block|{
name|classElement
operator|=
name|baseTypeElement
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
DECL|method|processAttribute (ProcessingEnvironment processingEnv, RoundEnvironment roundEnv, TypeElement originalClassType, TypeElement classElement, VariableElement fieldElement, String fieldName, XmlAttribute attribute, Set<EipOption> eipOptions, String prefix, String modelName)
specifier|private
name|boolean
name|processAttribute
parameter_list|(
name|ProcessingEnvironment
name|processingEnv
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|,
name|TypeElement
name|originalClassType
parameter_list|,
name|TypeElement
name|classElement
parameter_list|,
name|VariableElement
name|fieldElement
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|XmlAttribute
name|attribute
parameter_list|,
name|Set
argument_list|<
name|EipOption
argument_list|>
name|eipOptions
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|modelName
parameter_list|)
block|{
name|Elements
name|elementUtils
init|=
name|processingEnv
operator|.
name|getElementUtils
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|attribute
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|name
argument_list|)
operator|||
literal|"##default"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
name|fieldName
expr_stmt|;
block|}
name|name
operator|=
name|prefix
operator|+
name|name
expr_stmt|;
name|TypeMirror
name|fieldType
init|=
name|fieldElement
operator|.
name|asType
argument_list|()
decl_stmt|;
name|String
name|fieldTypeName
init|=
name|fieldType
operator|.
name|toString
argument_list|()
decl_stmt|;
name|TypeElement
name|fieldTypeElement
init|=
name|findTypeElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|fieldTypeName
argument_list|)
decl_stmt|;
name|String
name|defaultValue
init|=
name|findDefaultValue
argument_list|(
name|fieldElement
argument_list|,
name|fieldTypeName
argument_list|)
decl_stmt|;
name|String
name|docComment
init|=
name|findJavaDoc
argument_list|(
name|elementUtils
argument_list|,
name|fieldElement
argument_list|,
name|fieldName
argument_list|,
name|name
argument_list|,
name|classElement
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|docComment
argument_list|)
condition|)
block|{
name|Metadata
name|metadata
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|Metadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|docComment
operator|=
name|metadata
operator|!=
literal|null
condition|?
name|metadata
operator|.
name|description
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
name|boolean
name|required
init|=
name|attribute
operator|.
name|required
argument_list|()
decl_stmt|;
comment|// metadata may overrule element required
name|required
operator|=
name|findRequired
argument_list|(
name|fieldElement
argument_list|,
name|required
argument_list|)
expr_stmt|;
comment|// gather enums
name|Set
argument_list|<
name|String
argument_list|>
name|enums
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|isEnum
init|=
name|fieldTypeElement
operator|!=
literal|null
operator|&&
name|fieldTypeElement
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|ENUM
decl_stmt|;
if|if
condition|(
name|isEnum
condition|)
block|{
name|TypeElement
name|enumClass
init|=
name|findTypeElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|fieldTypeElement
operator|.
name|asType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// find all the enum constants which has the possible enum value
comment|// that can be used
name|List
argument_list|<
name|VariableElement
argument_list|>
name|fields
init|=
name|ElementFilter
operator|.
name|fieldsIn
argument_list|(
name|enumClass
operator|.
name|getEnclosedElements
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|VariableElement
name|var
range|:
name|fields
control|)
block|{
if|if
condition|(
name|var
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|ENUM_CONSTANT
condition|)
block|{
name|String
name|val
init|=
name|var
operator|.
name|toString
argument_list|()
decl_stmt|;
name|enums
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|displayName
init|=
literal|null
decl_stmt|;
name|Metadata
name|metadata
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|Metadata
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
name|displayName
operator|=
name|metadata
operator|.
name|displayName
argument_list|()
expr_stmt|;
block|}
name|boolean
name|deprecated
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|String
name|deprecationNote
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
name|deprecationNote
operator|=
name|metadata
operator|.
name|deprecationNote
argument_list|()
expr_stmt|;
block|}
comment|// special for id as its inherited from camel-core
if|if
condition|(
literal|"id"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|isNullOrEmpty
argument_list|(
name|docComment
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"CamelContextFactoryBean"
operator|.
name|equals
argument_list|(
name|originalClassType
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|docComment
operator|=
literal|"Sets the id (name) of this CamelContext"
expr_stmt|;
block|}
else|else
block|{
name|docComment
operator|=
literal|"Sets the id of this node"
expr_stmt|;
block|}
block|}
name|EipOption
name|ep
init|=
operator|new
name|EipOption
argument_list|(
name|name
argument_list|,
name|displayName
argument_list|,
literal|"attribute"
argument_list|,
name|fieldTypeName
argument_list|,
name|required
argument_list|,
name|defaultValue
argument_list|,
name|docComment
argument_list|,
name|deprecated
argument_list|,
name|deprecationNote
argument_list|,
name|isEnum
argument_list|,
name|enums
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|eipOptions
operator|.
name|add
argument_list|(
name|ep
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**      * Special for processing an @XmlElement routes field      */
DECL|method|processRoutes (RoundEnvironment roundEnv, TypeElement originalClassType, XmlElement element, VariableElement fieldElement, String fieldName, Set<EipOption> eipOptions, String prefix)
specifier|private
name|void
name|processRoutes
parameter_list|(
name|RoundEnvironment
name|roundEnv
parameter_list|,
name|TypeElement
name|originalClassType
parameter_list|,
name|XmlElement
name|element
parameter_list|,
name|VariableElement
name|fieldElement
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Set
argument_list|<
name|EipOption
argument_list|>
name|eipOptions
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|TypeMirror
name|fieldType
init|=
name|fieldElement
operator|.
name|asType
argument_list|()
decl_stmt|;
name|String
name|fieldTypeName
init|=
name|fieldType
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|oneOfTypes
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|oneOfTypes
operator|.
name|add
argument_list|(
literal|"route"
argument_list|)
expr_stmt|;
name|EipOption
name|ep
init|=
operator|new
name|EipOption
argument_list|(
literal|"route"
argument_list|,
literal|"Route"
argument_list|,
literal|"element"
argument_list|,
name|fieldTypeName
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|,
literal|"Contains the Camel routes"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|oneOfTypes
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|eipOptions
operator|.
name|add
argument_list|(
name|ep
argument_list|)
expr_stmt|;
block|}
comment|/**      * Special for processing an @XmlElement rests field      */
DECL|method|processRests (RoundEnvironment roundEnv, TypeElement originalClassType, XmlElement element, VariableElement fieldElement, String fieldName, Set<EipOption> eipOptions, String prefix)
specifier|private
name|void
name|processRests
parameter_list|(
name|RoundEnvironment
name|roundEnv
parameter_list|,
name|TypeElement
name|originalClassType
parameter_list|,
name|XmlElement
name|element
parameter_list|,
name|VariableElement
name|fieldElement
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Set
argument_list|<
name|EipOption
argument_list|>
name|eipOptions
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|TypeMirror
name|fieldType
init|=
name|fieldElement
operator|.
name|asType
argument_list|()
decl_stmt|;
name|String
name|fieldTypeName
init|=
name|fieldType
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|oneOfTypes
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|oneOfTypes
operator|.
name|add
argument_list|(
literal|"rest"
argument_list|)
expr_stmt|;
name|EipOption
name|ep
init|=
operator|new
name|EipOption
argument_list|(
literal|"rest"
argument_list|,
literal|"Rest"
argument_list|,
literal|"element"
argument_list|,
name|fieldTypeName
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|,
literal|"Contains the rest services defined using the rest-dsl"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|oneOfTypes
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|eipOptions
operator|.
name|add
argument_list|(
name|ep
argument_list|)
expr_stmt|;
block|}
DECL|method|processElement (ProcessingEnvironment processingEnv, RoundEnvironment roundEnv, TypeElement classElement, XmlElement element, XmlElementRef elementRef, VariableElement fieldElement, Set<EipOption> eipOptions, String prefix)
specifier|private
name|void
name|processElement
parameter_list|(
name|ProcessingEnvironment
name|processingEnv
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|,
name|TypeElement
name|classElement
parameter_list|,
name|XmlElement
name|element
parameter_list|,
name|XmlElementRef
name|elementRef
parameter_list|,
name|VariableElement
name|fieldElement
parameter_list|,
name|Set
argument_list|<
name|EipOption
argument_list|>
name|eipOptions
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|Elements
name|elementUtils
init|=
name|processingEnv
operator|.
name|getElementUtils
argument_list|()
decl_stmt|;
name|String
name|fieldName
decl_stmt|;
name|fieldName
operator|=
name|fieldElement
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|element
operator|!=
literal|null
operator|||
name|elementRef
operator|!=
literal|null
condition|)
block|{
name|String
name|kind
init|=
literal|"element"
decl_stmt|;
name|String
name|name
init|=
name|element
operator|!=
literal|null
condition|?
name|element
operator|.
name|name
argument_list|()
else|:
name|elementRef
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|name
argument_list|)
operator|||
literal|"##default"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
name|fieldName
expr_stmt|;
block|}
name|name
operator|=
name|prefix
operator|+
name|name
expr_stmt|;
name|TypeMirror
name|fieldType
init|=
name|fieldElement
operator|.
name|asType
argument_list|()
decl_stmt|;
name|String
name|fieldTypeName
init|=
name|fieldType
operator|.
name|toString
argument_list|()
decl_stmt|;
name|TypeElement
name|fieldTypeElement
init|=
name|findTypeElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|fieldTypeName
argument_list|)
decl_stmt|;
name|String
name|defaultValue
init|=
name|findDefaultValue
argument_list|(
name|fieldElement
argument_list|,
name|fieldTypeName
argument_list|)
decl_stmt|;
name|String
name|docComment
init|=
name|findJavaDoc
argument_list|(
name|elementUtils
argument_list|,
name|fieldElement
argument_list|,
name|fieldName
argument_list|,
name|name
argument_list|,
name|classElement
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|docComment
argument_list|)
condition|)
block|{
name|Metadata
name|metadata
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|Metadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|docComment
operator|=
name|metadata
operator|!=
literal|null
condition|?
name|metadata
operator|.
name|description
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
name|boolean
name|required
init|=
name|element
operator|!=
literal|null
condition|?
name|element
operator|.
name|required
argument_list|()
else|:
name|elementRef
operator|.
name|required
argument_list|()
decl_stmt|;
comment|// metadata may overrule element required
name|required
operator|=
name|findRequired
argument_list|(
name|fieldElement
argument_list|,
name|required
argument_list|)
expr_stmt|;
comment|// gather enums
name|Set
argument_list|<
name|String
argument_list|>
name|enums
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|isEnum
init|=
name|fieldTypeElement
operator|!=
literal|null
operator|&&
name|fieldTypeElement
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|ENUM
decl_stmt|;
if|if
condition|(
name|isEnum
condition|)
block|{
name|TypeElement
name|enumClass
init|=
name|findTypeElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|fieldTypeElement
operator|.
name|asType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// find all the enum constants which has the possible enum value
comment|// that can be used
name|List
argument_list|<
name|VariableElement
argument_list|>
name|fields
init|=
name|ElementFilter
operator|.
name|fieldsIn
argument_list|(
name|enumClass
operator|.
name|getEnclosedElements
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|VariableElement
name|var
range|:
name|fields
control|)
block|{
if|if
condition|(
name|var
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|ENUM_CONSTANT
condition|)
block|{
name|String
name|val
init|=
name|var
operator|.
name|toString
argument_list|()
decl_stmt|;
name|enums
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// is it a definition/factory-bean type then its a oneOf
name|TreeSet
name|oneOfTypes
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldTypeName
operator|.
name|endsWith
argument_list|(
literal|"Definition"
argument_list|)
operator|||
name|fieldTypeName
operator|.
name|endsWith
argument_list|(
literal|"FactoryBean"
argument_list|)
condition|)
block|{
name|TypeElement
name|definitionClass
init|=
name|findTypeElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|fieldTypeElement
operator|.
name|asType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|definitionClass
operator|!=
literal|null
condition|)
block|{
name|XmlRootElement
name|rootElement
init|=
name|definitionClass
operator|.
name|getAnnotation
argument_list|(
name|XmlRootElement
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootElement
operator|!=
literal|null
condition|)
block|{
name|String
name|childName
init|=
name|rootElement
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|childName
operator|!=
literal|null
condition|)
block|{
name|oneOfTypes
operator|.
name|add
argument_list|(
name|childName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|fieldTypeName
operator|.
name|endsWith
argument_list|(
literal|"Definition>"
argument_list|)
operator|||
name|fieldTypeName
operator|.
name|endsWith
argument_list|(
literal|"FactoryBean>"
argument_list|)
condition|)
block|{
comment|// its a list so we need to load the generic type
name|String
name|typeName
init|=
name|Strings
operator|.
name|between
argument_list|(
name|fieldTypeName
argument_list|,
literal|"<"
argument_list|,
literal|">"
argument_list|)
decl_stmt|;
name|TypeElement
name|definitionClass
init|=
name|findTypeElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|definitionClass
operator|!=
literal|null
condition|)
block|{
name|XmlRootElement
name|rootElement
init|=
name|definitionClass
operator|.
name|getAnnotation
argument_list|(
name|XmlRootElement
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootElement
operator|!=
literal|null
condition|)
block|{
name|String
name|childName
init|=
name|rootElement
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|childName
operator|!=
literal|null
condition|)
block|{
name|oneOfTypes
operator|.
name|add
argument_list|(
name|childName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|boolean
name|oneOf
init|=
operator|!
name|oneOfTypes
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|boolean
name|asPredicate
init|=
literal|false
decl_stmt|;
name|String
name|displayName
init|=
literal|null
decl_stmt|;
name|Metadata
name|metadata
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|Metadata
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
name|displayName
operator|=
name|metadata
operator|.
name|displayName
argument_list|()
expr_stmt|;
block|}
name|boolean
name|deprecated
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|String
name|deprecationNote
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
name|deprecationNote
operator|=
name|metadata
operator|.
name|deprecationNote
argument_list|()
expr_stmt|;
block|}
name|EipOption
name|ep
init|=
operator|new
name|EipOption
argument_list|(
name|name
argument_list|,
name|displayName
argument_list|,
name|kind
argument_list|,
name|fieldTypeName
argument_list|,
name|required
argument_list|,
name|defaultValue
argument_list|,
name|docComment
argument_list|,
name|deprecated
argument_list|,
name|deprecationNote
argument_list|,
name|isEnum
argument_list|,
name|enums
argument_list|,
name|oneOf
argument_list|,
name|oneOfTypes
argument_list|,
name|asPredicate
argument_list|)
decl_stmt|;
name|eipOptions
operator|.
name|add
argument_list|(
name|ep
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processElements (ProcessingEnvironment processingEnv, RoundEnvironment roundEnv, TypeElement classElement, XmlElements elements, VariableElement fieldElement, Set<EipOption> eipOptions, String prefix)
specifier|private
name|void
name|processElements
parameter_list|(
name|ProcessingEnvironment
name|processingEnv
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|,
name|TypeElement
name|classElement
parameter_list|,
name|XmlElements
name|elements
parameter_list|,
name|VariableElement
name|fieldElement
parameter_list|,
name|Set
argument_list|<
name|EipOption
argument_list|>
name|eipOptions
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|Elements
name|elementUtils
init|=
name|processingEnv
operator|.
name|getElementUtils
argument_list|()
decl_stmt|;
name|String
name|fieldName
decl_stmt|;
name|fieldName
operator|=
name|fieldElement
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|elements
operator|!=
literal|null
condition|)
block|{
name|String
name|kind
init|=
literal|"element"
decl_stmt|;
name|String
name|name
init|=
name|fieldName
decl_stmt|;
name|name
operator|=
name|prefix
operator|+
name|name
expr_stmt|;
name|TypeMirror
name|fieldType
init|=
name|fieldElement
operator|.
name|asType
argument_list|()
decl_stmt|;
name|String
name|fieldTypeName
init|=
name|fieldType
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|defaultValue
init|=
name|findDefaultValue
argument_list|(
name|fieldElement
argument_list|,
name|fieldTypeName
argument_list|)
decl_stmt|;
name|String
name|docComment
init|=
name|findJavaDoc
argument_list|(
name|elementUtils
argument_list|,
name|fieldElement
argument_list|,
name|fieldName
argument_list|,
name|name
argument_list|,
name|classElement
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|docComment
argument_list|)
condition|)
block|{
name|Metadata
name|metadata
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|Metadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|docComment
operator|=
name|metadata
operator|!=
literal|null
condition|?
name|metadata
operator|.
name|description
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
name|boolean
name|required
init|=
literal|false
decl_stmt|;
name|required
operator|=
name|findRequired
argument_list|(
name|fieldElement
argument_list|,
name|required
argument_list|)
expr_stmt|;
comment|// gather oneOf of the elements
name|Set
argument_list|<
name|String
argument_list|>
name|oneOfTypes
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|XmlElement
name|element
range|:
name|elements
operator|.
name|value
argument_list|()
control|)
block|{
name|String
name|child
init|=
name|element
operator|.
name|name
argument_list|()
decl_stmt|;
name|oneOfTypes
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|String
name|displayName
init|=
literal|null
decl_stmt|;
name|Metadata
name|metadata
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|Metadata
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
name|displayName
operator|=
name|metadata
operator|.
name|displayName
argument_list|()
expr_stmt|;
block|}
name|boolean
name|deprecated
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|String
name|deprecationNote
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
name|deprecationNote
operator|=
name|metadata
operator|.
name|deprecationNote
argument_list|()
expr_stmt|;
block|}
name|EipOption
name|ep
init|=
operator|new
name|EipOption
argument_list|(
name|name
argument_list|,
name|kind
argument_list|,
name|displayName
argument_list|,
name|fieldTypeName
argument_list|,
name|required
argument_list|,
name|defaultValue
argument_list|,
name|docComment
argument_list|,
name|deprecated
argument_list|,
name|deprecationNote
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|oneOfTypes
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|eipOptions
operator|.
name|add
argument_list|(
name|ep
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findDefaultValue (VariableElement fieldElement, String fieldTypeName)
specifier|private
name|String
name|findDefaultValue
parameter_list|(
name|VariableElement
name|fieldElement
parameter_list|,
name|String
name|fieldTypeName
parameter_list|)
block|{
name|String
name|defaultValue
init|=
literal|null
decl_stmt|;
name|Metadata
name|metadata
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|Metadata
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|metadata
operator|.
name|defaultValue
argument_list|()
argument_list|)
condition|)
block|{
name|defaultValue
operator|=
name|metadata
operator|.
name|defaultValue
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|defaultValue
operator|==
literal|null
condition|)
block|{
comment|// if its a boolean type, then we use false as the default
if|if
condition|(
literal|"boolean"
operator|.
name|equals
argument_list|(
name|fieldTypeName
argument_list|)
operator|||
literal|"java.lang.Boolean"
operator|.
name|equals
argument_list|(
name|fieldTypeName
argument_list|)
condition|)
block|{
name|defaultValue
operator|=
literal|"false"
expr_stmt|;
block|}
block|}
return|return
name|defaultValue
return|;
block|}
DECL|method|findRequired (VariableElement fieldElement, boolean defaultValue)
specifier|private
name|boolean
name|findRequired
parameter_list|(
name|VariableElement
name|fieldElement
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
name|Metadata
name|metadata
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|Metadata
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
return|return
name|metadata
operator|.
name|required
argument_list|()
return|;
block|}
return|return
name|defaultValue
return|;
block|}
DECL|class|EipModel
specifier|private
specifier|static
specifier|final
class|class
name|EipModel
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|title
specifier|private
name|String
name|title
decl_stmt|;
DECL|field|javaType
specifier|private
name|String
name|javaType
decl_stmt|;
DECL|field|label
specifier|private
name|String
name|label
decl_stmt|;
DECL|field|description
specifier|private
name|String
name|description
decl_stmt|;
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getTitle ()
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|title
return|;
block|}
DECL|method|setTitle (String title)
specifier|public
name|void
name|setTitle
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|this
operator|.
name|title
operator|=
name|title
expr_stmt|;
block|}
DECL|method|getJavaType ()
specifier|public
name|String
name|getJavaType
parameter_list|()
block|{
return|return
name|javaType
return|;
block|}
DECL|method|setJavaType (String javaType)
specifier|public
name|void
name|setJavaType
parameter_list|(
name|String
name|javaType
parameter_list|)
block|{
name|this
operator|.
name|javaType
operator|=
name|javaType
expr_stmt|;
block|}
DECL|method|getLabel ()
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|label
return|;
block|}
DECL|method|setLabel (String label)
specifier|public
name|void
name|setLabel
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
block|}
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
DECL|method|setDescription (String description)
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
block|}
DECL|class|EipOption
specifier|private
specifier|static
specifier|final
class|class
name|EipOption
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|displayName
specifier|private
name|String
name|displayName
decl_stmt|;
DECL|field|kind
specifier|private
name|String
name|kind
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|required
specifier|private
name|boolean
name|required
decl_stmt|;
DECL|field|defaultValue
specifier|private
name|String
name|defaultValue
decl_stmt|;
DECL|field|documentation
specifier|private
name|String
name|documentation
decl_stmt|;
DECL|field|deprecated
specifier|private
name|boolean
name|deprecated
decl_stmt|;
DECL|field|deprecationNote
specifier|private
name|String
name|deprecationNote
decl_stmt|;
DECL|field|enumType
specifier|private
name|boolean
name|enumType
decl_stmt|;
DECL|field|enums
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|enums
decl_stmt|;
DECL|field|oneOf
specifier|private
name|boolean
name|oneOf
decl_stmt|;
DECL|field|oneOfTypes
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|oneOfTypes
decl_stmt|;
DECL|field|asPredicate
specifier|private
name|boolean
name|asPredicate
decl_stmt|;
DECL|method|EipOption (String name, String displayName, String kind, String type, boolean required, String defaultValue, String documentation, boolean deprecated, String deprecationNote, boolean enumType, Set<String> enums, boolean oneOf, Set<String> oneOfTypes, boolean asPredicate)
specifier|private
name|EipOption
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|displayName
parameter_list|,
name|String
name|kind
parameter_list|,
name|String
name|type
parameter_list|,
name|boolean
name|required
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|String
name|documentation
parameter_list|,
name|boolean
name|deprecated
parameter_list|,
name|String
name|deprecationNote
parameter_list|,
name|boolean
name|enumType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|enums
parameter_list|,
name|boolean
name|oneOf
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|oneOfTypes
parameter_list|,
name|boolean
name|asPredicate
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|displayName
operator|=
name|displayName
expr_stmt|;
name|this
operator|.
name|kind
operator|=
name|kind
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|required
operator|=
name|required
expr_stmt|;
name|this
operator|.
name|defaultValue
operator|=
name|defaultValue
expr_stmt|;
name|this
operator|.
name|documentation
operator|=
name|documentation
expr_stmt|;
name|this
operator|.
name|deprecated
operator|=
name|deprecated
expr_stmt|;
name|this
operator|.
name|deprecationNote
operator|=
name|deprecationNote
expr_stmt|;
name|this
operator|.
name|enumType
operator|=
name|enumType
expr_stmt|;
name|this
operator|.
name|enums
operator|=
name|enums
expr_stmt|;
name|this
operator|.
name|oneOf
operator|=
name|oneOf
expr_stmt|;
name|this
operator|.
name|oneOfTypes
operator|=
name|oneOfTypes
expr_stmt|;
name|this
operator|.
name|asPredicate
operator|=
name|asPredicate
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getDisplayName ()
specifier|public
name|String
name|getDisplayName
parameter_list|()
block|{
return|return
name|displayName
return|;
block|}
DECL|method|getKind ()
specifier|public
name|String
name|getKind
parameter_list|()
block|{
return|return
name|kind
return|;
block|}
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|isRequired ()
specifier|public
name|boolean
name|isRequired
parameter_list|()
block|{
return|return
name|required
return|;
block|}
DECL|method|getDefaultValue ()
specifier|public
name|String
name|getDefaultValue
parameter_list|()
block|{
return|return
name|defaultValue
return|;
block|}
DECL|method|getDocumentation ()
specifier|public
name|String
name|getDocumentation
parameter_list|()
block|{
return|return
name|documentation
return|;
block|}
DECL|method|isDeprecated ()
specifier|public
name|boolean
name|isDeprecated
parameter_list|()
block|{
return|return
name|deprecated
return|;
block|}
DECL|method|getDeprecationNote ()
specifier|public
name|String
name|getDeprecationNote
parameter_list|()
block|{
return|return
name|deprecationNote
return|;
block|}
DECL|method|isEnumType ()
specifier|public
name|boolean
name|isEnumType
parameter_list|()
block|{
return|return
name|enumType
return|;
block|}
DECL|method|getEnums ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getEnums
parameter_list|()
block|{
return|return
name|enums
return|;
block|}
DECL|method|isOneOf ()
specifier|public
name|boolean
name|isOneOf
parameter_list|()
block|{
return|return
name|oneOf
return|;
block|}
DECL|method|getOneOfTypes ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getOneOfTypes
parameter_list|()
block|{
return|return
name|oneOfTypes
return|;
block|}
DECL|method|isAsPredicate ()
specifier|public
name|boolean
name|isAsPredicate
parameter_list|()
block|{
return|return
name|asPredicate
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|EipOption
name|that
init|=
operator|(
name|EipOption
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
DECL|class|EipOptionComparator
specifier|private
specifier|static
specifier|final
class|class
name|EipOptionComparator
implements|implements
name|Comparator
argument_list|<
name|EipOption
argument_list|>
block|{
DECL|field|model
specifier|private
specifier|final
name|EipModel
name|model
decl_stmt|;
DECL|method|EipOptionComparator (EipModel model)
specifier|private
name|EipOptionComparator
parameter_list|(
name|EipModel
name|model
parameter_list|)
block|{
name|this
operator|.
name|model
operator|=
name|model
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare (EipOption o1, EipOption o2)
specifier|public
name|int
name|compare
parameter_list|(
name|EipOption
name|o1
parameter_list|,
name|EipOption
name|o2
parameter_list|)
block|{
name|int
name|weigth
init|=
name|weigth
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|int
name|weigth2
init|=
name|weigth
argument_list|(
name|o2
argument_list|)
decl_stmt|;
if|if
condition|(
name|weigth
operator|==
name|weigth2
condition|)
block|{
comment|// keep the current order
return|return
literal|1
return|;
block|}
else|else
block|{
comment|// sort according to weight
return|return
name|weigth2
operator|-
name|weigth
return|;
block|}
block|}
DECL|method|weigth (EipOption o)
specifier|private
name|int
name|weigth
parameter_list|(
name|EipOption
name|o
parameter_list|)
block|{
name|String
name|name
init|=
name|o
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// these should be first
if|if
condition|(
literal|"expression"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|10
return|;
block|}
comment|// these should be last
if|if
condition|(
literal|"description"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|-
literal|10
return|;
block|}
elseif|else
if|if
condition|(
literal|"id"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|-
literal|9
return|;
block|}
elseif|else
if|if
condition|(
literal|"pattern"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
literal|"to"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// and pattern only for the to model
return|return
operator|-
literal|8
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

