begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.tools.apt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|Messager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|RoundEnvironment
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|SupportedAnnotationTypes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|TypeElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|Diagnostic
operator|.
name|Kind
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
operator|.
name|Strings
operator|.
name|canonicalClassName
import|;
end_import

begin_comment
comment|/**  * APT compiler plugin to generate JSon Schema for all EIP models and camel-spring's<camelContext> types.  */
end_comment

begin_class
annotation|@
name|SupportedAnnotationTypes
argument_list|(
block|{
literal|"javax.xml.bind.annotation.*"
block|,
literal|"org.apache.camel.spi.Label"
block|}
argument_list|)
DECL|class|ModelAnnotationProcessor
specifier|public
class|class
name|ModelAnnotationProcessor
extends|extends
name|AbstractCamelAnnotationProcessor
block|{
DECL|field|coreProcessor
specifier|private
name|CoreEipAnnotationProcessorHelper
name|coreProcessor
init|=
operator|new
name|CoreEipAnnotationProcessorHelper
argument_list|()
decl_stmt|;
DECL|field|springProcessor
specifier|private
name|SpringAnnotationProcessorHelper
name|springProcessor
init|=
operator|new
name|SpringAnnotationProcessorHelper
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|doProcess (Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)
specifier|protected
name|void
name|doProcess
parameter_list|(
name|Set
argument_list|<
name|?
extends|extends
name|TypeElement
argument_list|>
name|annotations
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|elements
init|=
name|roundEnv
operator|.
name|getElementsAnnotatedWith
argument_list|(
name|XmlRootElement
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Messager
name|messager
init|=
name|processingEnv
operator|.
name|getMessager
argument_list|()
decl_stmt|;
name|messager
operator|.
name|printMessage
argument_list|(
name|Kind
operator|.
name|WARNING
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Found %d elements annotated with XmlRootElement"
argument_list|,
name|elements
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|coreElements
init|=
name|elements
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Element
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|test
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
if|if
condition|(
name|element
operator|instanceof
name|TypeElement
condition|)
block|{
name|TypeElement
name|classElement
init|=
operator|(
name|TypeElement
operator|)
name|element
decl_stmt|;
specifier|final
name|String
name|javaTypeName
init|=
name|canonicalClassName
argument_list|(
name|classElement
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|javaTypeName
operator|.
name|startsWith
argument_list|(
literal|"org.apache.camel.model"
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|messager
operator|.
name|printMessage
argument_list|(
name|Kind
operator|.
name|WARNING
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Found %d core elements"
argument_list|,
name|coreElements
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|springElements
init|=
name|elements
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Element
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|test
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
if|if
condition|(
name|element
operator|instanceof
name|TypeElement
condition|)
block|{
name|TypeElement
name|classElement
init|=
operator|(
name|TypeElement
operator|)
name|element
decl_stmt|;
specifier|final
name|String
name|javaTypeName
init|=
name|canonicalClassName
argument_list|(
name|classElement
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|javaTypeName
operator|.
name|startsWith
argument_list|(
literal|"org.apache.camel.spring"
argument_list|)
operator|||
name|javaTypeName
operator|.
name|startsWith
argument_list|(
literal|"org.apache.camel.core.xml"
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|messager
operator|.
name|printMessage
argument_list|(
name|Kind
operator|.
name|WARNING
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Found %d spring elements"
argument_list|,
name|springElements
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// we want them to be sorted
name|Set
argument_list|<
name|String
argument_list|>
name|propertyPlaceholderDefinitions
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|String
operator|::
name|compareToIgnoreCase
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|it
init|=
name|coreElements
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TypeElement
name|classElement
init|=
operator|(
name|TypeElement
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|coreProcessor
operator|.
name|processModelClass
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|classElement
argument_list|,
name|propertyPlaceholderDefinitions
argument_list|,
operator|!
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|springElements
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TypeElement
name|classElement
init|=
operator|(
name|TypeElement
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|springProcessor
operator|.
name|processModelClass
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|classElement
argument_list|,
operator|!
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

