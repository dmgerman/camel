begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.tools.apt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|AbstractProcessor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|RoundEnvironment
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|SupportedAnnotationTypes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|SourceVersion
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|TypeElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|AnnotationProcessorHelper
operator|.
name|dumpExceptionToErrorFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
operator|.
name|Strings
operator|.
name|canonicalClassName
import|;
end_import

begin_comment
comment|/**  * APT compiler plugin to generate JSon Schema for all EIP models and camel-spring's<camelContext> types.  */
end_comment

begin_class
annotation|@
name|SupportedAnnotationTypes
argument_list|(
block|{
literal|"javax.xml.bind.annotation.*"
block|,
literal|"org.apache.camel.spi.Label"
block|}
argument_list|)
DECL|class|ModelAnnotationProcessor
specifier|public
class|class
name|ModelAnnotationProcessor
extends|extends
name|AbstractProcessor
block|{
DECL|field|coreProcessor
specifier|private
name|CoreEipAnnotationProcessorHelper
name|coreProcessor
init|=
operator|new
name|CoreEipAnnotationProcessorHelper
argument_list|()
decl_stmt|;
DECL|field|springProcessor
specifier|private
name|SpringAnnotationProcessorHelper
name|springProcessor
init|=
operator|new
name|SpringAnnotationProcessorHelper
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|process (Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)
specifier|public
name|boolean
name|process
parameter_list|(
name|Set
argument_list|<
name|?
extends|extends
name|TypeElement
argument_list|>
name|annotations
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|roundEnv
operator|.
name|processingOver
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Set
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|elements
init|=
name|roundEnv
operator|.
name|getElementsAnnotatedWith
argument_list|(
name|XmlRootElement
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|element
range|:
name|elements
control|)
block|{
if|if
condition|(
name|element
operator|instanceof
name|TypeElement
condition|)
block|{
name|TypeElement
name|classElement
init|=
operator|(
name|TypeElement
operator|)
name|element
decl_stmt|;
specifier|final
name|String
name|javaTypeName
init|=
name|canonicalClassName
argument_list|(
name|classElement
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|core
init|=
name|javaTypeName
operator|.
name|startsWith
argument_list|(
literal|"org.apache.camel.model"
argument_list|)
decl_stmt|;
name|boolean
name|spring
init|=
name|javaTypeName
operator|.
name|startsWith
argument_list|(
literal|"org.apache.camel.spring"
argument_list|)
operator|||
name|javaTypeName
operator|.
name|startsWith
argument_list|(
literal|"org.apache.camel.core.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|core
condition|)
block|{
name|coreProcessor
operator|.
name|processModelClass
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|classElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|spring
condition|)
block|{
name|springProcessor
operator|.
name|processModelClass
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|classElement
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|dumpExceptionToErrorFile
argument_list|(
literal|"camel-apt-error.log"
argument_list|,
literal|"Error processing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getSupportedSourceVersion ()
specifier|public
name|SourceVersion
name|getSupportedSourceVersion
parameter_list|()
block|{
return|return
name|SourceVersion
operator|.
name|latest
argument_list|()
return|;
block|}
block|}
end_class

end_unit

