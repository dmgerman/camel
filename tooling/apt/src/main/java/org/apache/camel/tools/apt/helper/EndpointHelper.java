begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.tools.apt.helper
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|model
operator|.
name|EndpointOption
import|;
end_import

begin_class
DECL|class|EndpointHelper
specifier|public
specifier|final
class|class
name|EndpointHelper
block|{
DECL|method|EndpointHelper ()
specifier|private
name|EndpointHelper
parameter_list|()
block|{     }
comment|/**      * Returns the group name from the given label.      *<p/>      * The group name is a single name deducted from the label. The label can contain multiple names separated by comma.      * The group is the best guess as a group of those labels, so similar labels can be combined into the same group.      *      * @param label          the label      * @param consumerOnly   whether the component is consumer only      * @param producerOnly   whether the component is producer only      * @return the group name      */
DECL|method|labelAsGroupName (String label, boolean consumerOnly, boolean producerOnly)
specifier|public
specifier|static
name|String
name|labelAsGroupName
parameter_list|(
name|String
name|label
parameter_list|,
name|boolean
name|consumerOnly
parameter_list|,
name|boolean
name|producerOnly
parameter_list|)
block|{
comment|// if there is no label then use common as fallback
name|String
name|answer
init|=
literal|"common"
decl_stmt|;
if|if
condition|(
name|consumerOnly
condition|)
block|{
name|answer
operator|=
literal|"consumer"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|producerOnly
condition|)
block|{
name|answer
operator|=
literal|"producer"
expr_stmt|;
block|}
name|String
name|value
init|=
name|label
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// we want to put advanced into own group, so look for a label that has advanced as prefix x,advanced => x (advanced)
name|value
operator|=
name|value
operator|.
name|replaceFirst
argument_list|(
literal|"(\\w),(advanced)"
argument_list|,
literal|"$1 (advanced)"
argument_list|)
expr_stmt|;
name|String
index|[]
name|array
init|=
name|value
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
comment|// grab last label which is the most specific label we want to use for the tab
name|answer
operator|=
name|array
index|[
name|array
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
comment|// if we are in consumer/producer only mode, then enrich the advanced label to indicate its advanced of those
if|if
condition|(
name|answer
operator|.
name|equals
argument_list|(
literal|"advanced"
argument_list|)
operator|&&
name|consumerOnly
condition|)
block|{
name|answer
operator|=
literal|"consumer (advanced)"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|answer
operator|.
name|equals
argument_list|(
literal|"advanced"
argument_list|)
operator|&&
name|producerOnly
condition|)
block|{
name|answer
operator|=
literal|"producer (advanced)"
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
comment|/**      * A comparator to sort the endpoint/component options according to group and label.      */
DECL|method|createGroupAndLabelComparator ()
specifier|public
specifier|static
name|EndpointOptionGroupAndLabelComparator
name|createGroupAndLabelComparator
parameter_list|()
block|{
return|return
operator|new
name|EndpointOptionGroupAndLabelComparator
argument_list|()
return|;
block|}
DECL|class|EndpointOptionGroupAndLabelComparator
specifier|private
specifier|static
specifier|final
class|class
name|EndpointOptionGroupAndLabelComparator
implements|implements
name|Comparator
argument_list|<
name|EndpointOption
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (EndpointOption o1, EndpointOption o2)
specifier|public
name|int
name|compare
parameter_list|(
name|EndpointOption
name|o1
parameter_list|,
name|EndpointOption
name|o2
parameter_list|)
block|{
name|String
name|name1
init|=
name|o1
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|name2
init|=
name|o2
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|label1
init|=
name|o1
operator|.
name|getLabel
argument_list|()
operator|!=
literal|null
condition|?
name|o1
operator|.
name|getLabel
argument_list|()
else|:
literal|"common"
decl_stmt|;
name|String
name|label2
init|=
name|o2
operator|.
name|getLabel
argument_list|()
operator|!=
literal|null
condition|?
name|o2
operator|.
name|getLabel
argument_list|()
else|:
literal|"common"
decl_stmt|;
name|String
name|group1
init|=
name|o1
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|String
name|group2
init|=
name|o2
operator|.
name|getGroup
argument_list|()
decl_stmt|;
comment|// if same label or group then sort by name
if|if
condition|(
name|label1
operator|.
name|equalsIgnoreCase
argument_list|(
name|label2
argument_list|)
operator|||
name|group1
operator|.
name|equalsIgnoreCase
argument_list|(
name|group2
argument_list|)
condition|)
block|{
return|return
name|name1
operator|.
name|compareToIgnoreCase
argument_list|(
name|name2
argument_list|)
return|;
block|}
name|int
name|score1
init|=
name|groupScore
argument_list|(
name|group1
argument_list|)
decl_stmt|;
name|int
name|score2
init|=
name|groupScore
argument_list|(
name|group2
argument_list|)
decl_stmt|;
if|if
condition|(
name|score1
operator|<
name|score2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|score2
operator|<
name|score1
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
comment|// compare by full label and name
name|int
name|score
init|=
name|label1
operator|.
name|compareToIgnoreCase
argument_list|(
name|label2
argument_list|)
decl_stmt|;
if|if
condition|(
name|score
operator|==
literal|0
condition|)
block|{
name|score
operator|=
name|name1
operator|.
name|compareToIgnoreCase
argument_list|(
name|name2
argument_list|)
expr_stmt|;
block|}
return|return
name|score
return|;
block|}
block|}
block|}
DECL|method|groupScore (String group)
specifier|private
specifier|static
name|int
name|groupScore
parameter_list|(
name|String
name|group
parameter_list|)
block|{
if|if
condition|(
literal|"common"
operator|.
name|equals
argument_list|(
name|group
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
literal|"common (advanced)"
operator|.
name|equals
argument_list|(
name|group
argument_list|)
condition|)
block|{
return|return
literal|2
return|;
block|}
elseif|else
if|if
condition|(
literal|"consumer"
operator|.
name|equals
argument_list|(
name|group
argument_list|)
condition|)
block|{
return|return
literal|3
return|;
block|}
elseif|else
if|if
condition|(
literal|"consumer (advanced)"
operator|.
name|equals
argument_list|(
name|group
argument_list|)
condition|)
block|{
return|return
literal|4
return|;
block|}
elseif|else
if|if
condition|(
literal|"producer"
operator|.
name|equals
argument_list|(
name|group
argument_list|)
condition|)
block|{
return|return
literal|5
return|;
block|}
elseif|else
if|if
condition|(
literal|"producer (advanced)"
operator|.
name|equals
argument_list|(
name|group
argument_list|)
condition|)
block|{
return|return
literal|6
return|;
block|}
else|else
block|{
return|return
literal|9
return|;
block|}
block|}
block|}
end_class

end_unit

