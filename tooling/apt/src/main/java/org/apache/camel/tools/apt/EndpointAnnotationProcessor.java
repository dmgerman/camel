begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.tools.apt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|AbstractProcessor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|RoundEnvironment
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|SupportedAnnotationTypes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|SupportedSourceVersion
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|SourceVersion
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|ElementKind
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|ExecutableElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|TypeElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|VariableElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|type
operator|.
name|TypeKind
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|type
operator|.
name|TypeMirror
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|util
operator|.
name|ElementFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|util
operator|.
name|Elements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
operator|.
name|CollectionStringBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
operator|.
name|JsonSchemaHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|model
operator|.
name|ComponentModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|model
operator|.
name|ComponentOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|model
operator|.
name|EndpointOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|model
operator|.
name|EndpointPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|AnnotationProcessorHelper
operator|.
name|dumpExceptionToErrorFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|AnnotationProcessorHelper
operator|.
name|findFieldElement
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|AnnotationProcessorHelper
operator|.
name|findJavaDoc
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|AnnotationProcessorHelper
operator|.
name|findTypeElement
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|AnnotationProcessorHelper
operator|.
name|implementsInterface
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|AnnotationProcessorHelper
operator|.
name|loadResource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|AnnotationProcessorHelper
operator|.
name|processFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
operator|.
name|JsonSchemaHelper
operator|.
name|sanitizeDescription
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
operator|.
name|Strings
operator|.
name|canonicalClassName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
operator|.
name|Strings
operator|.
name|getOrElse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|helper
operator|.
name|Strings
operator|.
name|isNullOrEmpty
import|;
end_import

begin_comment
comment|/**  * Processes all Camel {@link UriEndpoint}s and generate json schema documentation for the endpoint/component.  */
end_comment

begin_class
annotation|@
name|SupportedAnnotationTypes
argument_list|(
block|{
literal|"org.apache.camel.spi.*"
block|}
argument_list|)
annotation|@
name|SupportedSourceVersion
argument_list|(
name|SourceVersion
operator|.
name|RELEASE_8
argument_list|)
DECL|class|EndpointAnnotationProcessor
specifier|public
class|class
name|EndpointAnnotationProcessor
extends|extends
name|AbstractProcessor
block|{
comment|// CHECKSTYLE:OFF
DECL|field|HEADER_FILTER_STRATEGY_JAVADOC
specifier|private
specifier|static
specifier|final
name|String
name|HEADER_FILTER_STRATEGY_JAVADOC
init|=
literal|"To use a custom HeaderFilterStrategy to filter header to and from Camel message."
decl_stmt|;
DECL|method|process (Set<? extends TypeElement> annotations, final RoundEnvironment roundEnv)
specifier|public
name|boolean
name|process
parameter_list|(
name|Set
argument_list|<
name|?
extends|extends
name|TypeElement
argument_list|>
name|annotations
parameter_list|,
specifier|final
name|RoundEnvironment
name|roundEnv
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|roundEnv
operator|.
name|processingOver
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Set
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|elements
init|=
name|roundEnv
operator|.
name|getElementsAnnotatedWith
argument_list|(
name|UriEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|element
range|:
name|elements
control|)
block|{
if|if
condition|(
name|element
operator|instanceof
name|TypeElement
condition|)
block|{
name|processEndpointClass
argument_list|(
name|roundEnv
argument_list|,
operator|(
name|TypeElement
operator|)
name|element
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|dumpExceptionToErrorFile
argument_list|(
literal|"camel-apt-error.log"
argument_list|,
literal|"Error processing @UriEndpoint"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|processEndpointClass (final RoundEnvironment roundEnv, final TypeElement classElement)
specifier|private
name|void
name|processEndpointClass
parameter_list|(
specifier|final
name|RoundEnvironment
name|roundEnv
parameter_list|,
specifier|final
name|TypeElement
name|classElement
parameter_list|)
block|{
specifier|final
name|UriEndpoint
name|uriEndpoint
init|=
name|classElement
operator|.
name|getAnnotation
argument_list|(
name|UriEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|uriEndpoint
operator|!=
literal|null
condition|)
block|{
name|String
name|scheme
init|=
name|uriEndpoint
operator|.
name|scheme
argument_list|()
decl_stmt|;
name|String
name|extendsScheme
init|=
name|uriEndpoint
operator|.
name|extendsScheme
argument_list|()
decl_stmt|;
name|String
name|title
init|=
name|uriEndpoint
operator|.
name|title
argument_list|()
decl_stmt|;
specifier|final
name|String
name|label
init|=
name|uriEndpoint
operator|.
name|label
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
comment|// support multiple schemes separated by comma, which maps to the exact same component
comment|// for example camel-mail has a bunch of component schema names that does that
name|String
index|[]
name|schemes
init|=
name|scheme
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|titles
init|=
name|title
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|extendsSchemes
init|=
name|extendsScheme
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|schemes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|alias
init|=
name|schemes
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|String
name|extendsAlias
init|=
name|i
operator|<
name|extendsSchemes
operator|.
name|length
condition|?
name|extendsSchemes
index|[
name|i
index|]
else|:
name|extendsSchemes
index|[
literal|0
index|]
decl_stmt|;
name|String
name|aTitle
init|=
name|i
operator|<
name|titles
operator|.
name|length
condition|?
name|titles
index|[
name|i
index|]
else|:
name|titles
index|[
literal|0
index|]
decl_stmt|;
comment|// some components offer a secure alternative which we need to amend the title accordingly
if|if
condition|(
name|secureAlias
argument_list|(
name|schemes
index|[
literal|0
index|]
argument_list|,
name|alias
argument_list|)
condition|)
block|{
name|aTitle
operator|+=
literal|" (Secure)"
expr_stmt|;
block|}
specifier|final
name|String
name|aliasTitle
init|=
name|aTitle
decl_stmt|;
comment|// write json schema
name|String
name|name
init|=
name|canonicalClassName
argument_list|(
name|classElement
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|packageName
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
name|alias
operator|+
literal|".json"
decl_stmt|;
name|Func1
argument_list|<
name|PrintWriter
argument_list|,
name|Void
argument_list|>
name|handler
init|=
operator|new
name|Func1
argument_list|<
name|PrintWriter
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|(
name|PrintWriter
name|writer
parameter_list|)
block|{
name|writeJSonSchemeDocumentation
argument_list|(
name|writer
argument_list|,
name|roundEnv
argument_list|,
name|classElement
argument_list|,
name|uriEndpoint
argument_list|,
name|aliasTitle
argument_list|,
name|alias
argument_list|,
name|extendsAlias
argument_list|,
name|label
argument_list|,
name|schemes
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|processFile
argument_list|(
name|processingEnv
argument_list|,
name|packageName
argument_list|,
name|fileName
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|writeJSonSchemeDocumentation (PrintWriter writer, RoundEnvironment roundEnv, TypeElement classElement, UriEndpoint uriEndpoint, String title, String scheme, String extendsScheme, String label, String[] schemes)
specifier|protected
name|void
name|writeJSonSchemeDocumentation
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|,
name|TypeElement
name|classElement
parameter_list|,
name|UriEndpoint
name|uriEndpoint
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|scheme
parameter_list|,
name|String
name|extendsScheme
parameter_list|,
name|String
name|label
parameter_list|,
name|String
index|[]
name|schemes
parameter_list|)
block|{
comment|// gather component information
name|ComponentModel
name|componentModel
init|=
name|findComponentProperties
argument_list|(
name|roundEnv
argument_list|,
name|uriEndpoint
argument_list|,
name|classElement
argument_list|,
name|title
argument_list|,
name|scheme
argument_list|,
name|extendsScheme
argument_list|,
name|label
argument_list|)
decl_stmt|;
comment|// get endpoint information which is divided into paths and options (though there should really only be one path)
name|Set
argument_list|<
name|EndpointPath
argument_list|>
name|endpointPaths
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|EndpointPath
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|EndpointOption
argument_list|>
name|endpointOptions
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|EndpointOption
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ComponentOption
argument_list|>
name|componentOptions
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|ComponentOption
argument_list|>
argument_list|()
decl_stmt|;
name|TypeElement
name|componentClassElement
init|=
name|findTypeElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|componentModel
operator|.
name|getJavaType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|componentClassElement
operator|!=
literal|null
condition|)
block|{
name|findComponentClassProperties
argument_list|(
name|writer
argument_list|,
name|roundEnv
argument_list|,
name|componentModel
argument_list|,
name|componentOptions
argument_list|,
name|componentClassElement
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|findClassProperties
argument_list|(
name|writer
argument_list|,
name|roundEnv
argument_list|,
name|componentModel
argument_list|,
name|endpointPaths
argument_list|,
name|endpointOptions
argument_list|,
name|classElement
argument_list|,
literal|""
argument_list|,
name|uriEndpoint
operator|.
name|excludeProperties
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|json
init|=
name|createParameterJsonSchema
argument_list|(
name|componentModel
argument_list|,
name|componentOptions
argument_list|,
name|endpointPaths
argument_list|,
name|endpointOptions
argument_list|,
name|schemes
argument_list|)
decl_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
DECL|method|createParameterJsonSchema (ComponentModel componentModel, Set<ComponentOption> componentOptions, Set<EndpointPath> endpointPaths, Set<EndpointOption> endpointOptions, String[] schemes)
specifier|public
name|String
name|createParameterJsonSchema
parameter_list|(
name|ComponentModel
name|componentModel
parameter_list|,
name|Set
argument_list|<
name|ComponentOption
argument_list|>
name|componentOptions
parameter_list|,
name|Set
argument_list|<
name|EndpointPath
argument_list|>
name|endpointPaths
parameter_list|,
name|Set
argument_list|<
name|EndpointOption
argument_list|>
name|endpointOptions
parameter_list|,
name|String
index|[]
name|schemes
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{"
argument_list|)
decl_stmt|;
comment|// component model
name|buffer
operator|.
name|append
argument_list|(
literal|"\n \"component\": {"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"kind\": \""
argument_list|)
operator|.
name|append
argument_list|(
literal|"component"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"scheme\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|componentModel
operator|.
name|getExtendsScheme
argument_list|()
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"extendsScheme\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|getExtendsScheme
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
block|}
comment|// the first scheme is the regular so only output if there is alternatives
if|if
condition|(
name|schemes
operator|!=
literal|null
operator|&&
name|schemes
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|CollectionStringBuffer
name|csb
init|=
operator|new
name|CollectionStringBuffer
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|altScheme
range|:
name|schemes
control|)
block|{
name|csb
operator|.
name|append
argument_list|(
name|altScheme
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"alternativeSchemes\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|csb
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"syntax\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|getSyntax
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
if|if
condition|(
name|componentModel
operator|.
name|getAlternativeSyntax
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"alternativeSyntax\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|getAlternativeSyntax
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"title\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|getTitle
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"description\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|getDescription
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"label\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|getOrElse
argument_list|(
name|componentModel
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"deprecated\": "
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|isDeprecated
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"deprecationNote\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|getOrElse
argument_list|(
name|componentModel
operator|.
name|getDeprecationNode
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"async\": "
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|isAsync
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"consumerOnly\": "
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|isConsumerOnly
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"producerOnly\": "
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|isProducerOnly
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"lenientProperties\": "
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|isLenientProperties
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"javaType\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|getJavaType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
if|if
condition|(
name|componentModel
operator|.
name|getFirstVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"firstVersion\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|getFirstVersion
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"groupId\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"artifactId\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
if|if
condition|(
name|componentModel
operator|.
name|getVerifiers
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"verifiers\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|getVerifiers
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"version\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|getVersionId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n  },"
argument_list|)
expr_stmt|;
comment|// and component properties
name|buffer
operator|.
name|append
argument_list|(
literal|"\n  \"componentProperties\": {"
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ComponentOption
name|entry
range|:
name|componentOptions
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    "
argument_list|)
expr_stmt|;
comment|// either we have the documentation from this apt plugin or we need help to find it from extended component
name|String
name|doc
init|=
name|entry
operator|.
name|getDocumentationWithNotes
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|doc
operator|=
name|DocumentationHelper
operator|.
name|findComponentJavaDoc
argument_list|(
name|componentModel
operator|.
name|getScheme
argument_list|()
argument_list|,
name|componentModel
operator|.
name|getExtendsScheme
argument_list|()
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// as its json we need to sanitize the docs
name|doc
operator|=
name|sanitizeDescription
argument_list|(
name|doc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Boolean
name|required
init|=
name|entry
operator|.
name|getRequired
argument_list|()
operator|!=
literal|null
condition|?
name|Boolean
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getRequired
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|String
name|defaultValue
init|=
name|entry
operator|.
name|getDefaultValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|defaultValue
argument_list|)
operator|&&
literal|"boolean"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
comment|// fallback as false for boolean types
name|defaultValue
operator|=
literal|"false"
expr_stmt|;
block|}
comment|// component options do not have prefix
name|String
name|optionalPrefix
init|=
literal|""
decl_stmt|;
name|String
name|prefix
init|=
literal|""
decl_stmt|;
name|boolean
name|multiValue
init|=
literal|false
decl_stmt|;
name|boolean
name|asPredicate
init|=
literal|false
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|JsonSchemaHelper
operator|.
name|toJson
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|getDisplayName
argument_list|()
argument_list|,
literal|"property"
argument_list|,
name|required
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|,
name|defaultValue
argument_list|,
name|doc
argument_list|,
name|entry
operator|.
name|isDeprecated
argument_list|()
argument_list|,
name|entry
operator|.
name|getDeprecationNode
argument_list|()
argument_list|,
name|entry
operator|.
name|isSecret
argument_list|()
argument_list|,
name|entry
operator|.
name|getGroup
argument_list|()
argument_list|,
name|entry
operator|.
name|getLabel
argument_list|()
argument_list|,
name|entry
operator|.
name|isEnumType
argument_list|()
argument_list|,
name|entry
operator|.
name|getEnums
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|asPredicate
argument_list|,
name|optionalPrefix
argument_list|,
name|prefix
argument_list|,
name|multiValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n  },"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n  \"properties\": {"
argument_list|)
expr_stmt|;
name|first
operator|=
literal|true
expr_stmt|;
comment|// sort the endpoint options in the standard order we prefer
name|List
argument_list|<
name|EndpointPath
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|EndpointPath
argument_list|>
argument_list|()
decl_stmt|;
name|paths
operator|.
name|addAll
argument_list|(
name|endpointPaths
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|paths
argument_list|,
name|EndpointHelper
operator|.
name|createPathComparator
argument_list|(
name|componentModel
operator|.
name|getSyntax
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// include paths in the top
for|for
control|(
name|EndpointPath
name|entry
range|:
name|paths
control|)
block|{
name|String
name|label
init|=
name|entry
operator|.
name|getLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|label
operator|!=
literal|null
condition|)
block|{
comment|// skip options which are either consumer or producer labels but the component does not support them
if|if
condition|(
name|label
operator|.
name|contains
argument_list|(
literal|"consumer"
argument_list|)
operator|&&
name|componentModel
operator|.
name|isProducerOnly
argument_list|()
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|label
operator|.
name|contains
argument_list|(
literal|"producer"
argument_list|)
operator|&&
name|componentModel
operator|.
name|isConsumerOnly
argument_list|()
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    "
argument_list|)
expr_stmt|;
comment|// either we have the documentation from this apt plugin or we need help to find it from extended component
name|String
name|doc
init|=
name|entry
operator|.
name|getDocumentation
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|doc
operator|=
name|DocumentationHelper
operator|.
name|findEndpointJavaDoc
argument_list|(
name|componentModel
operator|.
name|getScheme
argument_list|()
argument_list|,
name|componentModel
operator|.
name|getExtendsScheme
argument_list|()
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// as its json we need to sanitize the docs
name|doc
operator|=
name|sanitizeDescription
argument_list|(
name|doc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Boolean
name|required
init|=
name|entry
operator|.
name|getRequired
argument_list|()
operator|!=
literal|null
condition|?
name|Boolean
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getRequired
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|String
name|defaultValue
init|=
name|entry
operator|.
name|getDefaultValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|defaultValue
argument_list|)
operator|&&
literal|"boolean"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
comment|// fallback as false for boolean types
name|defaultValue
operator|=
literal|"false"
expr_stmt|;
block|}
comment|// @UriPath options do not have prefix
name|String
name|optionalPrefix
init|=
literal|""
decl_stmt|;
name|String
name|prefix
init|=
literal|""
decl_stmt|;
name|boolean
name|multiValue
init|=
literal|false
decl_stmt|;
name|boolean
name|asPredicate
init|=
literal|false
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|JsonSchemaHelper
operator|.
name|toJson
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|getDisplayName
argument_list|()
argument_list|,
literal|"path"
argument_list|,
name|required
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|,
name|defaultValue
argument_list|,
name|doc
argument_list|,
name|entry
operator|.
name|isDeprecated
argument_list|()
argument_list|,
name|entry
operator|.
name|getDeprecationNote
argument_list|()
argument_list|,
name|entry
operator|.
name|isSecret
argument_list|()
argument_list|,
name|entry
operator|.
name|getGroup
argument_list|()
argument_list|,
name|entry
operator|.
name|getLabel
argument_list|()
argument_list|,
name|entry
operator|.
name|isEnumType
argument_list|()
argument_list|,
name|entry
operator|.
name|getEnums
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|asPredicate
argument_list|,
name|optionalPrefix
argument_list|,
name|prefix
argument_list|,
name|multiValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// sort the endpoint options in the standard order we prefer
name|List
argument_list|<
name|EndpointOption
argument_list|>
name|options
init|=
operator|new
name|ArrayList
argument_list|<
name|EndpointOption
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|addAll
argument_list|(
name|endpointOptions
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|options
argument_list|,
name|EndpointHelper
operator|.
name|createGroupAndLabelComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// and then regular parameter options
for|for
control|(
name|EndpointOption
name|entry
range|:
name|options
control|)
block|{
name|String
name|label
init|=
name|entry
operator|.
name|getLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|label
operator|!=
literal|null
condition|)
block|{
comment|// skip options which are either consumer or producer labels but the component does not support them
if|if
condition|(
name|label
operator|.
name|contains
argument_list|(
literal|"consumer"
argument_list|)
operator|&&
name|componentModel
operator|.
name|isProducerOnly
argument_list|()
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|label
operator|.
name|contains
argument_list|(
literal|"producer"
argument_list|)
operator|&&
name|componentModel
operator|.
name|isConsumerOnly
argument_list|()
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    "
argument_list|)
expr_stmt|;
comment|// either we have the documentation from this apt plugin or we need help to find it from extended component
name|String
name|doc
init|=
name|entry
operator|.
name|getDocumentationWithNotes
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|doc
operator|=
name|DocumentationHelper
operator|.
name|findEndpointJavaDoc
argument_list|(
name|componentModel
operator|.
name|getScheme
argument_list|()
argument_list|,
name|componentModel
operator|.
name|getExtendsScheme
argument_list|()
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// as its json we need to sanitize the docs
name|doc
operator|=
name|sanitizeDescription
argument_list|(
name|doc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Boolean
name|required
init|=
name|entry
operator|.
name|getRequired
argument_list|()
operator|!=
literal|null
condition|?
name|Boolean
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getRequired
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|String
name|defaultValue
init|=
name|entry
operator|.
name|getDefaultValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|defaultValue
argument_list|)
operator|&&
literal|"boolean"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
comment|// fallback as false for boolean types
name|defaultValue
operator|=
literal|"false"
expr_stmt|;
block|}
name|String
name|optionalPrefix
init|=
name|entry
operator|.
name|getOptionalPrefix
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|entry
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|boolean
name|multiValue
init|=
name|entry
operator|.
name|isMultiValue
argument_list|()
decl_stmt|;
name|boolean
name|asPredicate
init|=
literal|false
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|JsonSchemaHelper
operator|.
name|toJson
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|getDisplayName
argument_list|()
argument_list|,
literal|"parameter"
argument_list|,
name|required
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|,
name|defaultValue
argument_list|,
name|doc
argument_list|,
name|entry
operator|.
name|isDeprecated
argument_list|()
argument_list|,
name|entry
operator|.
name|getDeprecationNote
argument_list|()
argument_list|,
name|entry
operator|.
name|isSecret
argument_list|()
argument_list|,
name|entry
operator|.
name|getGroup
argument_list|()
argument_list|,
name|entry
operator|.
name|getLabel
argument_list|()
argument_list|,
name|entry
operator|.
name|isEnumType
argument_list|()
argument_list|,
name|entry
operator|.
name|getEnums
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|asPredicate
argument_list|,
name|optionalPrefix
argument_list|,
name|prefix
argument_list|,
name|multiValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n  }"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n}\n"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|findComponentProperties (RoundEnvironment roundEnv, UriEndpoint uriEndpoint, TypeElement endpointClassElement, String title, String scheme, String extendsScheme, String label)
specifier|protected
name|ComponentModel
name|findComponentProperties
parameter_list|(
name|RoundEnvironment
name|roundEnv
parameter_list|,
name|UriEndpoint
name|uriEndpoint
parameter_list|,
name|TypeElement
name|endpointClassElement
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|scheme
parameter_list|,
name|String
name|extendsScheme
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|ComponentModel
name|model
init|=
operator|new
name|ComponentModel
argument_list|(
name|scheme
argument_list|)
decl_stmt|;
comment|// if the scheme is an alias then replace the scheme name from the syntax with the alias
name|String
name|syntax
init|=
name|scheme
operator|+
literal|":"
operator|+
name|Strings
operator|.
name|after
argument_list|(
name|uriEndpoint
operator|.
name|syntax
argument_list|()
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
comment|// alternative syntax is optional
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|uriEndpoint
operator|.
name|alternativeSyntax
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|alternativeSyntax
init|=
name|scheme
operator|+
literal|":"
operator|+
name|Strings
operator|.
name|after
argument_list|(
name|uriEndpoint
operator|.
name|alternativeSyntax
argument_list|()
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
name|model
operator|.
name|setAlternativeSyntax
argument_list|(
name|alternativeSyntax
argument_list|)
expr_stmt|;
block|}
name|model
operator|.
name|setExtendsScheme
argument_list|(
name|extendsScheme
argument_list|)
expr_stmt|;
name|model
operator|.
name|setSyntax
argument_list|(
name|syntax
argument_list|)
expr_stmt|;
name|model
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|model
operator|.
name|setLabel
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|model
operator|.
name|setConsumerOnly
argument_list|(
name|uriEndpoint
operator|.
name|consumerOnly
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setProducerOnly
argument_list|(
name|uriEndpoint
operator|.
name|producerOnly
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setLenientProperties
argument_list|(
name|uriEndpoint
operator|.
name|lenientProperties
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setAsync
argument_list|(
name|implementsInterface
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|endpointClassElement
argument_list|,
literal|"org.apache.camel.AsyncEndpoint"
argument_list|)
argument_list|)
expr_stmt|;
comment|// what is the first version this component was added to Apache Camel
name|String
name|firstVersion
init|=
name|uriEndpoint
operator|.
name|firstVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|firstVersion
argument_list|)
operator|&&
name|endpointClassElement
operator|.
name|getAnnotation
argument_list|(
name|Metadata
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// fallback to @Metadata if not from @UriEndpoint
name|firstVersion
operator|=
name|endpointClassElement
operator|.
name|getAnnotation
argument_list|(
name|Metadata
operator|.
name|class
argument_list|)
operator|.
name|firstVersion
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|firstVersion
argument_list|)
condition|)
block|{
name|model
operator|.
name|setFirstVersion
argument_list|(
name|firstVersion
argument_list|)
expr_stmt|;
block|}
name|String
name|data
init|=
name|loadResource
argument_list|(
name|processingEnv
argument_list|,
literal|"META-INF/services/org/apache/camel/component"
argument_list|,
name|scheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|parseAsMap
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|model
operator|.
name|setJavaType
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|data
operator|=
name|loadResource
argument_list|(
name|processingEnv
argument_list|,
literal|"META-INF/services/org/apache/camel"
argument_list|,
literal|"component.properties"
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|parseAsMap
argument_list|(
name|data
argument_list|)
decl_stmt|;
comment|// now we have a lot more data, so we need to load it as key/value
comment|// need to sanitize the description first
name|String
name|doc
init|=
name|map
operator|.
name|get
argument_list|(
literal|"projectDescription"
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|model
operator|.
name|setDescription
argument_list|(
name|sanitizeDescription
argument_list|(
name|doc
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|model
operator|.
name|setDescription
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
comment|// we can mark a component as deprecated by using the annotation or in the pom.xml
name|boolean
name|deprecated
init|=
name|endpointClassElement
operator|.
name|getAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|deprecated
condition|)
block|{
name|String
name|name
init|=
name|map
operator|.
name|get
argument_list|(
literal|"projectName"
argument_list|)
decl_stmt|;
comment|// we may have marked a component as deprecated in the project name
name|deprecated
operator|=
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|contains
argument_list|(
literal|"(deprecated)"
argument_list|)
expr_stmt|;
block|}
name|model
operator|.
name|setDeprecated
argument_list|(
name|deprecated
argument_list|)
expr_stmt|;
name|String
name|deprecationNote
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|endpointClassElement
operator|.
name|getAnnotation
argument_list|(
name|Metadata
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|deprecationNote
operator|=
name|endpointClassElement
operator|.
name|getAnnotation
argument_list|(
name|Metadata
operator|.
name|class
argument_list|)
operator|.
name|deprecationNode
argument_list|()
expr_stmt|;
block|}
name|model
operator|.
name|setDeprecationNode
argument_list|(
name|deprecationNote
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"groupId"
argument_list|)
condition|)
block|{
name|model
operator|.
name|setGroupId
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"groupId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|model
operator|.
name|setGroupId
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"artifactId"
argument_list|)
condition|)
block|{
name|model
operator|.
name|setArtifactId
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"artifactId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|model
operator|.
name|setArtifactId
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"version"
argument_list|)
condition|)
block|{
name|model
operator|.
name|setVersionId
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"version"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|model
operator|.
name|setVersionId
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
comment|// favor to use endpoint class javadoc as description
name|Elements
name|elementUtils
init|=
name|processingEnv
operator|.
name|getElementUtils
argument_list|()
decl_stmt|;
name|TypeElement
name|typeElement
init|=
name|findTypeElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|endpointClassElement
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeElement
operator|!=
literal|null
condition|)
block|{
name|String
name|doc
init|=
name|elementUtils
operator|.
name|getDocComment
argument_list|(
name|typeElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
comment|// need to sanitize the description first (we only want a summary)
name|doc
operator|=
name|sanitizeDescription
argument_list|(
name|doc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// the javadoc may actually be empty, so only change the doc if we got something
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|model
operator|.
name|setDescription
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|model
return|;
block|}
DECL|method|findComponentClassProperties (PrintWriter writer, RoundEnvironment roundEnv, ComponentModel componentModel, Set<ComponentOption> componentOptions, TypeElement classElement, String prefix)
specifier|protected
name|void
name|findComponentClassProperties
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|,
name|ComponentModel
name|componentModel
parameter_list|,
name|Set
argument_list|<
name|ComponentOption
argument_list|>
name|componentOptions
parameter_list|,
name|TypeElement
name|classElement
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|Elements
name|elementUtils
init|=
name|processingEnv
operator|.
name|getElementUtils
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Metadata
name|componentAnnotation
init|=
name|classElement
operator|.
name|getAnnotation
argument_list|(
name|Metadata
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|componentAnnotation
operator|!=
literal|null
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
literal|"verifiers"
argument_list|,
name|componentAnnotation
operator|.
name|label
argument_list|()
argument_list|)
condition|)
block|{
name|componentModel
operator|.
name|setVerifiers
argument_list|(
name|componentAnnotation
operator|.
name|enums
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ExecutableElement
argument_list|>
name|methods
init|=
name|ElementFilter
operator|.
name|methodsIn
argument_list|(
name|classElement
operator|.
name|getEnclosedElements
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ExecutableElement
name|method
range|:
name|methods
control|)
block|{
name|String
name|methodName
init|=
name|method
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|deprecated
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|Metadata
name|metadata
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|Metadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|deprecationNote
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
name|deprecationNote
operator|=
name|metadata
operator|.
name|deprecationNode
argument_list|()
expr_stmt|;
block|}
comment|// must be the setter
name|boolean
name|isSetter
init|=
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
operator|&&
name|method
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|TypeKind
operator|.
name|VOID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isSetter
condition|)
block|{
continue|continue;
block|}
comment|// skip unwanted methods as they are inherited from default component and are not intended for end users to configure
if|if
condition|(
literal|"setEndpointClass"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
operator|||
literal|"setCamelContext"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
operator|||
literal|"setEndpointHeaderFilterStrategy"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
operator|||
literal|"setApplicationContext"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// must be a getter/setter pair
name|String
name|fieldName
init|=
name|methodName
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|fieldName
operator|=
name|fieldName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|fieldName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// we usually favor putting the @Metadata annotation on the field instead of the setter, so try to use it if its there
name|VariableElement
name|field
init|=
name|findFieldElement
argument_list|(
name|classElement
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
operator|&&
name|metadata
operator|==
literal|null
condition|)
block|{
name|metadata
operator|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|Metadata
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|String
name|required
init|=
name|metadata
operator|!=
literal|null
condition|?
name|metadata
operator|.
name|required
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|label
init|=
name|metadata
operator|!=
literal|null
condition|?
name|metadata
operator|.
name|label
argument_list|()
else|:
literal|null
decl_stmt|;
name|boolean
name|secret
init|=
name|metadata
operator|!=
literal|null
operator|&&
name|metadata
operator|.
name|secret
argument_list|()
decl_stmt|;
name|String
name|displayName
init|=
name|metadata
operator|!=
literal|null
condition|?
name|metadata
operator|.
name|displayName
argument_list|()
else|:
literal|null
decl_stmt|;
comment|// we do not yet have default values / notes / as no annotation support yet
comment|// String defaultValueNote = param.defaultValueNote();
name|String
name|defaultValue
init|=
name|metadata
operator|!=
literal|null
condition|?
name|metadata
operator|.
name|defaultValue
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|defaultValueNote
init|=
literal|null
decl_stmt|;
name|ExecutableElement
name|setter
init|=
name|method
decl_stmt|;
name|String
name|name
init|=
name|fieldName
decl_stmt|;
name|name
operator|=
name|prefix
operator|+
name|name
expr_stmt|;
name|TypeMirror
name|fieldType
init|=
name|setter
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|asType
argument_list|()
decl_stmt|;
name|String
name|fieldTypeName
init|=
name|fieldType
operator|.
name|toString
argument_list|()
decl_stmt|;
name|TypeElement
name|fieldTypeElement
init|=
name|findTypeElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|fieldTypeName
argument_list|)
decl_stmt|;
name|String
name|docComment
init|=
name|findJavaDoc
argument_list|(
name|elementUtils
argument_list|,
name|method
argument_list|,
name|fieldName
argument_list|,
name|name
argument_list|,
name|classElement
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|docComment
argument_list|)
condition|)
block|{
name|docComment
operator|=
name|metadata
operator|!=
literal|null
condition|?
name|metadata
operator|.
name|description
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|docComment
argument_list|)
condition|)
block|{
comment|// apt cannot grab javadoc from camel-core, only from annotations
if|if
condition|(
literal|"setHeaderFilterStrategy"
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
name|docComment
operator|=
name|HEADER_FILTER_STRATEGY_JAVADOC
expr_stmt|;
block|}
else|else
block|{
name|docComment
operator|=
literal|""
expr_stmt|;
block|}
block|}
comment|// gather enums
name|Set
argument_list|<
name|String
argument_list|>
name|enums
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|isEnum
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
operator|&&
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|metadata
operator|.
name|enums
argument_list|()
argument_list|)
condition|)
block|{
name|isEnum
operator|=
literal|true
expr_stmt|;
name|String
index|[]
name|values
init|=
name|metadata
operator|.
name|enums
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|values
control|)
block|{
name|enums
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|isEnum
operator|=
name|fieldTypeElement
operator|!=
literal|null
operator|&&
name|fieldTypeElement
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|ENUM
expr_stmt|;
if|if
condition|(
name|isEnum
condition|)
block|{
name|TypeElement
name|enumClass
init|=
name|findTypeElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|fieldTypeElement
operator|.
name|asType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|enumClass
operator|!=
literal|null
condition|)
block|{
comment|// find all the enum constants which has the possible enum value that can be used
name|List
argument_list|<
name|VariableElement
argument_list|>
name|fields
init|=
name|ElementFilter
operator|.
name|fieldsIn
argument_list|(
name|enumClass
operator|.
name|getEnclosedElements
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|VariableElement
name|var
range|:
name|fields
control|)
block|{
if|if
condition|(
name|var
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|ENUM_CONSTANT
condition|)
block|{
name|String
name|val
init|=
name|var
operator|.
name|toString
argument_list|()
decl_stmt|;
name|enums
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|String
name|group
init|=
name|EndpointHelper
operator|.
name|labelAsGroupName
argument_list|(
name|label
argument_list|,
name|componentModel
operator|.
name|isConsumerOnly
argument_list|()
argument_list|,
name|componentModel
operator|.
name|isProducerOnly
argument_list|()
argument_list|)
decl_stmt|;
name|ComponentOption
name|option
init|=
operator|new
name|ComponentOption
argument_list|(
name|name
argument_list|,
name|displayName
argument_list|,
name|fieldTypeName
argument_list|,
name|required
argument_list|,
name|defaultValue
argument_list|,
name|defaultValueNote
argument_list|,
name|docComment
operator|.
name|trim
argument_list|()
argument_list|,
name|deprecated
argument_list|,
name|deprecationNote
argument_list|,
name|secret
argument_list|,
name|group
argument_list|,
name|label
argument_list|,
name|isEnum
argument_list|,
name|enums
argument_list|)
decl_stmt|;
name|componentOptions
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
comment|// check super classes which may also have fields
name|TypeElement
name|baseTypeElement
init|=
literal|null
decl_stmt|;
name|TypeMirror
name|superclass
init|=
name|classElement
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superclass
operator|!=
literal|null
condition|)
block|{
name|String
name|superClassName
init|=
name|canonicalClassName
argument_list|(
name|superclass
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|baseTypeElement
operator|=
name|findTypeElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|superClassName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|baseTypeElement
operator|!=
literal|null
condition|)
block|{
name|classElement
operator|=
name|baseTypeElement
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
DECL|method|findClassProperties (PrintWriter writer, RoundEnvironment roundEnv, ComponentModel componentModel, Set<EndpointPath> endpointPaths, Set<EndpointOption> endpointOptions, TypeElement classElement, String prefix, String excludeProperties)
specifier|protected
name|void
name|findClassProperties
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|,
name|ComponentModel
name|componentModel
parameter_list|,
name|Set
argument_list|<
name|EndpointPath
argument_list|>
name|endpointPaths
parameter_list|,
name|Set
argument_list|<
name|EndpointOption
argument_list|>
name|endpointOptions
parameter_list|,
name|TypeElement
name|classElement
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|excludeProperties
parameter_list|)
block|{
name|Elements
name|elementUtils
init|=
name|processingEnv
operator|.
name|getElementUtils
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|VariableElement
argument_list|>
name|fieldElements
init|=
name|ElementFilter
operator|.
name|fieldsIn
argument_list|(
name|classElement
operator|.
name|getEnclosedElements
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|VariableElement
name|fieldElement
range|:
name|fieldElements
control|)
block|{
name|Metadata
name|metadata
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|Metadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|deprecated
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|String
name|deprecationNote
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
name|deprecationNote
operator|=
name|metadata
operator|.
name|deprecationNode
argument_list|()
expr_stmt|;
block|}
name|Boolean
name|secret
init|=
name|metadata
operator|!=
literal|null
condition|?
name|metadata
operator|.
name|secret
argument_list|()
else|:
literal|null
decl_stmt|;
name|UriPath
name|path
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|UriPath
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|fieldName
init|=
name|fieldElement
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|path
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
name|fieldName
expr_stmt|;
block|}
name|name
operator|=
name|prefix
operator|+
name|name
expr_stmt|;
comment|// should we exclude the name?
if|if
condition|(
name|excludeProperty
argument_list|(
name|excludeProperties
argument_list|,
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|defaultValue
init|=
name|path
operator|.
name|defaultValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|defaultValue
argument_list|)
operator|&&
name|metadata
operator|!=
literal|null
condition|)
block|{
name|defaultValue
operator|=
name|metadata
operator|.
name|defaultValue
argument_list|()
expr_stmt|;
block|}
name|String
name|defaultValueNote
init|=
name|path
operator|.
name|defaultValueNote
argument_list|()
decl_stmt|;
name|String
name|required
init|=
name|metadata
operator|!=
literal|null
condition|?
name|metadata
operator|.
name|required
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|label
init|=
name|path
operator|.
name|label
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|label
argument_list|)
operator|&&
name|metadata
operator|!=
literal|null
condition|)
block|{
name|label
operator|=
name|metadata
operator|.
name|label
argument_list|()
expr_stmt|;
block|}
name|String
name|displayName
init|=
name|path
operator|.
name|displayName
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|displayName
argument_list|)
condition|)
block|{
name|displayName
operator|=
name|metadata
operator|!=
literal|null
condition|?
name|metadata
operator|.
name|displayName
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
name|TypeMirror
name|fieldType
init|=
name|fieldElement
operator|.
name|asType
argument_list|()
decl_stmt|;
name|String
name|fieldTypeName
init|=
name|fieldType
operator|.
name|toString
argument_list|()
decl_stmt|;
name|TypeElement
name|fieldTypeElement
init|=
name|findTypeElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|fieldTypeName
argument_list|)
decl_stmt|;
name|String
name|docComment
init|=
name|findJavaDoc
argument_list|(
name|elementUtils
argument_list|,
name|fieldElement
argument_list|,
name|fieldName
argument_list|,
name|name
argument_list|,
name|classElement
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|docComment
argument_list|)
condition|)
block|{
name|docComment
operator|=
name|path
operator|.
name|description
argument_list|()
expr_stmt|;
block|}
comment|// gather enums
name|Set
argument_list|<
name|String
argument_list|>
name|enums
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|isEnum
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|path
operator|.
name|enums
argument_list|()
argument_list|)
condition|)
block|{
name|isEnum
operator|=
literal|true
expr_stmt|;
name|String
index|[]
name|values
init|=
name|path
operator|.
name|enums
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|values
control|)
block|{
name|enums
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|isEnum
operator|=
name|fieldTypeElement
operator|!=
literal|null
operator|&&
name|fieldTypeElement
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|ENUM
expr_stmt|;
if|if
condition|(
name|isEnum
condition|)
block|{
name|TypeElement
name|enumClass
init|=
name|findTypeElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|fieldTypeElement
operator|.
name|asType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// find all the enum constants which has the possible enum value that can be used
if|if
condition|(
name|enumClass
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|VariableElement
argument_list|>
name|fields
init|=
name|ElementFilter
operator|.
name|fieldsIn
argument_list|(
name|enumClass
operator|.
name|getEnclosedElements
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|VariableElement
name|var
range|:
name|fields
control|)
block|{
if|if
condition|(
name|var
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|ENUM_CONSTANT
condition|)
block|{
name|String
name|val
init|=
name|var
operator|.
name|toString
argument_list|()
decl_stmt|;
name|enums
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// the field type may be overloaded by another type
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|path
operator|.
name|javaType
argument_list|()
argument_list|)
condition|)
block|{
name|fieldTypeName
operator|=
name|path
operator|.
name|javaType
argument_list|()
expr_stmt|;
block|}
name|String
name|group
init|=
name|EndpointHelper
operator|.
name|labelAsGroupName
argument_list|(
name|label
argument_list|,
name|componentModel
operator|.
name|isConsumerOnly
argument_list|()
argument_list|,
name|componentModel
operator|.
name|isProducerOnly
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isSecret
init|=
name|secret
operator|!=
literal|null
condition|?
name|secret
else|:
literal|false
decl_stmt|;
name|EndpointPath
name|ep
init|=
operator|new
name|EndpointPath
argument_list|(
name|name
argument_list|,
name|displayName
argument_list|,
name|fieldTypeName
argument_list|,
name|required
argument_list|,
name|defaultValue
argument_list|,
name|docComment
argument_list|,
name|deprecated
argument_list|,
name|deprecationNote
argument_list|,
name|isSecret
argument_list|,
name|group
argument_list|,
name|label
argument_list|,
name|isEnum
argument_list|,
name|enums
argument_list|)
decl_stmt|;
name|endpointPaths
operator|.
name|add
argument_list|(
name|ep
argument_list|)
expr_stmt|;
block|}
name|UriParam
name|param
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|UriParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|fieldName
operator|=
name|fieldElement
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|param
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|param
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
name|fieldName
expr_stmt|;
block|}
name|name
operator|=
name|prefix
operator|+
name|name
expr_stmt|;
comment|// should we exclude the name?
if|if
condition|(
name|excludeProperty
argument_list|(
name|excludeProperties
argument_list|,
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|paramOptionalPrefix
init|=
name|param
operator|.
name|optionalPrefix
argument_list|()
decl_stmt|;
name|String
name|paramPrefix
init|=
name|param
operator|.
name|prefix
argument_list|()
decl_stmt|;
name|boolean
name|multiValue
init|=
name|param
operator|.
name|multiValue
argument_list|()
decl_stmt|;
name|String
name|defaultValue
init|=
name|param
operator|.
name|defaultValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultValue
operator|==
literal|null
operator|&&
name|metadata
operator|!=
literal|null
condition|)
block|{
name|defaultValue
operator|=
name|metadata
operator|.
name|defaultValue
argument_list|()
expr_stmt|;
block|}
name|String
name|defaultValueNote
init|=
name|param
operator|.
name|defaultValueNote
argument_list|()
decl_stmt|;
name|String
name|required
init|=
name|metadata
operator|!=
literal|null
condition|?
name|metadata
operator|.
name|required
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|label
init|=
name|param
operator|.
name|label
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|label
argument_list|)
operator|&&
name|metadata
operator|!=
literal|null
condition|)
block|{
name|label
operator|=
name|metadata
operator|.
name|label
argument_list|()
expr_stmt|;
block|}
name|String
name|displayName
init|=
name|param
operator|.
name|displayName
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|displayName
argument_list|)
condition|)
block|{
name|displayName
operator|=
name|metadata
operator|!=
literal|null
condition|?
name|metadata
operator|.
name|displayName
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
comment|// if the field type is a nested parameter then iterate through its fields
name|TypeMirror
name|fieldType
init|=
name|fieldElement
operator|.
name|asType
argument_list|()
decl_stmt|;
name|String
name|fieldTypeName
init|=
name|fieldType
operator|.
name|toString
argument_list|()
decl_stmt|;
name|TypeElement
name|fieldTypeElement
init|=
name|findTypeElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|fieldTypeName
argument_list|)
decl_stmt|;
name|UriParams
name|fieldParams
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fieldTypeElement
operator|!=
literal|null
condition|)
block|{
name|fieldParams
operator|=
name|fieldTypeElement
operator|.
name|getAnnotation
argument_list|(
name|UriParams
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fieldParams
operator|!=
literal|null
condition|)
block|{
name|String
name|nestedPrefix
init|=
name|prefix
decl_stmt|;
name|String
name|extraPrefix
init|=
name|fieldParams
operator|.
name|prefix
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|extraPrefix
argument_list|)
condition|)
block|{
name|nestedPrefix
operator|+=
name|extraPrefix
expr_stmt|;
block|}
name|findClassProperties
argument_list|(
name|writer
argument_list|,
name|roundEnv
argument_list|,
name|componentModel
argument_list|,
name|endpointPaths
argument_list|,
name|endpointOptions
argument_list|,
name|fieldTypeElement
argument_list|,
name|nestedPrefix
argument_list|,
name|excludeProperties
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|docComment
init|=
name|findJavaDoc
argument_list|(
name|elementUtils
argument_list|,
name|fieldElement
argument_list|,
name|fieldName
argument_list|,
name|name
argument_list|,
name|classElement
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|docComment
argument_list|)
condition|)
block|{
name|docComment
operator|=
name|param
operator|.
name|description
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|docComment
argument_list|)
condition|)
block|{
name|docComment
operator|=
literal|""
expr_stmt|;
block|}
comment|// gather enums
name|Set
argument_list|<
name|String
argument_list|>
name|enums
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|isEnum
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|param
operator|.
name|enums
argument_list|()
argument_list|)
condition|)
block|{
name|isEnum
operator|=
literal|true
expr_stmt|;
name|String
index|[]
name|values
init|=
name|param
operator|.
name|enums
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|values
control|)
block|{
name|enums
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|isEnum
operator|=
name|fieldTypeElement
operator|!=
literal|null
operator|&&
name|fieldTypeElement
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|ENUM
expr_stmt|;
if|if
condition|(
name|isEnum
condition|)
block|{
name|TypeElement
name|enumClass
init|=
name|findTypeElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|fieldTypeElement
operator|.
name|asType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|enumClass
operator|!=
literal|null
condition|)
block|{
comment|// find all the enum constants which has the possible enum value that can be used
name|List
argument_list|<
name|VariableElement
argument_list|>
name|fields
init|=
name|ElementFilter
operator|.
name|fieldsIn
argument_list|(
name|enumClass
operator|.
name|getEnclosedElements
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|VariableElement
name|var
range|:
name|fields
control|)
block|{
if|if
condition|(
name|var
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|ENUM_CONSTANT
condition|)
block|{
name|String
name|val
init|=
name|var
operator|.
name|toString
argument_list|()
decl_stmt|;
name|enums
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// the field type may be overloaded by another type
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|param
operator|.
name|javaType
argument_list|()
argument_list|)
condition|)
block|{
name|fieldTypeName
operator|=
name|param
operator|.
name|javaType
argument_list|()
expr_stmt|;
block|}
name|boolean
name|isSecret
init|=
name|secret
operator|!=
literal|null
condition|?
name|secret
else|:
name|param
operator|.
name|secret
argument_list|()
decl_stmt|;
name|String
name|group
init|=
name|EndpointHelper
operator|.
name|labelAsGroupName
argument_list|(
name|label
argument_list|,
name|componentModel
operator|.
name|isConsumerOnly
argument_list|()
argument_list|,
name|componentModel
operator|.
name|isProducerOnly
argument_list|()
argument_list|)
decl_stmt|;
name|EndpointOption
name|option
init|=
operator|new
name|EndpointOption
argument_list|(
name|name
argument_list|,
name|displayName
argument_list|,
name|fieldTypeName
argument_list|,
name|required
argument_list|,
name|defaultValue
argument_list|,
name|defaultValueNote
argument_list|,
name|docComment
operator|.
name|trim
argument_list|()
argument_list|,
name|paramOptionalPrefix
argument_list|,
name|paramPrefix
argument_list|,
name|multiValue
argument_list|,
name|deprecated
argument_list|,
name|deprecationNote
argument_list|,
name|isSecret
argument_list|,
name|group
argument_list|,
name|label
argument_list|,
name|isEnum
argument_list|,
name|enums
argument_list|)
decl_stmt|;
name|endpointOptions
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// check super classes which may also have @UriParam fields
name|TypeElement
name|baseTypeElement
init|=
literal|null
decl_stmt|;
name|TypeMirror
name|superclass
init|=
name|classElement
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superclass
operator|!=
literal|null
condition|)
block|{
name|String
name|superClassName
init|=
name|canonicalClassName
argument_list|(
name|superclass
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|baseTypeElement
operator|=
name|findTypeElement
argument_list|(
name|processingEnv
argument_list|,
name|roundEnv
argument_list|,
name|superClassName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|baseTypeElement
operator|!=
literal|null
condition|)
block|{
name|classElement
operator|=
name|baseTypeElement
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
DECL|method|excludeProperty (String excludeProperties, String name)
specifier|private
specifier|static
name|boolean
name|excludeProperty
parameter_list|(
name|String
name|excludeProperties
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
index|[]
name|excludes
init|=
name|excludeProperties
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|exclude
range|:
name|excludes
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|exclude
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|parseAsMap (String data)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parseAsMap
parameter_list|(
name|String
name|data
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|answer
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|lines
init|=
name|data
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
if|if
condition|(
operator|!
name|line
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|idx
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|line
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// remove ending line break for the values
name|value
operator|=
name|value
operator|.
name|trim
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
name|key
operator|.
name|trim
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|secureAlias (String scheme, String alias)
specifier|private
specifier|static
name|boolean
name|secureAlias
parameter_list|(
name|String
name|scheme
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
if|if
condition|(
name|scheme
operator|.
name|equals
argument_list|(
name|alias
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// if alias is like scheme but with ending s its secured
if|if
condition|(
operator|(
name|scheme
operator|+
literal|"s"
operator|)
operator|.
name|equals
argument_list|(
name|alias
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|// CHECKSTYLE:ON
block|}
end_class

end_unit

