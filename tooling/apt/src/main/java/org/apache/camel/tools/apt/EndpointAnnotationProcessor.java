begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.tools.apt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|AbstractProcessor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|Filer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|RoundEnvironment
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|SupportedAnnotationTypes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|SupportedSourceVersion
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|SourceVersion
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|ElementKind
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|ExecutableElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|PackageElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|TypeElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|VariableElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|type
operator|.
name|MirroredTypeException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|type
operator|.
name|TypeMirror
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|util
operator|.
name|ElementFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|util
operator|.
name|Elements
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|Diagnostic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|FileObject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|StandardLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|IOHelper
operator|.
name|loadText
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|JsonSchemaHelper
operator|.
name|sanitizeDescription
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|Strings
operator|.
name|canonicalClassName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
operator|.
name|Strings
operator|.
name|isNullOrEmpty
import|;
end_import

begin_comment
comment|/**  * Processes all Camel {@link UriEndpoint}s and generate json schema and html documentation for the endpoint/component.  */
end_comment

begin_class
annotation|@
name|SupportedAnnotationTypes
argument_list|(
block|{
literal|"org.apache.camel.spi.*"
block|}
argument_list|)
annotation|@
name|SupportedSourceVersion
argument_list|(
name|SourceVersion
operator|.
name|RELEASE_7
argument_list|)
DECL|class|EndpointAnnotationProcessor
specifier|public
class|class
name|EndpointAnnotationProcessor
extends|extends
name|AbstractProcessor
block|{
DECL|method|process (Set<? extends TypeElement> annotations, final RoundEnvironment roundEnv)
specifier|public
name|boolean
name|process
parameter_list|(
name|Set
argument_list|<
name|?
extends|extends
name|TypeElement
argument_list|>
name|annotations
parameter_list|,
specifier|final
name|RoundEnvironment
name|roundEnv
parameter_list|)
block|{
if|if
condition|(
name|roundEnv
operator|.
name|processingOver
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Set
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|elements
init|=
name|roundEnv
operator|.
name|getElementsAnnotatedWith
argument_list|(
name|UriEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|element
range|:
name|elements
control|)
block|{
if|if
condition|(
name|element
operator|instanceof
name|TypeElement
condition|)
block|{
name|processEndpointClass
argument_list|(
name|roundEnv
argument_list|,
operator|(
name|TypeElement
operator|)
name|element
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|processEndpointClass (final RoundEnvironment roundEnv, final TypeElement classElement)
specifier|protected
name|void
name|processEndpointClass
parameter_list|(
specifier|final
name|RoundEnvironment
name|roundEnv
parameter_list|,
specifier|final
name|TypeElement
name|classElement
parameter_list|)
block|{
specifier|final
name|UriEndpoint
name|uriEndpoint
init|=
name|classElement
operator|.
name|getAnnotation
argument_list|(
name|UriEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|uriEndpoint
operator|!=
literal|null
condition|)
block|{
name|String
name|scheme
init|=
name|uriEndpoint
operator|.
name|scheme
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
comment|// support multiple schemes separated by comma, which maps to the exact same component
comment|// for example camel-mail has a bunch of component schema names that does that
name|String
index|[]
name|schemes
init|=
name|scheme
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|alias
range|:
name|schemes
control|)
block|{
comment|// write html documentation
name|String
name|name
init|=
name|canonicalClassName
argument_list|(
name|classElement
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|packageName
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
name|alias
operator|+
literal|".html"
decl_stmt|;
name|Func1
argument_list|<
name|PrintWriter
argument_list|,
name|Void
argument_list|>
name|handler
init|=
operator|new
name|Func1
argument_list|<
name|PrintWriter
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|(
name|PrintWriter
name|writer
parameter_list|)
block|{
name|writeHtmlDocumentation
argument_list|(
name|writer
argument_list|,
name|roundEnv
argument_list|,
name|classElement
argument_list|,
name|uriEndpoint
argument_list|,
name|alias
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|processFile
argument_list|(
name|packageName
argument_list|,
name|alias
argument_list|,
name|fileName
argument_list|,
name|handler
argument_list|)
expr_stmt|;
comment|// write json schema
name|fileName
operator|=
name|alias
operator|+
literal|".json"
expr_stmt|;
name|handler
operator|=
operator|new
name|Func1
argument_list|<
name|PrintWriter
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|(
name|PrintWriter
name|writer
parameter_list|)
block|{
name|writeJSonSchemeDocumentation
argument_list|(
name|writer
argument_list|,
name|roundEnv
argument_list|,
name|classElement
argument_list|,
name|uriEndpoint
argument_list|,
name|alias
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
expr_stmt|;
name|processFile
argument_list|(
name|packageName
argument_list|,
name|alias
argument_list|,
name|fileName
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|writeHtmlDocumentation (PrintWriter writer, RoundEnvironment roundEnv, TypeElement classElement, UriEndpoint uriEndpoint, String scheme)
specifier|protected
name|void
name|writeHtmlDocumentation
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|,
name|TypeElement
name|classElement
parameter_list|,
name|UriEndpoint
name|uriEndpoint
parameter_list|,
name|String
name|scheme
parameter_list|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"<html>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<header>"
argument_list|)
expr_stmt|;
name|String
name|title
init|=
name|scheme
operator|+
literal|" endpoint"
decl_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<title>"
operator|+
name|title
operator|+
literal|"</title>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"</header>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<body>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<h1>"
operator|+
name|title
operator|+
literal|"</h1>"
argument_list|)
expr_stmt|;
name|showDocumentationAndFieldInjections
argument_list|(
name|writer
argument_list|,
name|roundEnv
argument_list|,
name|classElement
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// This code is not my fault, it seems to honestly be the hacky way to find a class name in APT :)
name|TypeMirror
name|consumerType
init|=
literal|null
decl_stmt|;
try|try
block|{
name|uriEndpoint
operator|.
name|consumerClass
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MirroredTypeException
name|mte
parameter_list|)
block|{
name|consumerType
operator|=
name|mte
operator|.
name|getTypeMirror
argument_list|()
expr_stmt|;
block|}
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|String
name|consumerClassName
init|=
literal|null
decl_stmt|;
name|String
name|consumerPrefix
init|=
name|Strings
operator|.
name|getOrElse
argument_list|(
name|uriEndpoint
operator|.
name|consumerPrefix
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|consumerType
operator|!=
literal|null
condition|)
block|{
name|consumerClassName
operator|=
name|consumerType
operator|.
name|toString
argument_list|()
expr_stmt|;
name|TypeElement
name|consumerElement
init|=
name|findTypeElement
argument_list|(
name|roundEnv
argument_list|,
name|consumerClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|consumerElement
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"<h2>"
operator|+
name|scheme
operator|+
literal|" consumer"
operator|+
literal|"</h2>"
argument_list|)
expr_stmt|;
name|showDocumentationAndFieldInjections
argument_list|(
name|writer
argument_list|,
name|roundEnv
argument_list|,
name|consumerElement
argument_list|,
name|consumerPrefix
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
operator|&&
name|consumerClassName
operator|!=
literal|null
condition|)
block|{
name|warning
argument_list|(
literal|"APT could not find consumer class "
operator|+
name|consumerClassName
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|println
argument_list|(
literal|"</body>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"</html>"
argument_list|)
expr_stmt|;
block|}
DECL|method|writeJSonSchemeDocumentation (PrintWriter writer, RoundEnvironment roundEnv, TypeElement classElement, UriEndpoint uriEndpoint, String scheme)
specifier|protected
name|void
name|writeJSonSchemeDocumentation
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|,
name|TypeElement
name|classElement
parameter_list|,
name|UriEndpoint
name|uriEndpoint
parameter_list|,
name|String
name|scheme
parameter_list|)
block|{
comment|// gather component information
name|ComponentModel
name|componentModel
init|=
name|findComponentProperties
argument_list|(
name|roundEnv
argument_list|,
name|scheme
argument_list|)
decl_stmt|;
comment|// get endpoint information which is divided into paths and options (though there should really only be one path)
name|Set
argument_list|<
name|EndpointPath
argument_list|>
name|endpointPaths
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|EndpointOption
argument_list|>
name|endpointOptions
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|findClassProperties
argument_list|(
name|writer
argument_list|,
name|roundEnv
argument_list|,
name|endpointPaths
argument_list|,
name|endpointOptions
argument_list|,
name|classElement
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|String
name|json
init|=
name|createParameterJsonSchema
argument_list|(
name|componentModel
argument_list|,
name|endpointPaths
argument_list|,
name|endpointOptions
argument_list|)
decl_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
DECL|method|createParameterJsonSchema (ComponentModel componentModel, Set<EndpointPath> paths, Set<EndpointOption> options)
specifier|public
name|String
name|createParameterJsonSchema
parameter_list|(
name|ComponentModel
name|componentModel
parameter_list|,
name|Set
argument_list|<
name|EndpointPath
argument_list|>
name|paths
parameter_list|,
name|Set
argument_list|<
name|EndpointOption
argument_list|>
name|options
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{"
argument_list|)
decl_stmt|;
comment|// component model
name|buffer
operator|.
name|append
argument_list|(
literal|"\n \"component\": {"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"scheme\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"description\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|getDescription
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"javaType\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|getJavaType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"groupId\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"artifactId\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \"version\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|componentModel
operator|.
name|getVersionId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n  },"
argument_list|)
expr_stmt|;
comment|// and empty component properties as placeholder for future improvement
name|buffer
operator|.
name|append
argument_list|(
literal|"\n  \"componentProperties\": {"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n  },"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n  \"properties\": {"
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
comment|// include paths in the top
for|for
control|(
name|EndpointPath
name|path
range|:
name|paths
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|JsonSchemaHelper
operator|.
name|toJson
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|,
literal|"path"
argument_list|,
name|path
operator|.
name|getType
argument_list|()
argument_list|,
literal|""
argument_list|,
name|path
operator|.
name|getDocumentation
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// and then regular parameter options
for|for
control|(
name|EndpointOption
name|entry
range|:
name|options
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    "
argument_list|)
expr_stmt|;
comment|// as its json we need to sanitize the docs
name|String
name|doc
init|=
name|entry
operator|.
name|getDocumentationWithNotes
argument_list|()
decl_stmt|;
name|doc
operator|=
name|sanitizeDescription
argument_list|(
name|doc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|JsonSchemaHelper
operator|.
name|toJson
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
literal|"parameter"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|,
name|entry
operator|.
name|getDefaultValue
argument_list|()
argument_list|,
name|doc
argument_list|,
name|entry
operator|.
name|isEnumType
argument_list|()
argument_list|,
name|entry
operator|.
name|getEnums
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n  }"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n}\n"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|showDocumentationAndFieldInjections (PrintWriter writer, RoundEnvironment roundEnv, TypeElement classElement, String prefix)
specifier|protected
name|void
name|showDocumentationAndFieldInjections
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|,
name|TypeElement
name|classElement
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|String
name|classDoc
init|=
name|processingEnv
operator|.
name|getElementUtils
argument_list|()
operator|.
name|getDocComment
argument_list|(
name|classElement
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|classDoc
argument_list|)
condition|)
block|{
comment|// remove dodgy @version that we may have in class javadoc
name|classDoc
operator|=
name|classDoc
operator|.
name|replaceFirst
argument_list|(
literal|"\\@version"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|classDoc
operator|=
name|classDoc
operator|.
name|trim
argument_list|()
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<p>"
operator|+
name|classDoc
operator|+
literal|"</p>"
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|EndpointPath
argument_list|>
name|endpointPaths
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|EndpointOption
argument_list|>
name|endpointOptions
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|findClassProperties
argument_list|(
name|writer
argument_list|,
name|roundEnv
argument_list|,
name|endpointPaths
argument_list|,
name|endpointOptions
argument_list|,
name|classElement
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|endpointOptions
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|endpointPaths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"<table class='table'>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<th>Name</th>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<th>Kind</th>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<th>Type</th>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<th>Default Value</th>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<th>Enum Values</th>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<th>Description</th>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
comment|// include paths in the top
for|for
control|(
name|EndpointPath
name|path
range|:
name|endpointPaths
control|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<td>"
operator|+
name|path
operator|.
name|getName
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<td>"
operator|+
name|path
operator|.
name|getType
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<td>"
operator|+
literal|"path"
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<td>"
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<td>"
operator|+
name|path
operator|.
name|getDocumentation
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
comment|// and then regular parameter options
for|for
control|(
name|EndpointOption
name|option
range|:
name|endpointOptions
control|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<td>"
operator|+
name|option
operator|.
name|getName
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<td>"
operator|+
name|option
operator|.
name|getType
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<td>"
operator|+
literal|"parameter"
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<td>"
operator|+
name|option
operator|.
name|getDefaultValue
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<td>"
operator|+
name|option
operator|.
name|getEnumValuesAsHtml
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<td>"
operator|+
name|option
operator|.
name|getDocumentationWithNotes
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|println
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findComponentProperties (RoundEnvironment roundEnv, String scheme)
specifier|protected
name|ComponentModel
name|findComponentProperties
parameter_list|(
name|RoundEnvironment
name|roundEnv
parameter_list|,
name|String
name|scheme
parameter_list|)
block|{
name|ComponentModel
name|model
init|=
operator|new
name|ComponentModel
argument_list|(
name|scheme
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|loadResource
argument_list|(
literal|"META-INF/services/org/apache/camel/component"
argument_list|,
name|scheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|parseAsMap
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|model
operator|.
name|setJavaType
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|data
operator|=
name|loadResource
argument_list|(
literal|"META-INF/services/org/apache/camel"
argument_list|,
literal|"component.properties"
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|parseAsMap
argument_list|(
name|data
argument_list|)
decl_stmt|;
comment|// now we have a lot more data, so we need to load it as key/value
comment|// need to sanitize the description first
name|String
name|doc
init|=
name|map
operator|.
name|get
argument_list|(
literal|"projectDescription"
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|model
operator|.
name|setDescription
argument_list|(
name|sanitizeDescription
argument_list|(
name|doc
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|model
operator|.
name|setDescription
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"groupId"
argument_list|)
condition|)
block|{
name|model
operator|.
name|setGroupId
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"groupId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|model
operator|.
name|setGroupId
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"artifactId"
argument_list|)
condition|)
block|{
name|model
operator|.
name|setArtifactId
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"artifactId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|model
operator|.
name|setArtifactId
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"version"
argument_list|)
condition|)
block|{
name|model
operator|.
name|setVersionId
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"version"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|model
operator|.
name|setVersionId
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
comment|// favor to use class javadoc of component as description
if|if
condition|(
name|model
operator|.
name|getJavaType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Elements
name|elementUtils
init|=
name|processingEnv
operator|.
name|getElementUtils
argument_list|()
decl_stmt|;
name|TypeElement
name|typeElement
init|=
name|findTypeElement
argument_list|(
name|roundEnv
argument_list|,
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeElement
operator|!=
literal|null
condition|)
block|{
name|String
name|doc
init|=
name|elementUtils
operator|.
name|getDocComment
argument_list|(
name|typeElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
comment|// need to sanitize the description first (we only want a summary)
name|doc
operator|=
name|sanitizeDescription
argument_list|(
name|doc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// the javadoc may actually be empty, so only change the doc if we got something
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|model
operator|.
name|setDescription
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|model
return|;
block|}
DECL|method|findClassProperties (PrintWriter writer, RoundEnvironment roundEnv, Set<EndpointPath> endpointPaths, Set<EndpointOption> endpointOptions, TypeElement classElement, String prefix)
specifier|protected
name|void
name|findClassProperties
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|,
name|Set
argument_list|<
name|EndpointPath
argument_list|>
name|endpointPaths
parameter_list|,
name|Set
argument_list|<
name|EndpointOption
argument_list|>
name|endpointOptions
parameter_list|,
name|TypeElement
name|classElement
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|Elements
name|elementUtils
init|=
name|processingEnv
operator|.
name|getElementUtils
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|VariableElement
argument_list|>
name|fieldElements
init|=
name|ElementFilter
operator|.
name|fieldsIn
argument_list|(
name|classElement
operator|.
name|getEnclosedElements
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|VariableElement
name|fieldElement
range|:
name|fieldElements
control|)
block|{
name|UriPath
name|path
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|UriPath
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|fieldName
init|=
name|fieldElement
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|path
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
name|fieldName
expr_stmt|;
block|}
name|name
operator|=
name|prefix
operator|+
name|name
expr_stmt|;
name|TypeMirror
name|fieldType
init|=
name|fieldElement
operator|.
name|asType
argument_list|()
decl_stmt|;
name|String
name|fieldTypeName
init|=
name|fieldType
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|docComment
init|=
name|elementUtils
operator|.
name|getDocComment
argument_list|(
name|fieldElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|docComment
argument_list|)
condition|)
block|{
name|String
name|setter
init|=
literal|"set"
operator|+
name|fieldName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|setter
operator|+=
name|fieldName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//  lets find the setter
name|List
argument_list|<
name|ExecutableElement
argument_list|>
name|methods
init|=
name|ElementFilter
operator|.
name|methodsIn
argument_list|(
name|classElement
operator|.
name|getEnclosedElements
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ExecutableElement
name|method
range|:
name|methods
control|)
block|{
name|String
name|methodName
init|=
name|method
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|setter
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
operator|&&
name|method
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|doc
init|=
name|elementUtils
operator|.
name|getDocComment
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|docComment
operator|=
name|doc
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|docComment
argument_list|)
condition|)
block|{
name|docComment
operator|=
name|path
operator|.
name|description
argument_list|()
expr_stmt|;
block|}
name|EndpointPath
name|ep
init|=
operator|new
name|EndpointPath
argument_list|(
name|name
argument_list|,
name|fieldTypeName
argument_list|,
name|docComment
argument_list|)
decl_stmt|;
name|endpointPaths
operator|.
name|add
argument_list|(
name|ep
argument_list|)
expr_stmt|;
block|}
name|UriParam
name|param
init|=
name|fieldElement
operator|.
name|getAnnotation
argument_list|(
name|UriParam
operator|.
name|class
argument_list|)
decl_stmt|;
name|fieldName
operator|=
name|fieldElement
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|param
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|param
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
name|fieldName
expr_stmt|;
block|}
name|name
operator|=
name|prefix
operator|+
name|name
expr_stmt|;
name|String
name|defaultValue
init|=
name|param
operator|.
name|defaultValue
argument_list|()
decl_stmt|;
name|String
name|defaultValueNote
init|=
name|param
operator|.
name|defaultValueNote
argument_list|()
decl_stmt|;
comment|// if the field type is a nested parameter then iterate through its fields
name|TypeMirror
name|fieldType
init|=
name|fieldElement
operator|.
name|asType
argument_list|()
decl_stmt|;
name|String
name|fieldTypeName
init|=
name|fieldType
operator|.
name|toString
argument_list|()
decl_stmt|;
name|TypeElement
name|fieldTypeElement
init|=
name|findTypeElement
argument_list|(
name|roundEnv
argument_list|,
name|fieldTypeName
argument_list|)
decl_stmt|;
name|UriParams
name|fieldParams
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fieldTypeElement
operator|!=
literal|null
condition|)
block|{
name|fieldParams
operator|=
name|fieldTypeElement
operator|.
name|getAnnotation
argument_list|(
name|UriParams
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fieldParams
operator|!=
literal|null
condition|)
block|{
name|String
name|nestedPrefix
init|=
name|prefix
decl_stmt|;
name|String
name|extraPrefix
init|=
name|fieldParams
operator|.
name|prefix
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|extraPrefix
argument_list|)
condition|)
block|{
name|nestedPrefix
operator|+=
name|extraPrefix
expr_stmt|;
block|}
name|findClassProperties
argument_list|(
name|writer
argument_list|,
name|roundEnv
argument_list|,
name|endpointPaths
argument_list|,
name|endpointOptions
argument_list|,
name|fieldTypeElement
argument_list|,
name|nestedPrefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|docComment
init|=
name|elementUtils
operator|.
name|getDocComment
argument_list|(
name|fieldElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|docComment
argument_list|)
condition|)
block|{
name|String
name|setter
init|=
literal|"set"
operator|+
name|fieldName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|setter
operator|+=
name|fieldName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//  lets find the setter
name|List
argument_list|<
name|ExecutableElement
argument_list|>
name|methods
init|=
name|ElementFilter
operator|.
name|methodsIn
argument_list|(
name|classElement
operator|.
name|getEnclosedElements
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ExecutableElement
name|method
range|:
name|methods
control|)
block|{
name|String
name|methodName
init|=
name|method
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|setter
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
operator|&&
name|method
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|doc
init|=
name|elementUtils
operator|.
name|getDocComment
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|docComment
operator|=
name|doc
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|docComment
argument_list|)
condition|)
block|{
name|docComment
operator|=
name|param
operator|.
name|description
argument_list|()
expr_stmt|;
block|}
comment|// gather enums
name|Set
argument_list|<
name|String
argument_list|>
name|enums
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|isEnum
init|=
name|fieldTypeElement
operator|!=
literal|null
operator|&&
name|fieldTypeElement
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|ENUM
decl_stmt|;
if|if
condition|(
name|isEnum
condition|)
block|{
name|TypeElement
name|enumClass
init|=
name|findTypeElement
argument_list|(
name|roundEnv
argument_list|,
name|fieldTypeElement
operator|.
name|asType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// find all the enum constants which has the possible enum value that can be used
name|List
argument_list|<
name|VariableElement
argument_list|>
name|fields
init|=
name|ElementFilter
operator|.
name|fieldsIn
argument_list|(
name|enumClass
operator|.
name|getEnclosedElements
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|VariableElement
name|var
range|:
name|fields
control|)
block|{
if|if
condition|(
name|var
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|ENUM_CONSTANT
condition|)
block|{
name|String
name|val
init|=
name|var
operator|.
name|toString
argument_list|()
decl_stmt|;
name|enums
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|EndpointOption
name|option
init|=
operator|new
name|EndpointOption
argument_list|(
name|name
argument_list|,
name|fieldTypeName
argument_list|,
name|defaultValue
argument_list|,
name|defaultValueNote
argument_list|,
name|docComment
operator|.
name|trim
argument_list|()
argument_list|,
name|isEnum
argument_list|,
name|enums
argument_list|)
decl_stmt|;
name|endpointOptions
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// check super classes which may also have @UriParam fields
name|TypeElement
name|baseTypeElement
init|=
literal|null
decl_stmt|;
name|TypeMirror
name|superclass
init|=
name|classElement
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superclass
operator|!=
literal|null
condition|)
block|{
name|String
name|superClassName
init|=
name|canonicalClassName
argument_list|(
name|superclass
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|baseTypeElement
operator|=
name|findTypeElement
argument_list|(
name|roundEnv
argument_list|,
name|superClassName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|baseTypeElement
operator|!=
literal|null
condition|)
block|{
name|classElement
operator|=
name|baseTypeElement
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
DECL|method|findTypeElement (RoundEnvironment roundEnv, String className)
specifier|protected
name|TypeElement
name|findTypeElement
parameter_list|(
name|RoundEnvironment
name|roundEnv
parameter_list|,
name|String
name|className
parameter_list|)
block|{
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|className
argument_list|)
operator|||
literal|"java.lang.Object"
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|rootElements
init|=
name|roundEnv
operator|.
name|getRootElements
argument_list|()
decl_stmt|;
for|for
control|(
name|Element
name|rootElement
range|:
name|rootElements
control|)
block|{
if|if
condition|(
name|rootElement
operator|instanceof
name|TypeElement
condition|)
block|{
name|TypeElement
name|typeElement
init|=
operator|(
name|TypeElement
operator|)
name|rootElement
decl_stmt|;
name|String
name|aRootName
init|=
name|canonicalClassName
argument_list|(
name|typeElement
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|aRootName
argument_list|)
condition|)
block|{
return|return
name|typeElement
return|;
block|}
block|}
block|}
comment|// fallback using package name
name|Elements
name|elementUtils
init|=
name|processingEnv
operator|.
name|getElementUtils
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|String
name|packageName
init|=
name|className
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|PackageElement
name|pe
init|=
name|elementUtils
operator|.
name|getPackageElement
argument_list|(
name|packageName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pe
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|enclosedElements
init|=
name|pe
operator|.
name|getEnclosedElements
argument_list|()
decl_stmt|;
for|for
control|(
name|Element
name|rootElement
range|:
name|enclosedElements
control|)
block|{
if|if
condition|(
name|rootElement
operator|instanceof
name|TypeElement
condition|)
block|{
name|TypeElement
name|typeElement
init|=
operator|(
name|TypeElement
operator|)
name|rootElement
decl_stmt|;
name|String
name|aRootName
init|=
name|canonicalClassName
argument_list|(
name|typeElement
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|aRootName
argument_list|)
condition|)
block|{
return|return
name|typeElement
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Helper method to produce class output text file using the given handler      */
DECL|method|processFile (String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler)
specifier|protected
name|void
name|processFile
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|scheme
parameter_list|,
name|String
name|fileName
parameter_list|,
name|Func1
argument_list|<
name|PrintWriter
argument_list|,
name|Void
argument_list|>
name|handler
parameter_list|)
block|{
name|PrintWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Writer
name|out
decl_stmt|;
name|Filer
name|filer
init|=
name|processingEnv
operator|.
name|getFiler
argument_list|()
decl_stmt|;
name|FileObject
name|resource
decl_stmt|;
try|try
block|{
name|resource
operator|=
name|filer
operator|.
name|getResource
argument_list|(
name|StandardLocation
operator|.
name|CLASS_OUTPUT
argument_list|,
name|packageName
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|resource
operator|=
name|filer
operator|.
name|createResource
argument_list|(
name|StandardLocation
operator|.
name|CLASS_OUTPUT
argument_list|,
name|packageName
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
name|URI
name|uri
init|=
name|resource
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|File
name|file
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|warning
argument_list|(
literal|"Could not convert output directory resource URI to a file "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
name|warning
argument_list|(
literal|"No class output directory could be found!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|PrintWriter
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|handler
operator|.
name|call
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadResource (String packageName, String fileName)
specifier|protected
name|String
name|loadResource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|Filer
name|filer
init|=
name|processingEnv
operator|.
name|getFiler
argument_list|()
decl_stmt|;
name|FileObject
name|resource
decl_stmt|;
try|try
block|{
name|resource
operator|=
name|filer
operator|.
name|getResource
argument_list|(
name|StandardLocation
operator|.
name|CLASS_OUTPUT
argument_list|,
literal|""
argument_list|,
name|packageName
operator|+
literal|"/"
operator|+
name|fileName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
return|return
literal|"Crap"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
return|;
block|}
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|InputStream
name|is
init|=
name|resource
operator|.
name|openInputStream
argument_list|()
decl_stmt|;
return|return
name|loadText
argument_list|(
name|is
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|warning
argument_list|(
literal|"Could not load file"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|parseAsMap (String data)
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parseAsMap
parameter_list|(
name|String
name|data
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|answer
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|lines
init|=
name|data
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|int
name|idx
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|line
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// remove ending line break for the values
name|value
operator|=
name|value
operator|.
name|trim
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
name|key
operator|.
name|trim
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|log (String message)
specifier|protected
name|void
name|log
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|processingEnv
operator|.
name|getMessager
argument_list|()
operator|.
name|printMessage
argument_list|(
name|Diagnostic
operator|.
name|Kind
operator|.
name|NOTE
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|warning (String message)
specifier|protected
name|void
name|warning
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|processingEnv
operator|.
name|getMessager
argument_list|()
operator|.
name|printMessage
argument_list|(
name|Diagnostic
operator|.
name|Kind
operator|.
name|WARNING
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|error (String message)
specifier|protected
name|void
name|error
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|processingEnv
operator|.
name|getMessager
argument_list|()
operator|.
name|printMessage
argument_list|(
name|Diagnostic
operator|.
name|Kind
operator|.
name|ERROR
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|log (Throwable e)
specifier|protected
name|void
name|log
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|processingEnv
operator|.
name|getMessager
argument_list|()
operator|.
name|printMessage
argument_list|(
name|Diagnostic
operator|.
name|Kind
operator|.
name|ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|processingEnv
operator|.
name|getMessager
argument_list|()
operator|.
name|printMessage
argument_list|(
name|Diagnostic
operator|.
name|Kind
operator|.
name|ERROR
argument_list|,
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|ComponentModel
specifier|private
specifier|static
specifier|final
class|class
name|ComponentModel
block|{
DECL|field|scheme
specifier|private
name|String
name|scheme
decl_stmt|;
DECL|field|javaType
specifier|private
name|String
name|javaType
decl_stmt|;
DECL|field|description
specifier|private
name|String
name|description
decl_stmt|;
DECL|field|groupId
specifier|private
name|String
name|groupId
decl_stmt|;
DECL|field|artifactId
specifier|private
name|String
name|artifactId
decl_stmt|;
DECL|field|versionId
specifier|private
name|String
name|versionId
decl_stmt|;
DECL|method|ComponentModel (String scheme)
specifier|private
name|ComponentModel
parameter_list|(
name|String
name|scheme
parameter_list|)
block|{
name|this
operator|.
name|scheme
operator|=
name|scheme
expr_stmt|;
block|}
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|scheme
return|;
block|}
DECL|method|getJavaType ()
specifier|public
name|String
name|getJavaType
parameter_list|()
block|{
return|return
name|javaType
return|;
block|}
DECL|method|setJavaType (String javaType)
specifier|public
name|void
name|setJavaType
parameter_list|(
name|String
name|javaType
parameter_list|)
block|{
name|this
operator|.
name|javaType
operator|=
name|javaType
expr_stmt|;
block|}
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
DECL|method|setDescription (String description)
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
DECL|method|getGroupId ()
specifier|public
name|String
name|getGroupId
parameter_list|()
block|{
return|return
name|groupId
return|;
block|}
DECL|method|setGroupId (String groupId)
specifier|public
name|void
name|setGroupId
parameter_list|(
name|String
name|groupId
parameter_list|)
block|{
name|this
operator|.
name|groupId
operator|=
name|groupId
expr_stmt|;
block|}
DECL|method|getArtifactId ()
specifier|public
name|String
name|getArtifactId
parameter_list|()
block|{
return|return
name|artifactId
return|;
block|}
DECL|method|setArtifactId (String artifactId)
specifier|public
name|void
name|setArtifactId
parameter_list|(
name|String
name|artifactId
parameter_list|)
block|{
name|this
operator|.
name|artifactId
operator|=
name|artifactId
expr_stmt|;
block|}
DECL|method|getVersionId ()
specifier|public
name|String
name|getVersionId
parameter_list|()
block|{
return|return
name|versionId
return|;
block|}
DECL|method|setVersionId (String versionId)
specifier|public
name|void
name|setVersionId
parameter_list|(
name|String
name|versionId
parameter_list|)
block|{
name|this
operator|.
name|versionId
operator|=
name|versionId
expr_stmt|;
block|}
block|}
DECL|class|EndpointOption
specifier|private
specifier|static
specifier|final
class|class
name|EndpointOption
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|defaultValue
specifier|private
name|String
name|defaultValue
decl_stmt|;
DECL|field|defaultValueNote
specifier|private
name|String
name|defaultValueNote
decl_stmt|;
DECL|field|documentation
specifier|private
name|String
name|documentation
decl_stmt|;
DECL|field|enumType
specifier|private
name|boolean
name|enumType
decl_stmt|;
DECL|field|enums
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|enums
decl_stmt|;
DECL|method|EndpointOption (String name, String type, String defaultValue, String defaultValueNote, String documentation, boolean enumType, Set<String> enums)
specifier|private
name|EndpointOption
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|String
name|defaultValueNote
parameter_list|,
name|String
name|documentation
parameter_list|,
name|boolean
name|enumType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|enums
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|defaultValue
operator|=
name|defaultValue
expr_stmt|;
name|this
operator|.
name|defaultValueNote
operator|=
name|defaultValueNote
expr_stmt|;
name|this
operator|.
name|documentation
operator|=
name|documentation
expr_stmt|;
name|this
operator|.
name|enumType
operator|=
name|enumType
expr_stmt|;
name|this
operator|.
name|enums
operator|=
name|enums
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getDefaultValue ()
specifier|public
name|String
name|getDefaultValue
parameter_list|()
block|{
return|return
name|defaultValue
return|;
block|}
DECL|method|getDocumentation ()
specifier|public
name|String
name|getDocumentation
parameter_list|()
block|{
return|return
name|documentation
return|;
block|}
DECL|method|getEnumValuesAsHtml ()
specifier|public
name|String
name|getEnumValuesAsHtml
parameter_list|()
block|{
name|CollectionStringBuffer
name|csb
init|=
operator|new
name|CollectionStringBuffer
argument_list|(
literal|"<br/>"
argument_list|)
decl_stmt|;
if|if
condition|(
name|enums
operator|!=
literal|null
operator|&&
name|enums
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|e
range|:
name|enums
control|)
block|{
name|csb
operator|.
name|append
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|csb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getDocumentationWithNotes ()
specifier|public
name|String
name|getDocumentationWithNotes
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|documentation
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|defaultValueNote
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|". Default value notice: "
argument_list|)
operator|.
name|append
argument_list|(
name|defaultValueNote
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|isEnumType ()
specifier|public
name|boolean
name|isEnumType
parameter_list|()
block|{
return|return
name|enumType
return|;
block|}
DECL|method|getEnums ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getEnums
parameter_list|()
block|{
return|return
name|enums
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|EndpointOption
name|that
init|=
operator|(
name|EndpointOption
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
DECL|class|EndpointPath
specifier|private
specifier|static
specifier|final
class|class
name|EndpointPath
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|documentation
specifier|private
name|String
name|documentation
decl_stmt|;
DECL|method|EndpointPath (String name, String type, String documentation)
specifier|private
name|EndpointPath
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|documentation
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|documentation
operator|=
name|documentation
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getDocumentation ()
specifier|public
name|String
name|getDocumentation
parameter_list|()
block|{
return|return
name|documentation
return|;
block|}
block|}
block|}
end_class

end_unit

