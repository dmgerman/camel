begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.tools.apt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|RoundEnvironment
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|SupportedAnnotationTypes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|TypeElement
import|;
end_import

begin_class
annotation|@
name|SupportedAnnotationTypes
argument_list|(
block|{
literal|"org.apache.camel.Converter"
block|}
argument_list|)
DECL|class|CoreTypeConverterProcessor
specifier|public
class|class
name|CoreTypeConverterProcessor
extends|extends
name|AbstractTypeConverterGenerator
block|{
DECL|field|CORE_STATIC_CLASSNAME
specifier|private
specifier|static
specifier|final
name|String
name|CORE_STATIC_CLASSNAME
init|=
literal|"org.apache.camel.impl.converter.CoreStaticTypeConverterLoader"
decl_stmt|;
annotation|@
name|Override
DECL|method|doProcess (Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)
specifier|protected
name|void
name|doProcess
parameter_list|(
name|Set
argument_list|<
name|?
extends|extends
name|TypeElement
argument_list|>
name|annotations
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|processingEnv
operator|.
name|getElementUtils
argument_list|()
operator|.
name|getTypeElement
argument_list|(
name|CORE_STATIC_CLASSNAME
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
comment|// We're in tests, do not generate anything
if|if
condition|(
name|this
operator|.
name|processingEnv
operator|.
name|getElementUtils
argument_list|()
operator|.
name|getTypeElement
argument_list|(
literal|"org.apache.camel.converter.ObjectConverter"
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|doProcess
argument_list|(
name|annotations
argument_list|,
name|roundEnv
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|convertersKey (String currentClass)
name|String
name|convertersKey
parameter_list|(
name|String
name|currentClass
parameter_list|)
block|{
comment|// we want to write all converters into the same class
return|return
name|CORE_STATIC_CLASSNAME
return|;
block|}
annotation|@
name|Override
DECL|method|acceptClass (Element element)
name|boolean
name|acceptClass
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|writeConverters (Map<String, ClassConverters> converters)
name|void
name|writeConverters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ClassConverters
argument_list|>
name|converters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// now write all the converters into the same class
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ClassConverters
argument_list|>
name|entry
range|:
name|converters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ClassConverters
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|writeConverters
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

