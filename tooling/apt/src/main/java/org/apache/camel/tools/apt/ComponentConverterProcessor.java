begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.tools.apt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|RoundEnvironment
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|SupportedAnnotationTypes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|AnnotationMirror
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|AnnotationValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|ElementKind
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|ExecutableElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|TypeElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|type
operator|.
name|TypeMirror
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|Diagnostic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|JavaFileObject
import|;
end_import

begin_class
annotation|@
name|SupportedAnnotationTypes
argument_list|(
block|{
literal|"org.apache.camel.Converter"
block|}
argument_list|)
DECL|class|ComponentConverterProcessor
specifier|public
class|class
name|ComponentConverterProcessor
extends|extends
name|AbstractCamelAnnotationProcessor
block|{
DECL|class|ClassConverters
specifier|private
specifier|static
specifier|final
class|class
name|ClassConverters
block|{
DECL|field|converters
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|TypeMirror
argument_list|,
name|ExecutableElement
argument_list|>
argument_list|>
name|converters
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|comparator
specifier|private
specifier|final
name|Comparator
argument_list|<
name|TypeMirror
argument_list|>
name|comparator
decl_stmt|;
DECL|field|fallbackConverters
specifier|private
specifier|final
name|List
argument_list|<
name|ExecutableElement
argument_list|>
name|fallbackConverters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|ClassConverters (Comparator<TypeMirror> comparator)
name|ClassConverters
parameter_list|(
name|Comparator
argument_list|<
name|TypeMirror
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
block|}
DECL|method|addTypeConverter (TypeMirror to, TypeMirror from, ExecutableElement ee)
name|void
name|addTypeConverter
parameter_list|(
name|TypeMirror
name|to
parameter_list|,
name|TypeMirror
name|from
parameter_list|,
name|ExecutableElement
name|ee
parameter_list|)
block|{
name|converters
operator|.
name|computeIfAbsent
argument_list|(
name|toString
argument_list|(
name|to
argument_list|)
argument_list|,
name|c
lambda|->
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|comparator
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|from
argument_list|,
name|ee
argument_list|)
expr_stmt|;
block|}
DECL|method|addFallbackTypeConverter (ExecutableElement ee)
name|void
name|addFallbackTypeConverter
parameter_list|(
name|ExecutableElement
name|ee
parameter_list|)
block|{
name|fallbackConverters
operator|.
name|add
argument_list|(
name|ee
argument_list|)
expr_stmt|;
block|}
DECL|method|getConverters ()
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|TypeMirror
argument_list|,
name|ExecutableElement
argument_list|>
argument_list|>
name|getConverters
parameter_list|()
block|{
return|return
name|converters
return|;
block|}
DECL|method|getFallbackConverters ()
name|List
argument_list|<
name|ExecutableElement
argument_list|>
name|getFallbackConverters
parameter_list|()
block|{
return|return
name|fallbackConverters
return|;
block|}
DECL|method|toString (TypeMirror type)
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
name|TypeMirror
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"<.*>"
argument_list|,
literal|""
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|doProcess (Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)
specifier|protected
name|void
name|doProcess
parameter_list|(
name|Set
argument_list|<
name|?
extends|extends
name|TypeElement
argument_list|>
name|annotations
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ClassConverters
argument_list|>
name|converters
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Comparator
argument_list|<
name|TypeMirror
argument_list|>
name|comparator
init|=
operator|(
name|o1
expr|,
name|o2
operator|)
operator|->
name|processingEnv
operator|.
name|getTypeUtils
argument_list|()
operator|.
name|isAssignable
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
condition|?
operator|-
literal|1
else|:
name|processingEnv
operator|.
name|getTypeUtils
argument_list|()
operator|.
name|isAssignable
argument_list|(
name|o2
argument_list|,
name|o1
argument_list|)
condition|?
operator|+
literal|1
else|:
name|o1
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|TypeElement
name|converterAnnotationType
init|=
name|this
operator|.
name|processingEnv
operator|.
name|getElementUtils
argument_list|()
operator|.
name|getTypeElement
argument_list|(
literal|"org.apache.camel.Converter"
argument_list|)
decl_stmt|;
comment|// the current class with type converters
name|String
name|currentClass
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Element
name|element
range|:
name|roundEnv
operator|.
name|getElementsAnnotatedWith
argument_list|(
name|converterAnnotationType
argument_list|)
control|)
block|{
comment|// we need a top level class first
if|if
condition|(
name|element
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|CLASS
condition|)
block|{
name|TypeElement
name|te
init|=
operator|(
name|TypeElement
operator|)
name|element
decl_stmt|;
if|if
condition|(
operator|!
name|te
operator|.
name|getNestingKind
argument_list|()
operator|.
name|isNested
argument_list|()
operator|&&
name|isLoaderEnabled
argument_list|(
name|te
argument_list|)
condition|)
block|{
comment|// we only accept top-level classes and if loader is enabled
name|currentClass
operator|=
name|te
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentClass
operator|!=
literal|null
operator|&&
name|element
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|METHOD
condition|)
block|{
name|ExecutableElement
name|ee
init|=
operator|(
name|ExecutableElement
operator|)
name|element
decl_stmt|;
name|TypeMirror
name|to
init|=
name|ee
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
name|TypeMirror
name|from
init|=
name|ee
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|asType
argument_list|()
decl_stmt|;
name|String
name|fromStr
init|=
name|toString
argument_list|(
name|from
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fromStr
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|)
block|{
name|TypeElement
name|e
init|=
name|this
operator|.
name|processingEnv
operator|.
name|getElementUtils
argument_list|()
operator|.
name|getTypeElement
argument_list|(
name|fromStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|from
operator|=
name|e
operator|.
name|asType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|processingEnv
operator|.
name|getMessager
argument_list|()
operator|.
name|printMessage
argument_list|(
name|Diagnostic
operator|.
name|Kind
operator|.
name|NOTE
argument_list|,
literal|"Could not retrieve type element for "
operator|+
name|fromStr
argument_list|)
expr_stmt|;
block|}
block|}
name|converters
operator|.
name|computeIfAbsent
argument_list|(
name|currentClass
argument_list|,
name|c
lambda|->
operator|new
name|ClassConverters
argument_list|(
name|comparator
argument_list|)
argument_list|)
operator|.
name|addTypeConverter
argument_list|(
name|to
argument_list|,
name|from
argument_list|,
name|ee
argument_list|)
expr_stmt|;
block|}
block|}
name|TypeElement
name|fallbackAnnotationType
init|=
name|this
operator|.
name|processingEnv
operator|.
name|getElementUtils
argument_list|()
operator|.
name|getTypeElement
argument_list|(
literal|"org.apache.camel.FallbackConverter"
argument_list|)
decl_stmt|;
name|currentClass
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Element
name|element
range|:
name|roundEnv
operator|.
name|getElementsAnnotatedWith
argument_list|(
name|fallbackAnnotationType
argument_list|)
control|)
block|{
if|if
condition|(
name|element
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|CLASS
condition|)
block|{
name|TypeElement
name|te
init|=
operator|(
name|TypeElement
operator|)
name|element
decl_stmt|;
if|if
condition|(
operator|!
name|te
operator|.
name|getNestingKind
argument_list|()
operator|.
name|isNested
argument_list|()
operator|&&
name|isLoaderEnabled
argument_list|(
name|te
argument_list|)
condition|)
block|{
comment|// we only accept top-level classes and if loader is enabled
name|currentClass
operator|=
name|te
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentClass
operator|!=
literal|null
operator|&&
name|element
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|METHOD
condition|)
block|{
name|ExecutableElement
name|ee
init|=
operator|(
name|ExecutableElement
operator|)
name|element
decl_stmt|;
name|converters
operator|.
name|computeIfAbsent
argument_list|(
name|currentClass
argument_list|,
name|c
lambda|->
operator|new
name|ClassConverters
argument_list|(
name|comparator
argument_list|)
argument_list|)
operator|.
name|addFallbackTypeConverter
argument_list|(
name|ee
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now write all the converters
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ClassConverters
argument_list|>
name|entry
range|:
name|converters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ClassConverters
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|writeConverterLoader
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|converterAnnotationType
argument_list|,
name|fallbackAnnotationType
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isLoaderEnabled (Element element)
specifier|private
specifier|static
name|boolean
name|isLoaderEnabled
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
for|for
control|(
name|AnnotationMirror
name|ann
range|:
name|element
operator|.
name|getAnnotationMirrors
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|ExecutableElement
argument_list|,
name|?
extends|extends
name|AnnotationValue
argument_list|>
name|entry
range|:
name|ann
operator|.
name|getElementValues
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
literal|"loader"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|writeConverterLoader (String fqn, ClassConverters converters, TypeElement converterAnnotationType, TypeElement fallbackAnnotationType)
specifier|private
name|void
name|writeConverterLoader
parameter_list|(
name|String
name|fqn
parameter_list|,
name|ClassConverters
name|converters
parameter_list|,
name|TypeElement
name|converterAnnotationType
parameter_list|,
name|TypeElement
name|fallbackAnnotationType
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|pos
init|=
name|fqn
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|String
name|p
init|=
name|fqn
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|String
name|c
init|=
name|fqn
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
operator|+
literal|"Loader"
decl_stmt|;
name|JavaFileObject
name|jfo
init|=
name|processingEnv
operator|.
name|getFiler
argument_list|()
operator|.
name|createSourceFile
argument_list|(
name|p
operator|+
literal|"."
operator|+
name|c
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|converterClasses
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|Writer
name|writer
init|=
name|jfo
operator|.
name|openWriter
argument_list|()
init|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"package "
argument_list|)
operator|.
name|append
argument_list|(
name|p
argument_list|)
operator|.
name|append
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"import org.apache.camel.Exchange;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"import org.apache.camel.TypeConversionException;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"import org.apache.camel.TypeConverterLoaderException;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"import org.apache.camel.spi.TypeConverterLoader;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"import org.apache.camel.spi.TypeConverterRegistry;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"import org.apache.camel.support.TypeConverterSupport;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"import org.apache.camel.util.DoubleMap;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"@SuppressWarnings(\"unchecked\")\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"public class "
argument_list|)
operator|.
name|append
argument_list|(
name|c
argument_list|)
operator|.
name|append
argument_list|(
literal|" implements TypeConverterLoader {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    public static final "
argument_list|)
operator|.
name|append
argument_list|(
name|c
argument_list|)
operator|.
name|append
argument_list|(
literal|" INSTANCE = new "
argument_list|)
operator|.
name|append
argument_list|(
name|c
argument_list|)
operator|.
name|append
argument_list|(
literal|"();\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    static abstract class SimpleTypeConverter extends TypeConverterSupport {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        private final boolean allowNull;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        public SimpleTypeConverter(boolean allowNull) {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            this.allowNull = allowNull;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        @Override\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        public boolean allowNull() {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            return allowNull;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        @Override\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        public<T> T convertTo(Class<T> type, Exchange exchange, Object value) throws TypeConversionException {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            try {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"                return (T) doConvert(exchange, value);\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            } catch (TypeConversionException e) {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"                throw e;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            } catch (Exception e) {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"                throw new TypeConversionException(value, type, e);\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        protected abstract Object doConvert(Exchange exchange, Object value) throws Exception;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    };\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    private DoubleMap<Class<?>, Class<?>, SimpleTypeConverter> converters = new DoubleMap<>(256);\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    private "
argument_list|)
operator|.
name|append
argument_list|(
name|c
argument_list|)
operator|.
name|append
argument_list|(
literal|"() {\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|TypeMirror
argument_list|,
name|ExecutableElement
argument_list|>
argument_list|>
name|to
range|:
name|converters
operator|.
name|getConverters
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TypeMirror
argument_list|,
name|ExecutableElement
argument_list|>
name|from
range|:
name|to
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|boolean
name|allowNull
init|=
literal|false
decl_stmt|;
for|for
control|(
name|AnnotationMirror
name|ann
range|:
name|from
operator|.
name|getValue
argument_list|()
operator|.
name|getAnnotationMirrors
argument_list|()
control|)
block|{
if|if
condition|(
name|ann
operator|.
name|getAnnotationType
argument_list|()
operator|.
name|asElement
argument_list|()
operator|==
name|converterAnnotationType
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|ExecutableElement
argument_list|,
name|?
extends|extends
name|AnnotationValue
argument_list|>
name|entry
range|:
name|ann
operator|.
name|getElementValues
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
switch|switch
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
condition|)
block|{
case|case
literal|"allowNull"
case|:
name|allowNull
operator|=
operator|(
name|Boolean
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
block|}
block|}
block|}
name|writer
operator|.
name|append
argument_list|(
literal|"        converters.put("
argument_list|)
operator|.
name|append
argument_list|(
name|to
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".class"
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|toString
argument_list|(
name|from
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".class, new SimpleTypeConverter("
argument_list|)
operator|.
name|append
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|allowNull
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|") {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            @Override\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            public Object doConvert(Exchange exchange, Object value) throws Exception {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"                return "
argument_list|)
operator|.
name|append
argument_list|(
name|toJava
argument_list|(
name|from
operator|.
name|getValue
argument_list|()
argument_list|,
name|converterClasses
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        });\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    @Override\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    public void load(TypeConverterRegistry registry) throws TypeConverterLoaderException {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        converters.forEach((k, v, c) -> registry.addTypeConverter(k, v, c));\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|ExecutableElement
name|ee
range|:
name|converters
operator|.
name|getFallbackConverters
argument_list|()
control|)
block|{
name|boolean
name|allowNull
init|=
literal|false
decl_stmt|;
name|boolean
name|canPromote
init|=
literal|false
decl_stmt|;
for|for
control|(
name|AnnotationMirror
name|ann
range|:
name|ee
operator|.
name|getAnnotationMirrors
argument_list|()
control|)
block|{
if|if
condition|(
name|ann
operator|.
name|getAnnotationType
argument_list|()
operator|.
name|asElement
argument_list|()
operator|==
name|fallbackAnnotationType
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|ExecutableElement
argument_list|,
name|?
extends|extends
name|AnnotationValue
argument_list|>
name|entry
range|:
name|ann
operator|.
name|getElementValues
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
switch|switch
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
condition|)
block|{
case|case
literal|"allowNull"
case|:
name|allowNull
operator|=
operator|(
name|Boolean
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"canPromote"
case|:
name|canPromote
operator|=
operator|(
name|Boolean
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
block|}
block|}
block|}
name|writer
operator|.
name|append
argument_list|(
literal|"        registry.addFallbackTypeConverter(new TypeConverterSupport() {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            @Override\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            public boolean allowNull() {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"                return "
argument_list|)
operator|.
name|append
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|allowNull
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            @Override\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            public<T> T convertTo(Class<T> type, Exchange exchange, Object value) throws TypeConversionException {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"                try {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"                    return (T) "
argument_list|)
operator|.
name|append
argument_list|(
name|toJavaFallback
argument_list|(
name|ee
argument_list|,
name|converterClasses
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"                } catch (TypeConversionException e) {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"                    throw e;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"                } catch (Exception e) {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"                    throw new TypeConversionException(value, type, e);\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"                }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        }, "
argument_list|)
operator|.
name|append
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|canPromote
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|");\n"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|f
range|:
name|converterClasses
control|)
block|{
name|String
name|s
init|=
name|f
operator|.
name|substring
argument_list|(
name|f
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|v
init|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    private volatile "
argument_list|)
operator|.
name|append
argument_list|(
name|f
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|v
argument_list|)
operator|.
name|append
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    private "
argument_list|)
operator|.
name|append
argument_list|(
name|f
argument_list|)
operator|.
name|append
argument_list|(
literal|" get"
argument_list|)
operator|.
name|append
argument_list|(
name|s
argument_list|)
operator|.
name|append
argument_list|(
literal|"() {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        if ("
argument_list|)
operator|.
name|append
argument_list|(
name|v
argument_list|)
operator|.
name|append
argument_list|(
literal|" == null) {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            synchronized (this) {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"                if ("
argument_list|)
operator|.
name|append
argument_list|(
name|v
argument_list|)
operator|.
name|append
argument_list|(
literal|" == null) {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"                    "
argument_list|)
operator|.
name|append
argument_list|(
name|v
argument_list|)
operator|.
name|append
argument_list|(
literal|" = new "
argument_list|)
operator|.
name|append
argument_list|(
name|f
argument_list|)
operator|.
name|append
argument_list|(
literal|"();\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"                }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        return "
argument_list|)
operator|.
name|append
argument_list|(
name|v
argument_list|)
operator|.
name|append
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|toString (TypeMirror type)
specifier|private
name|String
name|toString
parameter_list|(
name|TypeMirror
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"<.*>"
argument_list|,
literal|""
argument_list|)
return|;
block|}
DECL|method|toJava (ExecutableElement converter, Set<String> converterClasses)
specifier|private
name|String
name|toJava
parameter_list|(
name|ExecutableElement
name|converter
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|converterClasses
parameter_list|)
block|{
name|String
name|pfx
decl_stmt|;
if|if
condition|(
name|converter
operator|.
name|getModifiers
argument_list|()
operator|.
name|contains
argument_list|(
name|Modifier
operator|.
name|STATIC
argument_list|)
condition|)
block|{
name|pfx
operator|=
name|converter
operator|.
name|getEnclosingElement
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"."
operator|+
name|converter
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|converterClasses
operator|.
name|add
argument_list|(
name|converter
operator|.
name|getEnclosingElement
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pfx
operator|=
literal|"get"
operator|+
name|converter
operator|.
name|getEnclosingElement
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"()."
operator|+
name|converter
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
block|}
name|String
name|type
init|=
name|toString
argument_list|(
name|converter
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|asType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|cast
init|=
name|type
operator|.
name|equals
argument_list|(
literal|"java.lang.Object"
argument_list|)
condition|?
literal|""
else|:
literal|"("
operator|+
name|type
operator|+
literal|") "
decl_stmt|;
return|return
name|pfx
operator|+
literal|"("
operator|+
name|cast
operator|+
literal|"value"
operator|+
operator|(
name|converter
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|?
literal|", exchange"
else|:
literal|""
operator|)
operator|+
literal|")"
return|;
block|}
DECL|method|toJavaFallback (ExecutableElement converter, Set<String> converterClasses)
specifier|private
name|String
name|toJavaFallback
parameter_list|(
name|ExecutableElement
name|converter
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|converterClasses
parameter_list|)
block|{
name|String
name|pfx
decl_stmt|;
if|if
condition|(
name|converter
operator|.
name|getModifiers
argument_list|()
operator|.
name|contains
argument_list|(
name|Modifier
operator|.
name|STATIC
argument_list|)
condition|)
block|{
name|pfx
operator|=
name|converter
operator|.
name|getEnclosingElement
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"."
operator|+
name|converter
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|converterClasses
operator|.
name|add
argument_list|(
name|converter
operator|.
name|getEnclosingElement
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pfx
operator|=
literal|"get"
operator|+
name|converter
operator|.
name|getEnclosingElement
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"()."
operator|+
name|converter
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
block|}
name|String
name|type
init|=
name|toString
argument_list|(
name|converter
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|converter
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
operator|.
name|asType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|cast
init|=
name|type
operator|.
name|equals
argument_list|(
literal|"java.lang.Object"
argument_list|)
condition|?
literal|""
else|:
literal|"("
operator|+
name|type
operator|+
literal|") "
decl_stmt|;
return|return
name|pfx
operator|+
literal|"(type, "
operator|+
operator|(
name|converter
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|4
condition|?
literal|"exchange, "
else|:
literal|""
operator|)
operator|+
name|cast
operator|+
literal|"value"
operator|+
literal|", registry)"
return|;
block|}
block|}
end_class

end_unit

