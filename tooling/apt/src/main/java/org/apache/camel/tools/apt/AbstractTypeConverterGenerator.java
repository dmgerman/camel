begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.tools.apt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tools
operator|.
name|apt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|RoundEnvironment
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|AnnotationMirror
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|AnnotationValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|ElementKind
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|ExecutableElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|TypeElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|type
operator|.
name|TypeMirror
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|Diagnostic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|JavaFileObject
import|;
end_import

begin_class
DECL|class|AbstractTypeConverterGenerator
specifier|public
specifier|abstract
class|class
name|AbstractTypeConverterGenerator
extends|extends
name|AbstractCamelAnnotationProcessor
block|{
DECL|class|ClassConverters
specifier|public
specifier|static
specifier|final
class|class
name|ClassConverters
block|{
DECL|field|comparator
specifier|private
specifier|final
name|Comparator
argument_list|<
name|TypeMirror
argument_list|>
name|comparator
decl_stmt|;
DECL|field|converters
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|TypeMirror
argument_list|,
name|ExecutableElement
argument_list|>
argument_list|>
name|converters
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|fallbackConverters
specifier|private
specifier|final
name|List
argument_list|<
name|ExecutableElement
argument_list|>
name|fallbackConverters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
DECL|field|sizeFallback
specifier|private
name|int
name|sizeFallback
decl_stmt|;
DECL|field|ignoreOnLoadError
specifier|private
name|boolean
name|ignoreOnLoadError
decl_stmt|;
DECL|method|ClassConverters (Comparator<TypeMirror> comparator)
name|ClassConverters
parameter_list|(
name|Comparator
argument_list|<
name|TypeMirror
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
block|}
DECL|method|isIgnoreOnLoadError ()
specifier|public
name|boolean
name|isIgnoreOnLoadError
parameter_list|()
block|{
return|return
name|ignoreOnLoadError
return|;
block|}
DECL|method|setIgnoreOnLoadError (boolean ignoreOnLoadError)
name|void
name|setIgnoreOnLoadError
parameter_list|(
name|boolean
name|ignoreOnLoadError
parameter_list|)
block|{
name|this
operator|.
name|ignoreOnLoadError
operator|=
name|ignoreOnLoadError
expr_stmt|;
block|}
DECL|method|addTypeConverter (TypeMirror to, TypeMirror from, ExecutableElement ee)
name|void
name|addTypeConverter
parameter_list|(
name|TypeMirror
name|to
parameter_list|,
name|TypeMirror
name|from
parameter_list|,
name|ExecutableElement
name|ee
parameter_list|)
block|{
name|converters
operator|.
name|computeIfAbsent
argument_list|(
name|toString
argument_list|(
name|to
argument_list|)
argument_list|,
name|c
lambda|->
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|comparator
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|from
argument_list|,
name|ee
argument_list|)
expr_stmt|;
name|size
operator|++
expr_stmt|;
block|}
DECL|method|addFallbackTypeConverter (ExecutableElement ee)
name|void
name|addFallbackTypeConverter
parameter_list|(
name|ExecutableElement
name|ee
parameter_list|)
block|{
name|fallbackConverters
operator|.
name|add
argument_list|(
name|ee
argument_list|)
expr_stmt|;
name|sizeFallback
operator|++
expr_stmt|;
block|}
DECL|method|getConverters ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|TypeMirror
argument_list|,
name|ExecutableElement
argument_list|>
argument_list|>
name|getConverters
parameter_list|()
block|{
return|return
name|converters
return|;
block|}
DECL|method|getFallbackConverters ()
specifier|public
name|List
argument_list|<
name|ExecutableElement
argument_list|>
name|getFallbackConverters
parameter_list|()
block|{
return|return
name|fallbackConverters
return|;
block|}
DECL|method|size ()
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|sizeFallback ()
specifier|public
name|long
name|sizeFallback
parameter_list|()
block|{
return|return
name|sizeFallback
return|;
block|}
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
operator|==
literal|0
operator|&&
name|sizeFallback
operator|==
literal|0
return|;
block|}
DECL|method|toString (TypeMirror type)
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
name|TypeMirror
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"<.*>"
argument_list|,
literal|""
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|doProcess (Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)
specifier|protected
name|void
name|doProcess
parameter_list|(
name|Set
argument_list|<
name|?
extends|extends
name|TypeElement
argument_list|>
name|annotations
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ClassConverters
argument_list|>
name|converters
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Comparator
argument_list|<
name|TypeMirror
argument_list|>
name|comparator
init|=
operator|(
name|o1
expr|,
name|o2
operator|)
operator|->
name|processingEnv
operator|.
name|getTypeUtils
argument_list|()
operator|.
name|isAssignable
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
condition|?
operator|-
literal|1
else|:
name|processingEnv
operator|.
name|getTypeUtils
argument_list|()
operator|.
name|isAssignable
argument_list|(
name|o2
argument_list|,
name|o1
argument_list|)
condition|?
operator|+
literal|1
else|:
name|o1
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|TypeElement
name|converterAnnotationType
init|=
name|this
operator|.
name|processingEnv
operator|.
name|getElementUtils
argument_list|()
operator|.
name|getTypeElement
argument_list|(
literal|"org.apache.camel.Converter"
argument_list|)
decl_stmt|;
comment|// the current class with type converters
name|String
name|currentClass
init|=
literal|null
decl_stmt|;
name|boolean
name|ignoreOnLoadError
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Element
name|element
range|:
name|roundEnv
operator|.
name|getElementsAnnotatedWith
argument_list|(
name|converterAnnotationType
argument_list|)
control|)
block|{
comment|// we need a top level class first
if|if
condition|(
name|element
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|CLASS
condition|)
block|{
name|TypeElement
name|te
init|=
operator|(
name|TypeElement
operator|)
name|element
decl_stmt|;
if|if
condition|(
operator|!
name|te
operator|.
name|getNestingKind
argument_list|()
operator|.
name|isNested
argument_list|()
operator|&&
name|acceptClass
argument_list|(
name|te
argument_list|)
condition|)
block|{
comment|// we only accept top-level classes and if loader is enabled
name|currentClass
operator|=
name|te
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ignoreOnLoadError
operator|=
name|isIgnoreOnLoadError
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentClass
operator|!=
literal|null
operator|&&
name|element
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|METHOD
condition|)
block|{
name|String
name|key
init|=
name|convertersKey
argument_list|(
name|currentClass
argument_list|)
decl_stmt|;
comment|// is the method annotated with @Converter
name|ExecutableElement
name|ee
init|=
operator|(
name|ExecutableElement
operator|)
name|element
decl_stmt|;
if|if
condition|(
name|isFallbackConverter
argument_list|(
name|ee
argument_list|)
condition|)
block|{
name|converters
operator|.
name|computeIfAbsent
argument_list|(
name|key
argument_list|,
name|c
lambda|->
operator|new
name|ClassConverters
argument_list|(
name|comparator
argument_list|)
argument_list|)
operator|.
name|addFallbackTypeConverter
argument_list|(
name|ee
argument_list|)
expr_stmt|;
if|if
condition|(
name|converters
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|converters
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|setIgnoreOnLoadError
argument_list|(
name|ignoreOnLoadError
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|TypeMirror
name|to
init|=
name|ee
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
name|TypeMirror
name|from
init|=
name|ee
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|asType
argument_list|()
decl_stmt|;
name|String
name|fromStr
init|=
name|toString
argument_list|(
name|from
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fromStr
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|)
block|{
name|TypeElement
name|e
init|=
name|this
operator|.
name|processingEnv
operator|.
name|getElementUtils
argument_list|()
operator|.
name|getTypeElement
argument_list|(
name|fromStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|from
operator|=
name|e
operator|.
name|asType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|processingEnv
operator|.
name|getMessager
argument_list|()
operator|.
name|printMessage
argument_list|(
name|Diagnostic
operator|.
name|Kind
operator|.
name|NOTE
argument_list|,
literal|"Could not retrieve type element for "
operator|+
name|fromStr
argument_list|)
expr_stmt|;
block|}
block|}
name|converters
operator|.
name|computeIfAbsent
argument_list|(
name|key
argument_list|,
name|c
lambda|->
operator|new
name|ClassConverters
argument_list|(
name|comparator
argument_list|)
argument_list|)
operator|.
name|addTypeConverter
argument_list|(
name|to
argument_list|,
name|from
argument_list|,
name|ee
argument_list|)
expr_stmt|;
if|if
condition|(
name|converters
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|converters
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|setIgnoreOnLoadError
argument_list|(
name|ignoreOnLoadError
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|writeConverters
argument_list|(
name|converters
argument_list|)
expr_stmt|;
block|}
DECL|method|convertersKey (String currentClass)
specifier|abstract
name|String
name|convertersKey
parameter_list|(
name|String
name|currentClass
parameter_list|)
function_decl|;
DECL|method|writeConverters (Map<String, ClassConverters> converters)
specifier|abstract
name|void
name|writeConverters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ClassConverters
argument_list|>
name|converters
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|acceptClass (Element element)
specifier|abstract
name|boolean
name|acceptClass
parameter_list|(
name|Element
name|element
parameter_list|)
function_decl|;
DECL|method|isIgnoreOnLoadError (Element element)
specifier|private
specifier|static
name|boolean
name|isIgnoreOnLoadError
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
for|for
control|(
name|AnnotationMirror
name|ann
range|:
name|element
operator|.
name|getAnnotationMirrors
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|ExecutableElement
argument_list|,
name|?
extends|extends
name|AnnotationValue
argument_list|>
name|entry
range|:
name|ann
operator|.
name|getElementValues
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
literal|"ignoreOnLoadError"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|isFallbackCanPromote (Element element)
specifier|private
specifier|static
name|boolean
name|isFallbackCanPromote
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
for|for
control|(
name|AnnotationMirror
name|ann
range|:
name|element
operator|.
name|getAnnotationMirrors
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|ExecutableElement
argument_list|,
name|?
extends|extends
name|AnnotationValue
argument_list|>
name|entry
range|:
name|ann
operator|.
name|getElementValues
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
literal|"fallbackCanPromote"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|isAllowNull (Element element)
specifier|private
specifier|static
name|boolean
name|isAllowNull
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
for|for
control|(
name|AnnotationMirror
name|ann
range|:
name|element
operator|.
name|getAnnotationMirrors
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|ExecutableElement
argument_list|,
name|?
extends|extends
name|AnnotationValue
argument_list|>
name|entry
range|:
name|ann
operator|.
name|getElementValues
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
literal|"allowNull"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|isFallbackConverter (ExecutableElement element)
specifier|private
specifier|static
name|boolean
name|isFallbackConverter
parameter_list|(
name|ExecutableElement
name|element
parameter_list|)
block|{
for|for
control|(
name|AnnotationMirror
name|ann
range|:
name|element
operator|.
name|getAnnotationMirrors
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|ExecutableElement
argument_list|,
name|?
extends|extends
name|AnnotationValue
argument_list|>
name|entry
range|:
name|ann
operator|.
name|getElementValues
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
literal|"fallback"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|writeConverters (String fqn, String suffix, ClassConverters converters)
name|void
name|writeConverters
parameter_list|(
name|String
name|fqn
parameter_list|,
name|String
name|suffix
parameter_list|,
name|ClassConverters
name|converters
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|pos
init|=
name|fqn
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|String
name|p
init|=
name|fqn
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|String
name|c
init|=
name|fqn
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
operator|+
operator|(
name|suffix
operator|!=
literal|null
condition|?
name|suffix
else|:
literal|""
operator|)
decl_stmt|;
name|JavaFileObject
name|jfo
init|=
name|processingEnv
operator|.
name|getFiler
argument_list|()
operator|.
name|createSourceFile
argument_list|(
name|p
operator|+
literal|"."
operator|+
name|c
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|converterClasses
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|Writer
name|writer
init|=
name|jfo
operator|.
name|openWriter
argument_list|()
init|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"/* Generated by org.apache.camel:apt */\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"package "
argument_list|)
operator|.
name|append
argument_list|(
name|p
argument_list|)
operator|.
name|append
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"import org.apache.camel.Exchange;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"import org.apache.camel.TypeConversionException;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"import org.apache.camel.TypeConverterLoaderException;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"import org.apache.camel.spi.TypeConverterLoader;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"import org.apache.camel.spi.TypeConverterRegistry;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"import org.apache.camel.support.SimpleTypeConverter;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"import org.apache.camel.support.TypeConverterSupport;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"import org.apache.camel.util.DoubleMap;\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"/**\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|" * Source code generated by org.apache.camel:apt\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|" */\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"@SuppressWarnings(\"unchecked\")\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"public final class "
argument_list|)
operator|.
name|append
argument_list|(
name|c
argument_list|)
operator|.
name|append
argument_list|(
literal|" implements TypeConverterLoader {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
operator|.
name|append
argument_list|(
literal|"public "
argument_list|)
operator|.
name|append
argument_list|(
name|c
argument_list|)
operator|.
name|append
argument_list|(
literal|"() {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    @Override\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    public void load(TypeConverterRegistry registry) throws TypeConverterLoaderException {\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|converters
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|converters
operator|.
name|isIgnoreOnLoadError
argument_list|()
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"        try {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            registerConverters(registry);\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        } catch (Throwable e) {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            // ignore on load error\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        }\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"        registerConverters(registry);\n"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|converters
operator|.
name|sizeFallback
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"        registerFallbackConverters(registry);\n"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|converters
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"    private void registerConverters(TypeConverterRegistry registry) {\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|TypeMirror
argument_list|,
name|ExecutableElement
argument_list|>
argument_list|>
name|to
range|:
name|converters
operator|.
name|getConverters
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TypeMirror
argument_list|,
name|ExecutableElement
argument_list|>
name|from
range|:
name|to
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|boolean
name|allowNull
init|=
name|isAllowNull
argument_list|(
name|from
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        addTypeConverter(registry, "
argument_list|)
operator|.
name|append
argument_list|(
name|to
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".class"
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|toString
argument_list|(
name|from
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".class, "
argument_list|)
operator|.
name|append
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|allowNull
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            (type, exchange, value) -> "
argument_list|)
operator|.
name|append
argument_list|(
name|toJava
argument_list|(
name|from
operator|.
name|getValue
argument_list|()
argument_list|,
name|converterClasses
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|");\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    private static void addTypeConverter(TypeConverterRegistry registry, Class<?> toType, Class<?> fromType, boolean allowNull, SimpleTypeConverter.ConversionMethod method)"
operator|+
literal|" { \n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        registry.addTypeConverter(toType, fromType, new SimpleTypeConverter(allowNull, method));\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|converters
operator|.
name|sizeFallback
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"    private void registerFallbackConverters(TypeConverterRegistry registry) {\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|ExecutableElement
name|ee
range|:
name|converters
operator|.
name|getFallbackConverters
argument_list|()
control|)
block|{
name|boolean
name|allowNull
init|=
name|isAllowNull
argument_list|(
name|ee
argument_list|)
decl_stmt|;
name|boolean
name|canPromote
init|=
name|isFallbackCanPromote
argument_list|(
name|ee
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        addFallbackTypeConverter(registry, "
argument_list|)
operator|.
name|append
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|allowNull
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|canPromote
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"(type, exchange, value) -> "
argument_list|)
operator|.
name|append
argument_list|(
name|toJavaFallback
argument_list|(
name|ee
argument_list|,
name|converterClasses
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|");\n"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    private static void addFallbackTypeConverter(TypeConverterRegistry registry, boolean allowNull, boolean canPromote, SimpleTypeConverter.ConversionMethod method) { \n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        registry.addFallbackTypeConverter(new SimpleTypeConverter(allowNull, method), canPromote);\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|f
range|:
name|converterClasses
control|)
block|{
name|String
name|s
init|=
name|f
operator|.
name|substring
argument_list|(
name|f
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|v
init|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    private volatile "
argument_list|)
operator|.
name|append
argument_list|(
name|f
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|v
argument_list|)
operator|.
name|append
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    private "
argument_list|)
operator|.
name|append
argument_list|(
name|f
argument_list|)
operator|.
name|append
argument_list|(
literal|" get"
argument_list|)
operator|.
name|append
argument_list|(
name|s
argument_list|)
operator|.
name|append
argument_list|(
literal|"() {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        if ("
argument_list|)
operator|.
name|append
argument_list|(
name|v
argument_list|)
operator|.
name|append
argument_list|(
literal|" == null) {\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"            "
argument_list|)
operator|.
name|append
argument_list|(
name|v
argument_list|)
operator|.
name|append
argument_list|(
literal|" = new "
argument_list|)
operator|.
name|append
argument_list|(
name|f
argument_list|)
operator|.
name|append
argument_list|(
literal|"();\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        }\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"        return "
argument_list|)
operator|.
name|append
argument_list|(
name|v
argument_list|)
operator|.
name|append
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|toString (TypeMirror type)
specifier|private
name|String
name|toString
parameter_list|(
name|TypeMirror
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"<.*>"
argument_list|,
literal|""
argument_list|)
return|;
block|}
DECL|method|toJava (ExecutableElement converter, Set<String> converterClasses)
specifier|private
name|String
name|toJava
parameter_list|(
name|ExecutableElement
name|converter
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|converterClasses
parameter_list|)
block|{
name|String
name|pfx
decl_stmt|;
if|if
condition|(
name|converter
operator|.
name|getModifiers
argument_list|()
operator|.
name|contains
argument_list|(
name|Modifier
operator|.
name|STATIC
argument_list|)
condition|)
block|{
name|pfx
operator|=
name|converter
operator|.
name|getEnclosingElement
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"."
operator|+
name|converter
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|converterClasses
operator|.
name|add
argument_list|(
name|converter
operator|.
name|getEnclosingElement
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pfx
operator|=
literal|"get"
operator|+
name|converter
operator|.
name|getEnclosingElement
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"()."
operator|+
name|converter
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
block|}
name|String
name|type
init|=
name|toString
argument_list|(
name|converter
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|asType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|cast
init|=
name|type
operator|.
name|equals
argument_list|(
literal|"java.lang.Object"
argument_list|)
condition|?
literal|""
else|:
literal|"("
operator|+
name|type
operator|+
literal|") "
decl_stmt|;
return|return
name|pfx
operator|+
literal|"("
operator|+
name|cast
operator|+
literal|"value"
operator|+
operator|(
name|converter
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|?
literal|", exchange"
else|:
literal|""
operator|)
operator|+
literal|")"
return|;
block|}
DECL|method|toJavaFallback (ExecutableElement converter, Set<String> converterClasses)
specifier|private
name|String
name|toJavaFallback
parameter_list|(
name|ExecutableElement
name|converter
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|converterClasses
parameter_list|)
block|{
name|String
name|pfx
decl_stmt|;
if|if
condition|(
name|converter
operator|.
name|getModifiers
argument_list|()
operator|.
name|contains
argument_list|(
name|Modifier
operator|.
name|STATIC
argument_list|)
condition|)
block|{
name|pfx
operator|=
name|converter
operator|.
name|getEnclosingElement
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"."
operator|+
name|converter
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|converterClasses
operator|.
name|add
argument_list|(
name|converter
operator|.
name|getEnclosingElement
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pfx
operator|=
literal|"get"
operator|+
name|converter
operator|.
name|getEnclosingElement
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"()."
operator|+
name|converter
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
block|}
name|String
name|type
init|=
name|toString
argument_list|(
name|converter
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|converter
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
operator|.
name|asType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|cast
init|=
name|type
operator|.
name|equals
argument_list|(
literal|"java.lang.Object"
argument_list|)
condition|?
literal|""
else|:
literal|"("
operator|+
name|type
operator|+
literal|") "
decl_stmt|;
return|return
name|pfx
operator|+
literal|"(type, "
operator|+
operator|(
name|converter
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|4
condition|?
literal|"exchange, "
else|:
literal|""
operator|)
operator|+
name|cast
operator|+
literal|"value"
operator|+
literal|", registry)"
return|;
block|}
block|}
end_class

end_unit

