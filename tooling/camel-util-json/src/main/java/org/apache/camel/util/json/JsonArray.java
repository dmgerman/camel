begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util.json
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|json
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * JsonArray is a common non-thread safe data format for a collection of data.  * The contents of a JsonArray are only validated as JSON values on  * serialization.  *   * @see Jsoner  * @since 2.0.0  */
end_comment

begin_class
DECL|class|JsonArray
specifier|public
class|class
name|JsonArray
extends|extends
name|ArrayList
argument_list|<
name|Object
argument_list|>
implements|implements
name|Jsonable
block|{
comment|/**      * The serialization version this class is compatible with. This value      * doesn't need to be incremented if and only if the only changes to occur      * were updating comments, updating javadocs, adding new fields to the      * class, changing the fields from static to non-static, or changing the      * fields from transient to non transient. All other changes require this      * number be incremented.      */
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/** Instantiates an empty JsonArray. */
DECL|method|JsonArray ()
specifier|public
name|JsonArray
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Instantiate a new JsonArray using ArrayList's constructor of the same      * type.      *       * @param collection represents the elements to produce the JsonArray with.      */
DECL|method|JsonArray (final Collection<?> collection)
specifier|public
name|JsonArray
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
parameter_list|)
block|{
name|super
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
comment|/**      * A convenience method that assumes every element of the JsonArray is      * castable to T before adding it to a collection of Ts.      *       * @param<T> represents the type that all of the elements of the JsonArray      *            should be cast to and the type the collection will contain.      * @param destination represents where all of the elements of the JsonArray      *            are added to after being cast to the generic type provided.      * @throws ClassCastException if the unchecked cast of an element to T      *             fails.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|asCollection (final Collection<T> destination)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|asCollection
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|T
argument_list|>
name|destination
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Object
name|o
range|:
name|this
control|)
block|{
name|destination
operator|.
name|add
argument_list|(
operator|(
name|T
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * A convenience method that assumes there is a BigDecimal, Number, or      * String at the given index. If a Number or String is there it is used to      * construct a new BigDecimal.      *       * @param index representing where the value is expected to be at.      * @return the value stored at the key or the default provided if the key      *         doesn't exist.      * @throws ClassCastException if there was a value but didn't match the      *             assumed return types.      * @throws IndexOutOfBoundsException if the index is outside of the range of      *             element indexes in the JsonArray.      * @throws NumberFormatException if a String isn't a valid representation of      *             a BigDecimal.      * @see BigDecimal      * @see Number#doubleValue()      */
DECL|method|getBigDecimal (final int index)
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
name|Object
name|returnable
init|=
name|this
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnable
operator|instanceof
name|BigDecimal
condition|)
block|{
comment|/* Success there was a BigDecimal. */
block|}
elseif|else
if|if
condition|(
name|returnable
operator|instanceof
name|Number
condition|)
block|{
comment|/* A number can be used to construct a BigDecimal. */
name|returnable
operator|=
operator|new
name|BigDecimal
argument_list|(
name|returnable
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|returnable
operator|instanceof
name|String
condition|)
block|{
comment|/* A number can be used to construct a BigDecimal. */
name|returnable
operator|=
operator|new
name|BigDecimal
argument_list|(
operator|(
name|String
operator|)
name|returnable
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|BigDecimal
operator|)
name|returnable
return|;
block|}
comment|/**      * A convenience method that assumes there is a Boolean or String value at      * the given index.      *       * @param index represents where the value is expected to be at.      * @return the value at the index provided cast to a boolean.      * @throws ClassCastException if there was a value but didn't match the      *             assumed return type.      * @throws IndexOutOfBoundsException if the index is outside of the range of      *             element indexes in the JsonArray.      */
DECL|method|getBoolean (final int index)
specifier|public
name|Boolean
name|getBoolean
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
name|Object
name|returnable
init|=
name|this
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnable
operator|instanceof
name|String
condition|)
block|{
name|returnable
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|returnable
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Boolean
operator|)
name|returnable
return|;
block|}
comment|/**      * A convenience method that assumes there is a Number or String value at      * the given index.      *       * @param index represents where the value is expected to be at.      * @return the value at the index provided cast to a byte.      * @throws ClassCastException if there was a value but didn't match the      *             assumed return type.      * @throws NumberFormatException if a String isn't a valid representation of      *             a BigDecimal or if the Number represents the double or float      *             Infinity or NaN.      * @throws IndexOutOfBoundsException if the index is outside of the range of      *             element indexes in the JsonArray.      * @see Number      */
DECL|method|getByte (final int index)
specifier|public
name|Byte
name|getByte
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
name|Object
name|returnable
init|=
name|this
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnable
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|returnable
operator|instanceof
name|String
condition|)
block|{
comment|/* A String can be used to construct a BigDecimal. */
name|returnable
operator|=
operator|new
name|BigDecimal
argument_list|(
operator|(
name|String
operator|)
name|returnable
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|Number
operator|)
name|returnable
operator|)
operator|.
name|byteValue
argument_list|()
return|;
block|}
comment|/**      * A convenience method that assumes there is a Collection value at the      * given index.      *       * @param<T> the kind of collection to expect at the index. Note unless      *            manually added, collection values will be a JsonArray.      * @param index represents where the value is expected to be at.      * @return the value at the index provided cast to a Collection.      * @throws ClassCastException if there was a value but didn't match the      *             assumed return type.      * @throws IndexOutOfBoundsException if the index is outside of the range of      *             element indexes in the JsonArray.      * @see Collection      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getCollection (final int index)
specifier|public
parameter_list|<
name|T
extends|extends
name|Collection
argument_list|<
name|?
argument_list|>
parameter_list|>
name|T
name|getCollection
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
comment|/*          * The unchecked warning is suppressed because there is no way of          * guaranteeing at compile time the cast will work.          */
return|return
operator|(
name|T
operator|)
name|this
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**      * A convenience method that assumes there is a Number or String value at      * the given index.      *       * @param index represents where the value is expected to be at.      * @return the value at the index provided cast to a double.      * @throws ClassCastException if there was a value but didn't match the      *             assumed return type.      * @throws NumberFormatException if a String isn't a valid representation of      *             a BigDecimal or if the Number represents the double or float      *             Infinity or NaN.      * @throws IndexOutOfBoundsException if the index is outside of the range of      *             element indexes in the JsonArray.      * @see Number      */
DECL|method|getDouble (final int index)
specifier|public
name|Double
name|getDouble
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
name|Object
name|returnable
init|=
name|this
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnable
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|returnable
operator|instanceof
name|String
condition|)
block|{
comment|/* A String can be used to construct a BigDecimal. */
name|returnable
operator|=
operator|new
name|BigDecimal
argument_list|(
operator|(
name|String
operator|)
name|returnable
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|Number
operator|)
name|returnable
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
comment|/**      * A convenience method that assumes there is a String value at the given      * index representing a fully qualified name in dot notation of an enum.      *       * @param index representing where the value is expected to be at.      * @param<T> the Enum type the value at the index is expected to belong to.      * @return the enum based on the string found at the index, or null if the      *         value at the index was null.      * @throws ClassNotFoundException if the element was a String but the      *             declaring enum type couldn't be determined with it.      * @throws ClassCastException if the element at the index was not a String      *             or if the fully qualified enum name is of the wrong type.      * @throws IllegalArgumentException if an enum type was dynamically      *             determined but it doesn't define an enum with the dynamically      *             determined name.      * @throws IndexOutOfBoundsException if the index is outside of the range of      *             element indexes in the JsonArray.      * @see Enum#valueOf(Class, String)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getEnum (final int index)
specifier|public
parameter_list|<
name|T
extends|extends
name|Enum
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|getEnum
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
comment|/*          * Supressing the unchecked warning because the returnType is          * dynamically identified and could lead to a ClassCastException when          * returnType is cast to Class<T>, which is expected by the method's          * contract.          */
name|T
name|returnable
decl_stmt|;
specifier|final
name|String
name|element
decl_stmt|;
specifier|final
name|String
index|[]
name|splitValues
decl_stmt|;
specifier|final
name|int
name|numberOfValues
decl_stmt|;
specifier|final
name|StringBuilder
name|returnTypeName
decl_stmt|;
specifier|final
name|StringBuilder
name|enumName
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|returnType
decl_stmt|;
comment|/* Make sure the element at the index is a String. */
name|element
operator|=
name|this
operator|.
name|getString
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|/* Get the package, class, and enum names. */
name|splitValues
operator|=
name|element
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
expr_stmt|;
name|numberOfValues
operator|=
name|splitValues
operator|.
name|length
expr_stmt|;
name|returnTypeName
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|enumName
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfValues
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
operator|(
name|numberOfValues
operator|-
literal|1
operator|)
condition|)
block|{
comment|/*                  * If it is the last split value then it should be the name of                  * the Enum since dots are not allowed in enum names.                  */
name|enumName
operator|.
name|append
argument_list|(
name|splitValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
operator|(
name|numberOfValues
operator|-
literal|2
operator|)
condition|)
block|{
comment|/*                  * If it is the penultimate split value then it should be the                  * end of the package/enum type and not need a dot appended to                  * it.                  */
name|returnTypeName
operator|.
name|append
argument_list|(
name|splitValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/*                  * Must be part of the package/enum type and will need a dot                  * appended to it since they got removed in the split.                  */
name|returnTypeName
operator|.
name|append
argument_list|(
name|splitValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|returnTypeName
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* Use the package/class and enum names to get the Enum<T>. */
name|returnType
operator|=
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|returnTypeName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|returnable
operator|=
name|Enum
operator|.
name|valueOf
argument_list|(
name|returnType
argument_list|,
name|enumName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|returnable
return|;
block|}
comment|/**      * A convenience method that assumes there is a Number or String value at      * the given index.      *       * @param index represents where the value is expected to be at.      * @return the value at the index provided cast to a float.      * @throws ClassCastException if there was a value but didn't match the      *             assumed return type.      * @throws NumberFormatException if a String isn't a valid representation of      *             a BigDecimal or if the Number represents the double or float      *             Infinity or NaN.      * @throws IndexOutOfBoundsException if the index is outside of the range of      *             element indexes in the JsonArray.      * @see Number      */
DECL|method|getFloat (final int index)
specifier|public
name|Float
name|getFloat
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
name|Object
name|returnable
init|=
name|this
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnable
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|returnable
operator|instanceof
name|String
condition|)
block|{
comment|/* A String can be used to construct a BigDecimal. */
name|returnable
operator|=
operator|new
name|BigDecimal
argument_list|(
operator|(
name|String
operator|)
name|returnable
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|Number
operator|)
name|returnable
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
comment|/**      * A convenience method that assumes there is a Number or String value at      * the given index.      *       * @param index represents where the value is expected to be at.      * @return the value at the index provided cast to a int.      * @throws ClassCastException if there was a value but didn't match the      *             assumed return type.      * @throws NumberFormatException if a String isn't a valid representation of      *             a BigDecimal or if the Number represents the double or float      *             Infinity or NaN.      * @throws IndexOutOfBoundsException if the index is outside of the range of      *             element indexes in the JsonArray.      * @see Number      */
DECL|method|getInteger (final int index)
specifier|public
name|Integer
name|getInteger
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
name|Object
name|returnable
init|=
name|this
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnable
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|returnable
operator|instanceof
name|String
condition|)
block|{
comment|/* A String can be used to construct a BigDecimal. */
name|returnable
operator|=
operator|new
name|BigDecimal
argument_list|(
operator|(
name|String
operator|)
name|returnable
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|Number
operator|)
name|returnable
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|/**      * A convenience method that assumes there is a Number or String value at      * the given index.      *       * @param index represents where the value is expected to be at.      * @return the value at the index provided cast to a long.      * @throws ClassCastException if there was a value but didn't match the      *             assumed return type.      * @throws NumberFormatException if a String isn't a valid representation of      *             a BigDecimal or if the Number represents the double or float      *             Infinity or NaN.      * @throws IndexOutOfBoundsException if the index is outside of the range of      *             element indexes in the JsonArray.      * @see Number      */
DECL|method|getLong (final int index)
specifier|public
name|Long
name|getLong
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
name|Object
name|returnable
init|=
name|this
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnable
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|returnable
operator|instanceof
name|String
condition|)
block|{
comment|/* A String can be used to construct a BigDecimal. */
name|returnable
operator|=
operator|new
name|BigDecimal
argument_list|(
operator|(
name|String
operator|)
name|returnable
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|Number
operator|)
name|returnable
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
comment|/**      * A convenience method that assumes there is a Map value at the given      * index.      *       * @param<T> the kind of map to expect at the index. Note unless manually      *            added, Map values will be a JsonObject.      * @param index represents where the value is expected to be at.      * @return the value at the index provided cast to a Map.      * @throws ClassCastException if there was a value but didn't match the      *             assumed return type.      * @throws IndexOutOfBoundsException if the index is outside of the range of      *             element indexes in the JsonArray.      * @see Map      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getMap (final int index)
specifier|public
parameter_list|<
name|T
extends|extends
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
parameter_list|>
name|T
name|getMap
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
comment|/*          * The unchecked warning is suppressed because there is no way of          * guaranteeing at compile time the cast will work.          */
return|return
operator|(
name|T
operator|)
name|this
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**      * A convenience method that assumes there is a Number or String value at      * the given index.      *       * @param index represents where the value is expected to be at.      * @return the value at the index provided cast to a short.      * @throws ClassCastException if there was a value but didn't match the      *             assumed return type.      * @throws NumberFormatException if a String isn't a valid representation of      *             a BigDecimal or if the Number represents the double or float      *             Infinity or NaN.      * @throws IndexOutOfBoundsException if the index is outside of the range of      *             element indexes in the JsonArray.      * @see Number      */
DECL|method|getShort (final int index)
specifier|public
name|Short
name|getShort
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
name|Object
name|returnable
init|=
name|this
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnable
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|returnable
operator|instanceof
name|String
condition|)
block|{
comment|/* A String can be used to construct a BigDecimal. */
name|returnable
operator|=
operator|new
name|BigDecimal
argument_list|(
operator|(
name|String
operator|)
name|returnable
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|Number
operator|)
name|returnable
operator|)
operator|.
name|shortValue
argument_list|()
return|;
block|}
comment|/**      * A convenience method that assumes there is a Boolean, Number, or String      * value at the given index.      *       * @param index represents where the value is expected to be at.      * @return the value at the index provided cast to a String.      * @throws ClassCastException if there was a value but didn't match the      *             assumed return type.      * @throws IndexOutOfBoundsException if the index is outside of the range of      *             element indexes in the JsonArray.      */
DECL|method|getString (final int index)
specifier|public
name|String
name|getString
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
name|Object
name|returnable
init|=
name|this
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnable
operator|instanceof
name|Boolean
condition|)
block|{
name|returnable
operator|=
name|returnable
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|returnable
operator|instanceof
name|Number
condition|)
block|{
name|returnable
operator|=
name|returnable
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|String
operator|)
name|returnable
return|;
block|}
comment|/*      * (non-Javadoc)      * @see org.apache.camel.util.json.Jsonable#asJsonString()      */
annotation|@
name|Override
DECL|method|toJson ()
specifier|public
name|String
name|toJson
parameter_list|()
block|{
specifier|final
name|StringWriter
name|writable
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|this
operator|.
name|toJson
argument_list|(
name|writable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|caught
parameter_list|)
block|{
comment|/* See java.io.StringWriter. */
block|}
return|return
name|writable
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/*      * (non-Javadoc)      * @see org.apache.camel.util.json.Jsonable#toJsonString(java.io.Writer)      */
annotation|@
name|Override
DECL|method|toJson (final Writer writable)
specifier|public
name|void
name|toJson
parameter_list|(
specifier|final
name|Writer
name|writable
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isFirstElement
init|=
literal|true
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Object
argument_list|>
name|elements
init|=
name|this
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|writable
operator|.
name|write
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
while|while
condition|(
name|elements
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|isFirstElement
condition|)
block|{
name|isFirstElement
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|writable
operator|.
name|write
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|writable
operator|.
name|write
argument_list|(
name|Jsoner
operator|.
name|serialize
argument_list|(
name|elements
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writable
operator|.
name|write
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

