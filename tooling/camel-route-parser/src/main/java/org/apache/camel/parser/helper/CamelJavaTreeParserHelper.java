begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.parser.helper
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|helper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|CamelCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|DefaultCamelCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|JSonSchemaHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|model
operator|.
name|CamelNodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|model
operator|.
name|CamelNodeDetailsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|roaster
operator|.
name|StatementFieldSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|AnonymousClassDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|BooleanLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|ExpressionStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|FieldDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|InfixExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|MemberValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|MethodDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|MethodInvocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|NormalAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|NumberLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|ParenthesizedExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|QualifiedName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|SimpleName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|SingleMemberAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|StringLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|VariableDeclarationFragment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|VariableDeclarationStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|FieldSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|JavaClassSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|MethodSource
import|;
end_import

begin_comment
comment|/**  * A Camel Java tree parser that only depends on the Roaster API.  *<p/>  * This implement is used for parsing the Camel routes and build a tree structure of the EIP nodes.  *  * @see CamelJavaParserHelper for parser that can discover endpoints and simple expressions  */
end_comment

begin_class
DECL|class|CamelJavaTreeParserHelper
specifier|public
specifier|final
class|class
name|CamelJavaTreeParserHelper
block|{
DECL|field|camelCatalog
specifier|private
specifier|final
name|CamelCatalog
name|camelCatalog
init|=
operator|new
name|DefaultCamelCatalog
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|method|parseCamelRouteTree (JavaClassSource clazz, String baseDir, String fullyQualifiedFileName, MethodSource<JavaClassSource> configureMethod)
specifier|public
name|List
argument_list|<
name|CamelNodeDetails
argument_list|>
name|parseCamelRouteTree
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|String
name|baseDir
parameter_list|,
name|String
name|fullyQualifiedFileName
parameter_list|,
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|configureMethod
parameter_list|)
block|{
comment|// find any from which is the start of the route
name|CamelNodeDetailsFactory
name|nodeFactory
init|=
name|CamelNodeDetailsFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|CamelNodeDetails
name|route
init|=
name|nodeFactory
operator|.
name|newNode
argument_list|(
literal|null
argument_list|,
literal|"route"
argument_list|)
decl_stmt|;
if|if
condition|(
name|configureMethod
operator|!=
literal|null
condition|)
block|{
name|MethodDeclaration
name|md
init|=
operator|(
name|MethodDeclaration
operator|)
name|configureMethod
operator|.
name|getInternal
argument_list|()
decl_stmt|;
name|Block
name|block
init|=
name|md
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|block
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|statement
range|:
name|md
operator|.
name|getBody
argument_list|()
operator|.
name|statements
argument_list|()
control|)
block|{
comment|// must be a method call expression
if|if
condition|(
name|statement
operator|instanceof
name|ExpressionStatement
condition|)
block|{
name|ExpressionStatement
name|es
init|=
operator|(
name|ExpressionStatement
operator|)
name|statement
decl_stmt|;
name|Expression
name|exp
init|=
name|es
operator|.
name|getExpression
argument_list|()
decl_stmt|;
name|parseExpression
argument_list|(
name|nodeFactory
argument_list|,
name|fullyQualifiedFileName
argument_list|,
name|clazz
argument_list|,
name|configureMethod
argument_list|,
name|block
argument_list|,
name|exp
argument_list|,
name|route
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|List
argument_list|<
name|CamelNodeDetails
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|route
operator|.
name|getOutputs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// okay no routes found
return|return
name|answer
return|;
block|}
comment|// now parse the route node and build the correct model/tree structure of the EIPs
comment|// re-create factory as we rebuild the tree
name|nodeFactory
operator|=
name|CamelNodeDetailsFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|CamelNodeDetails
name|parent
init|=
name|route
operator|.
name|getOutputs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|route
operator|.
name|getOutputs
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CamelNodeDetails
name|node
init|=
name|route
operator|.
name|getOutputs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|node
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"from"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|CamelNodeDetails
name|from
init|=
name|nodeFactory
operator|.
name|copyNode
argument_list|(
literal|null
argument_list|,
literal|"from"
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|from
operator|.
name|setFileName
argument_list|(
name|fullyQualifiedFileName
argument_list|)
expr_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|parent
operator|=
name|from
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"routeId"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// should be set on the parent
name|parent
operator|.
name|setRouteId
argument_list|(
name|node
operator|.
name|getRouteId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"end"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"endChoice"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"endParent"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"endRest"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"endDoTry"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"endHystrix"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// parent should be grand parent
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"choice"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// special for some EIPs
name|CamelNodeDetails
name|output
init|=
name|nodeFactory
operator|.
name|copyNode
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|parent
operator|.
name|addOutput
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|parent
operator|=
name|output
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"when"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"otherwise"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// we are in a choice block so parent should be the first choice up the parent tree
while|while
condition|(
operator|!
name|parent
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"from"
argument_list|)
operator|&&
operator|!
literal|"choice"
operator|.
name|equals
argument_list|(
name|parent
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|hasOutput
init|=
name|hasOutput
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasOutput
condition|)
block|{
comment|// has output so add as new child node
name|CamelNodeDetails
name|output
init|=
name|nodeFactory
operator|.
name|copyNode
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|parent
operator|.
name|addOutput
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|parent
operator|=
name|output
expr_stmt|;
block|}
else|else
block|{
comment|// add straight to itself
name|CamelNodeDetails
name|output
init|=
name|nodeFactory
operator|.
name|copyNode
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|parent
operator|.
name|addOutput
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|hasOutput (String name)
specifier|private
name|boolean
name|hasOutput
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|json
init|=
name|camelCatalog
operator|.
name|modelJSonSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"model"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|isModelOutput
argument_list|(
name|rows
argument_list|)
return|;
block|}
DECL|method|isModelOutput (List<Map<String, String>> rows)
specifier|private
specifier|static
name|boolean
name|isModelOutput
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
parameter_list|)
block|{
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"output"
argument_list|)
condition|)
block|{
return|return
literal|"true"
operator|.
name|equals
argument_list|(
name|row
operator|.
name|get
argument_list|(
literal|"output"
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|hasInput (String name)
specifier|private
name|boolean
name|hasInput
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|json
init|=
name|camelCatalog
operator|.
name|modelJSonSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"model"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|isModelInput
argument_list|(
name|rows
argument_list|)
return|;
block|}
DECL|method|isModelInput (List<Map<String, String>> rows)
specifier|private
specifier|static
name|boolean
name|isModelInput
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
parameter_list|)
block|{
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"input"
argument_list|)
condition|)
block|{
return|return
literal|"true"
operator|.
name|equals
argument_list|(
name|row
operator|.
name|get
argument_list|(
literal|"input"
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|grandParent (CamelNodeDetails node, String parentName)
specifier|private
specifier|static
name|CamelNodeDetails
name|grandParent
parameter_list|(
name|CamelNodeDetails
name|node
parameter_list|,
name|String
name|parentName
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|parentName
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|node
return|;
block|}
else|else
block|{
return|return
name|grandParent
argument_list|(
name|node
operator|.
name|getParent
argument_list|()
argument_list|,
name|parentName
argument_list|)
return|;
block|}
block|}
DECL|method|parseExpression (CamelNodeDetailsFactory nodeFactory, String fullyQualifiedFileName, JavaClassSource clazz, MethodSource<JavaClassSource> configureMethod, Block block, Expression exp, CamelNodeDetails node)
specifier|private
name|void
name|parseExpression
parameter_list|(
name|CamelNodeDetailsFactory
name|nodeFactory
parameter_list|,
name|String
name|fullyQualifiedFileName
parameter_list|,
name|JavaClassSource
name|clazz
parameter_list|,
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|configureMethod
parameter_list|,
name|Block
name|block
parameter_list|,
name|Expression
name|exp
parameter_list|,
name|CamelNodeDetails
name|node
parameter_list|)
block|{
if|if
condition|(
name|exp
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|exp
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|MethodInvocation
name|mi
init|=
operator|(
name|MethodInvocation
operator|)
name|exp
decl_stmt|;
name|node
operator|=
name|doParseCamelModels
argument_list|(
name|nodeFactory
argument_list|,
name|fullyQualifiedFileName
argument_list|,
name|clazz
argument_list|,
name|configureMethod
argument_list|,
name|block
argument_list|,
name|mi
argument_list|,
name|node
argument_list|)
expr_stmt|;
comment|// if the method was called on another method, then recursive
name|exp
operator|=
name|mi
operator|.
name|getExpression
argument_list|()
expr_stmt|;
name|parseExpression
argument_list|(
name|nodeFactory
argument_list|,
name|fullyQualifiedFileName
argument_list|,
name|clazz
argument_list|,
name|configureMethod
argument_list|,
name|block
argument_list|,
name|exp
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doParseCamelModels (CamelNodeDetailsFactory nodeFactory, String fullyQualifiedFileName, JavaClassSource clazz, MethodSource<JavaClassSource> configureMethod, Block block, MethodInvocation mi, CamelNodeDetails node)
specifier|private
name|CamelNodeDetails
name|doParseCamelModels
parameter_list|(
name|CamelNodeDetailsFactory
name|nodeFactory
parameter_list|,
name|String
name|fullyQualifiedFileName
parameter_list|,
name|JavaClassSource
name|clazz
parameter_list|,
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|configureMethod
parameter_list|,
name|Block
name|block
parameter_list|,
name|MethodInvocation
name|mi
parameter_list|,
name|CamelNodeDetails
name|node
parameter_list|)
block|{
name|String
name|name
init|=
name|mi
operator|.
name|getName
argument_list|()
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
comment|// special for Java DSL having some endXXX
name|boolean
name|isEnd
init|=
literal|"end"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"endChoice"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"endDoTry"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"endHystrix"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"endParent"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"endRest"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|boolean
name|isRoute
init|=
literal|"route"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"from"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"routeId"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// must be an eip model that has either input or output as we only want to track processors (also accept from)
name|boolean
name|isEip
init|=
name|camelCatalog
operator|.
name|findModelNames
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|&&
operator|(
name|hasInput
argument_list|(
name|name
argument_list|)
operator|||
name|hasOutput
argument_list|(
name|name
argument_list|)
operator|)
decl_stmt|;
comment|// only include if its a known Camel model (dont include languages)
if|if
condition|(
name|isEnd
operator|||
name|isRoute
operator|||
name|isEip
condition|)
block|{
name|CamelNodeDetails
name|newNode
init|=
name|nodeFactory
operator|.
name|newNode
argument_list|(
name|node
argument_list|,
name|name
argument_list|)
decl_stmt|;
comment|// include source code details
name|int
name|pos
init|=
name|mi
operator|.
name|getName
argument_list|()
operator|.
name|getStartPosition
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|findLineNumber
argument_list|(
name|fullyQualifiedFileName
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|>
operator|-
literal|1
condition|)
block|{
name|newNode
operator|.
name|setLineNumber
argument_list|(
literal|""
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
name|newNode
operator|.
name|setFileName
argument_list|(
name|fullyQualifiedFileName
argument_list|)
expr_stmt|;
name|newNode
operator|.
name|setClassName
argument_list|(
name|clazz
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|newNode
operator|.
name|setMethodName
argument_list|(
name|configureMethod
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"routeId"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// grab the route id
name|List
name|args
init|=
name|mi
operator|.
name|arguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// the first argument has the route id
name|Expression
name|exp
init|=
operator|(
name|Expression
operator|)
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|routeId
init|=
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|exp
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeId
operator|!=
literal|null
condition|)
block|{
name|newNode
operator|.
name|setRouteId
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|node
operator|.
name|addPreliminaryOutput
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
return|return
name|node
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getField (JavaClassSource clazz, Block block, SimpleName ref)
specifier|private
specifier|static
name|FieldSource
argument_list|<
name|JavaClassSource
argument_list|>
name|getField
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|Block
name|block
parameter_list|,
name|SimpleName
name|ref
parameter_list|)
block|{
name|String
name|fieldName
init|=
name|ref
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|!=
literal|null
condition|)
block|{
comment|// find field in class
name|FieldSource
name|field
init|=
name|clazz
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|field
operator|=
name|findFieldInBlock
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
return|return
name|field
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|findFieldInBlock (JavaClassSource clazz, Block block, String fieldName)
specifier|private
specifier|static
name|FieldSource
argument_list|<
name|JavaClassSource
argument_list|>
name|findFieldInBlock
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|Block
name|block
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
for|for
control|(
name|Object
name|statement
range|:
name|block
operator|.
name|statements
argument_list|()
control|)
block|{
comment|// try local statements first in the block
if|if
condition|(
name|statement
operator|instanceof
name|VariableDeclarationStatement
condition|)
block|{
specifier|final
name|Type
name|type
init|=
operator|(
operator|(
name|VariableDeclarationStatement
operator|)
name|statement
operator|)
operator|.
name|getType
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
operator|(
operator|(
name|VariableDeclarationStatement
operator|)
name|statement
operator|)
operator|.
name|fragments
argument_list|()
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|VariableDeclarationFragment
condition|)
block|{
name|VariableDeclarationFragment
name|fragment
init|=
operator|(
name|VariableDeclarationFragment
operator|)
name|obj
decl_stmt|;
name|SimpleName
name|name
init|=
name|fragment
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|fieldName
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getIdentifier
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|StatementFieldSource
argument_list|(
name|clazz
argument_list|,
name|fragment
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
block|}
block|}
comment|// okay the field may be burried inside an anonymous inner class as a field declaration
comment|// outside the configure method, so lets go back to the parent and see what we can find
name|ASTNode
name|node
init|=
name|block
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|MethodDeclaration
condition|)
block|{
name|node
operator|=
name|node
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|instanceof
name|AnonymousClassDeclaration
condition|)
block|{
name|List
name|declarations
init|=
operator|(
operator|(
name|AnonymousClassDeclaration
operator|)
name|node
operator|)
operator|.
name|bodyDeclarations
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|dec
range|:
name|declarations
control|)
block|{
if|if
condition|(
name|dec
operator|instanceof
name|FieldDeclaration
condition|)
block|{
name|FieldDeclaration
name|fd
init|=
operator|(
name|FieldDeclaration
operator|)
name|dec
decl_stmt|;
specifier|final
name|Type
name|type
init|=
name|fd
operator|.
name|getType
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|fd
operator|.
name|fragments
argument_list|()
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|VariableDeclarationFragment
condition|)
block|{
name|VariableDeclarationFragment
name|fragment
init|=
operator|(
name|VariableDeclarationFragment
operator|)
name|obj
decl_stmt|;
name|SimpleName
name|name
init|=
name|fragment
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|fieldName
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getIdentifier
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|StatementFieldSource
argument_list|(
name|clazz
argument_list|,
name|fragment
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @deprecated currently not in use      */
annotation|@
name|Deprecated
DECL|method|getLiteralValue (JavaClassSource clazz, Block block, Expression expression)
specifier|public
specifier|static
name|String
name|getLiteralValue
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|Block
name|block
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
comment|// unwrap parenthesis
if|if
condition|(
name|expression
operator|instanceof
name|ParenthesizedExpression
condition|)
block|{
name|expression
operator|=
operator|(
operator|(
name|ParenthesizedExpression
operator|)
name|expression
operator|)
operator|.
name|getExpression
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|expression
operator|instanceof
name|StringLiteral
condition|)
block|{
return|return
operator|(
operator|(
name|StringLiteral
operator|)
name|expression
operator|)
operator|.
name|getLiteralValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|expression
operator|instanceof
name|BooleanLiteral
condition|)
block|{
return|return
literal|""
operator|+
operator|(
operator|(
name|BooleanLiteral
operator|)
name|expression
operator|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|expression
operator|instanceof
name|NumberLiteral
condition|)
block|{
return|return
operator|(
operator|(
name|NumberLiteral
operator|)
name|expression
operator|)
operator|.
name|getToken
argument_list|()
return|;
block|}
comment|// if it a method invocation then add a dummy value assuming the method invocation will return a valid response
if|if
condition|(
name|expression
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|String
name|name
init|=
operator|(
operator|(
name|MethodInvocation
operator|)
name|expression
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
return|return
literal|"{{"
operator|+
name|name
operator|+
literal|"}}"
return|;
block|}
comment|// if its a qualified name (usually a constant field in another class)
comment|// then add a dummy value as we cannot find the field value in other classes and maybe even outside the
comment|// source code we have access to
if|if
condition|(
name|expression
operator|instanceof
name|QualifiedName
condition|)
block|{
name|QualifiedName
name|qn
init|=
operator|(
name|QualifiedName
operator|)
name|expression
decl_stmt|;
name|String
name|name
init|=
name|qn
operator|.
name|getFullyQualifiedName
argument_list|()
decl_stmt|;
return|return
literal|"{{"
operator|+
name|name
operator|+
literal|"}}"
return|;
block|}
if|if
condition|(
name|expression
operator|instanceof
name|SimpleName
condition|)
block|{
name|FieldSource
argument_list|<
name|JavaClassSource
argument_list|>
name|field
init|=
name|getField
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
operator|(
name|SimpleName
operator|)
name|expression
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
comment|// is the field annotated with a Camel endpoint
if|if
condition|(
name|field
operator|.
name|getAnnotations
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Annotation
name|ann
range|:
name|field
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
name|boolean
name|valid
init|=
literal|"org.apache.camel.EndpointInject"
operator|.
name|equals
argument_list|(
name|ann
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
operator|||
literal|"org.apache.camel.cdi.Uri"
operator|.
name|equals
argument_list|(
name|ann
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|valid
condition|)
block|{
name|Expression
name|exp
init|=
operator|(
name|Expression
operator|)
name|ann
operator|.
name|getInternal
argument_list|()
decl_stmt|;
if|if
condition|(
name|exp
operator|instanceof
name|SingleMemberAnnotation
condition|)
block|{
name|exp
operator|=
operator|(
operator|(
name|SingleMemberAnnotation
operator|)
name|exp
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exp
operator|instanceof
name|NormalAnnotation
condition|)
block|{
name|List
name|values
init|=
operator|(
operator|(
name|NormalAnnotation
operator|)
name|exp
operator|)
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
name|MemberValuePair
name|pair
init|=
operator|(
name|MemberValuePair
operator|)
name|value
decl_stmt|;
if|if
condition|(
literal|"uri"
operator|.
name|equals
argument_list|(
name|pair
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|exp
operator|=
name|pair
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|exp
operator|!=
literal|null
condition|)
block|{
return|return
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|exp
argument_list|)
return|;
block|}
block|}
block|}
block|}
comment|// is the field an org.apache.camel.Endpoint type?
if|if
condition|(
literal|"Endpoint"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
comment|// then grab the uri from the first argument
name|VariableDeclarationFragment
name|vdf
init|=
operator|(
name|VariableDeclarationFragment
operator|)
name|field
operator|.
name|getInternal
argument_list|()
decl_stmt|;
name|expression
operator|=
name|vdf
operator|.
name|getInitializer
argument_list|()
expr_stmt|;
if|if
condition|(
name|expression
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|MethodInvocation
name|mi
init|=
operator|(
name|MethodInvocation
operator|)
name|expression
decl_stmt|;
name|List
name|args
init|=
name|mi
operator|.
name|arguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// the first argument has the endpoint uri
name|expression
operator|=
operator|(
name|Expression
operator|)
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|expression
argument_list|)
return|;
block|}
block|}
block|}
else|else
block|{
comment|// no annotations so try its initializer
name|VariableDeclarationFragment
name|vdf
init|=
operator|(
name|VariableDeclarationFragment
operator|)
name|field
operator|.
name|getInternal
argument_list|()
decl_stmt|;
name|expression
operator|=
name|vdf
operator|.
name|getInitializer
argument_list|()
expr_stmt|;
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
comment|// its a field which has no initializer, then add a dummy value assuming the field will be initialized at runtime
return|return
literal|"{{"
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|"}}"
return|;
block|}
else|else
block|{
return|return
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|expression
argument_list|)
return|;
block|}
block|}
block|}
else|else
block|{
comment|// we could not find the field in this class/method, so its maybe from some other super class, so insert a dummy value
specifier|final
name|String
name|fieldName
init|=
operator|(
operator|(
name|SimpleName
operator|)
name|expression
operator|)
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
return|return
literal|"{{"
operator|+
name|fieldName
operator|+
literal|"}}"
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|expression
operator|instanceof
name|InfixExpression
condition|)
block|{
name|String
name|answer
init|=
literal|null
decl_stmt|;
comment|// is it a string that is concat together?
name|InfixExpression
name|ie
init|=
operator|(
name|InfixExpression
operator|)
name|expression
decl_stmt|;
if|if
condition|(
name|InfixExpression
operator|.
name|Operator
operator|.
name|PLUS
operator|.
name|equals
argument_list|(
name|ie
operator|.
name|getOperator
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|val1
init|=
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|ie
operator|.
name|getLeftOperand
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|val2
init|=
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|ie
operator|.
name|getRightOperand
argument_list|()
argument_list|)
decl_stmt|;
comment|// if numeric then we plus the values, otherwise we string concat
name|boolean
name|numeric
init|=
name|isNumericOperator
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|ie
operator|.
name|getLeftOperand
argument_list|()
argument_list|)
operator|&&
name|isNumericOperator
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|ie
operator|.
name|getRightOperand
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|numeric
condition|)
block|{
name|Long
name|num1
init|=
name|val1
operator|!=
literal|null
condition|?
name|Long
operator|.
name|valueOf
argument_list|(
name|val1
argument_list|)
else|:
literal|0
decl_stmt|;
name|Long
name|num2
init|=
name|val2
operator|!=
literal|null
condition|?
name|Long
operator|.
name|valueOf
argument_list|(
name|val2
argument_list|)
else|:
literal|0
decl_stmt|;
name|answer
operator|=
literal|""
operator|+
operator|(
name|num1
operator|+
name|num2
operator|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
operator|(
name|val1
operator|!=
literal|null
condition|?
name|val1
else|:
literal|""
operator|)
operator|+
operator|(
name|val2
operator|!=
literal|null
condition|?
name|val2
else|:
literal|""
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|answer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// include extended when we concat on 2 or more lines
name|List
name|extended
init|=
name|ie
operator|.
name|extendedOperands
argument_list|()
decl_stmt|;
if|if
condition|(
name|extended
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|ext
range|:
name|extended
control|)
block|{
name|String
name|val3
init|=
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
operator|(
name|Expression
operator|)
name|ext
argument_list|)
decl_stmt|;
if|if
condition|(
name|numeric
condition|)
block|{
name|Long
name|num3
init|=
name|val3
operator|!=
literal|null
condition|?
name|Long
operator|.
name|valueOf
argument_list|(
name|val3
argument_list|)
else|:
literal|0
decl_stmt|;
name|Long
name|num
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|answer
argument_list|)
decl_stmt|;
name|answer
operator|=
literal|""
operator|+
operator|(
name|num
operator|+
name|num3
operator|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|+=
name|val3
operator|!=
literal|null
condition|?
name|val3
else|:
literal|""
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|isNumericOperator (JavaClassSource clazz, Block block, Expression expression)
specifier|private
specifier|static
name|boolean
name|isNumericOperator
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|Block
name|block
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|instanceof
name|NumberLiteral
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|expression
operator|instanceof
name|SimpleName
condition|)
block|{
name|FieldSource
name|field
init|=
name|getField
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
operator|(
name|SimpleName
operator|)
name|expression
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
return|return
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isType
argument_list|(
literal|"int"
argument_list|)
operator|||
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isType
argument_list|(
literal|"long"
argument_list|)
operator|||
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isType
argument_list|(
literal|"Integer"
argument_list|)
operator|||
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isType
argument_list|(
literal|"Long"
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|findLineNumber (String fullyQualifiedFileName, int position)
specifier|private
specifier|static
name|int
name|findLineNumber
parameter_list|(
name|String
name|fullyQualifiedFileName
parameter_list|,
name|int
name|position
parameter_list|)
block|{
name|int
name|lines
init|=
literal|0
decl_stmt|;
try|try
block|{
name|int
name|current
init|=
literal|0
decl_stmt|;
try|try
init|(
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
operator|new
name|File
argument_list|(
name|fullyQualifiedFileName
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|lines
operator|++
expr_stmt|;
name|current
operator|+=
name|line
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
comment|// add 1 for line feed
if|if
condition|(
name|current
operator|>=
name|position
condition|)
block|{
return|return
name|lines
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
return|return
operator|-
literal|1
return|;
block|}
return|return
name|lines
return|;
block|}
block|}
end_class

end_unit

