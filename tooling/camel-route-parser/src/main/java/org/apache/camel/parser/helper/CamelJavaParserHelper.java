begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.parser.helper
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|helper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|RouteBuilderParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|roaster
operator|.
name|AnonymousMethodSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|roaster
operator|.
name|StatementFieldSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|AnonymousClassDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|BooleanLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|ClassInstanceCreation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|ExpressionStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|FieldDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|IAnnotationBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|ITypeBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|InfixExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|MemberValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|MethodDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|MethodInvocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|NormalAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|NumberLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|ParenthesizedExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|QualifiedName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|ReturnStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|SimpleName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|SingleMemberAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|StringLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|VariableDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|VariableDeclarationFragment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|VariableDeclarationStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|AnnotationSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|FieldSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|JavaClassSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|MethodSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_comment
comment|/**  * A Camel Java parser that only depends on the Roaster API.  *<p/>  * This implementation is lower level details. For a higher level parser see {@link RouteBuilderParser}.  */
end_comment

begin_class
DECL|class|CamelJavaParserHelper
specifier|public
specifier|final
class|class
name|CamelJavaParserHelper
block|{
DECL|method|CamelJavaParserHelper ()
specifier|private
name|CamelJavaParserHelper
parameter_list|()
block|{
comment|// utility class
block|}
DECL|method|findConfigureMethod (JavaClassSource clazz)
specifier|public
specifier|static
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|findConfigureMethod
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|)
block|{
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|method
init|=
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"configure"
argument_list|)
decl_stmt|;
comment|// must be public void configure()
if|if
condition|(
name|method
operator|!=
literal|null
operator|&&
name|method
operator|.
name|isPublic
argument_list|()
operator|&&
name|method
operator|.
name|getParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|isType
argument_list|(
literal|"void"
argument_list|)
condition|)
block|{
return|return
name|method
return|;
block|}
comment|// maybe the route builder is from unit testing with camel-test as an anonymous inner class
comment|// there is a bit of code to dig out this using the eclipse jdt api
name|method
operator|=
name|findCreateRouteBuilderMethod
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
return|return
name|findConfigureMethodInCreateRouteBuilder
argument_list|(
name|clazz
argument_list|,
name|method
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|findInlinedConfigureMethods (JavaClassSource clazz)
specifier|public
specifier|static
name|List
argument_list|<
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
argument_list|>
name|findInlinedConfigureMethods
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|)
block|{
name|List
argument_list|<
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
argument_list|>
name|methods
init|=
name|clazz
operator|.
name|getMethods
argument_list|()
decl_stmt|;
if|if
condition|(
name|methods
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|method
range|:
name|methods
control|)
block|{
if|if
condition|(
name|method
operator|.
name|isPublic
argument_list|()
operator|&&
operator|(
name|method
operator|.
name|getParameters
argument_list|()
operator|==
literal|null
operator|||
name|method
operator|.
name|getParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
literal|null
operator|||
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|isType
argument_list|(
literal|"void"
argument_list|)
operator|)
condition|)
block|{
comment|// maybe the method contains an inlined createRouteBuilder usually from an unit test method
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|builder
init|=
name|findConfigureMethodInCreateRouteBuilder
argument_list|(
name|clazz
argument_list|,
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|findCreateRouteBuilderMethod (JavaClassSource clazz)
specifier|private
specifier|static
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|findCreateRouteBuilderMethod
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|)
block|{
name|MethodSource
name|method
init|=
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"createRouteBuilder"
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
operator|&&
operator|(
name|method
operator|.
name|isPublic
argument_list|()
operator|||
name|method
operator|.
name|isProtected
argument_list|()
operator|)
operator|&&
name|method
operator|.
name|getParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|method
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|findConfigureMethodInCreateRouteBuilder (JavaClassSource clazz, MethodSource<JavaClassSource> method)
specifier|private
specifier|static
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|findConfigureMethodInCreateRouteBuilder
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|method
parameter_list|)
block|{
comment|// find configure inside the code
name|MethodDeclaration
name|md
init|=
operator|(
name|MethodDeclaration
operator|)
name|method
operator|.
name|getInternal
argument_list|()
decl_stmt|;
name|Block
name|block
init|=
name|md
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|block
operator|!=
literal|null
condition|)
block|{
name|List
name|statements
init|=
name|block
operator|.
name|statements
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|statements
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Statement
name|stmt
init|=
operator|(
name|Statement
operator|)
name|statements
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Expression
name|exp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|stmt
operator|instanceof
name|ReturnStatement
condition|)
block|{
name|ReturnStatement
name|rs
init|=
operator|(
name|ReturnStatement
operator|)
name|stmt
decl_stmt|;
name|exp
operator|=
name|rs
operator|.
name|getExpression
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stmt
operator|instanceof
name|ExpressionStatement
condition|)
block|{
name|ExpressionStatement
name|es
init|=
operator|(
name|ExpressionStatement
operator|)
name|stmt
decl_stmt|;
name|exp
operator|=
name|es
operator|.
name|getExpression
argument_list|()
expr_stmt|;
if|if
condition|(
name|exp
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|MethodInvocation
name|mi
init|=
operator|(
name|MethodInvocation
operator|)
name|exp
decl_stmt|;
for|for
control|(
name|Object
name|arg
range|:
name|mi
operator|.
name|arguments
argument_list|()
control|)
block|{
if|if
condition|(
name|arg
operator|instanceof
name|ClassInstanceCreation
condition|)
block|{
name|exp
operator|=
operator|(
name|Expression
operator|)
name|arg
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|exp
operator|!=
literal|null
operator|&&
name|exp
operator|instanceof
name|ClassInstanceCreation
condition|)
block|{
name|ClassInstanceCreation
name|cic
init|=
operator|(
name|ClassInstanceCreation
operator|)
name|exp
decl_stmt|;
name|boolean
name|isRouteBuilder
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|cic
operator|.
name|getType
argument_list|()
operator|instanceof
name|SimpleType
condition|)
block|{
name|SimpleType
name|st
init|=
operator|(
name|SimpleType
operator|)
name|cic
operator|.
name|getType
argument_list|()
decl_stmt|;
name|isRouteBuilder
operator|=
literal|"RouteBuilder"
operator|.
name|equals
argument_list|(
name|st
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRouteBuilder
operator|&&
name|cic
operator|.
name|getAnonymousClassDeclaration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
name|body
init|=
name|cic
operator|.
name|getAnonymousClassDeclaration
argument_list|()
operator|.
name|bodyDeclarations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|body
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|line
init|=
name|body
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|instanceof
name|MethodDeclaration
condition|)
block|{
name|MethodDeclaration
name|amd
init|=
operator|(
name|MethodDeclaration
operator|)
name|line
decl_stmt|;
if|if
condition|(
literal|"configure"
operator|.
name|equals
argument_list|(
name|amd
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|AnonymousMethodSource
argument_list|(
name|clazz
argument_list|,
name|amd
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|parseCamelConsumerUris (MethodSource<JavaClassSource> method, boolean strings, boolean fields)
specifier|public
specifier|static
name|List
argument_list|<
name|ParserResult
argument_list|>
name|parseCamelConsumerUris
parameter_list|(
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|method
parameter_list|,
name|boolean
name|strings
parameter_list|,
name|boolean
name|fields
parameter_list|)
block|{
return|return
name|doParseCamelUris
argument_list|(
name|method
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|strings
argument_list|,
name|fields
argument_list|)
return|;
block|}
DECL|method|parseCamelProducerUris (MethodSource<JavaClassSource> method, boolean strings, boolean fields)
specifier|public
specifier|static
name|List
argument_list|<
name|ParserResult
argument_list|>
name|parseCamelProducerUris
parameter_list|(
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|method
parameter_list|,
name|boolean
name|strings
parameter_list|,
name|boolean
name|fields
parameter_list|)
block|{
return|return
name|doParseCamelUris
argument_list|(
name|method
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|strings
argument_list|,
name|fields
argument_list|)
return|;
block|}
DECL|method|doParseCamelUris (MethodSource<JavaClassSource> method, boolean consumers, boolean producers, boolean strings, boolean fields)
specifier|private
specifier|static
name|List
argument_list|<
name|ParserResult
argument_list|>
name|doParseCamelUris
parameter_list|(
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|method
parameter_list|,
name|boolean
name|consumers
parameter_list|,
name|boolean
name|producers
parameter_list|,
name|boolean
name|strings
parameter_list|,
name|boolean
name|fields
parameter_list|)
block|{
name|List
argument_list|<
name|ParserResult
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|ParserResult
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|MethodDeclaration
name|md
init|=
operator|(
name|MethodDeclaration
operator|)
name|method
operator|.
name|getInternal
argument_list|()
decl_stmt|;
name|Block
name|block
init|=
name|md
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|block
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|statement
range|:
name|md
operator|.
name|getBody
argument_list|()
operator|.
name|statements
argument_list|()
control|)
block|{
comment|// must be a method call expression
if|if
condition|(
name|statement
operator|instanceof
name|ExpressionStatement
condition|)
block|{
name|ExpressionStatement
name|es
init|=
operator|(
name|ExpressionStatement
operator|)
name|statement
decl_stmt|;
name|Expression
name|exp
init|=
name|es
operator|.
name|getExpression
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ParserResult
argument_list|>
name|uris
init|=
operator|new
name|ArrayList
argument_list|<
name|ParserResult
argument_list|>
argument_list|()
decl_stmt|;
name|parseExpression
argument_list|(
name|method
operator|.
name|getOrigin
argument_list|()
argument_list|,
name|block
argument_list|,
name|exp
argument_list|,
name|uris
argument_list|,
name|consumers
argument_list|,
name|producers
argument_list|,
name|strings
argument_list|,
name|fields
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|uris
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// reverse the order as we will grab them from last->first
name|Collections
operator|.
name|reverse
argument_list|(
name|uris
argument_list|)
expr_stmt|;
name|answer
operator|.
name|addAll
argument_list|(
name|uris
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|parseExpression (JavaClassSource clazz, Block block, Expression exp, List<ParserResult> uris, boolean consumers, boolean producers, boolean strings, boolean fields)
specifier|private
specifier|static
name|void
name|parseExpression
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|Block
name|block
parameter_list|,
name|Expression
name|exp
parameter_list|,
name|List
argument_list|<
name|ParserResult
argument_list|>
name|uris
parameter_list|,
name|boolean
name|consumers
parameter_list|,
name|boolean
name|producers
parameter_list|,
name|boolean
name|strings
parameter_list|,
name|boolean
name|fields
parameter_list|)
block|{
if|if
condition|(
name|exp
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|exp
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|MethodInvocation
name|mi
init|=
operator|(
name|MethodInvocation
operator|)
name|exp
decl_stmt|;
name|doParseCamelUris
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|,
name|uris
argument_list|,
name|consumers
argument_list|,
name|producers
argument_list|,
name|strings
argument_list|,
name|fields
argument_list|)
expr_stmt|;
comment|// if the method was called on another method, then recursive
name|exp
operator|=
name|mi
operator|.
name|getExpression
argument_list|()
expr_stmt|;
name|parseExpression
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|exp
argument_list|,
name|uris
argument_list|,
name|consumers
argument_list|,
name|producers
argument_list|,
name|strings
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doParseCamelUris (JavaClassSource clazz, Block block, MethodInvocation mi, List<ParserResult> uris, boolean consumers, boolean producers, boolean strings, boolean fields)
specifier|private
specifier|static
name|void
name|doParseCamelUris
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|Block
name|block
parameter_list|,
name|MethodInvocation
name|mi
parameter_list|,
name|List
argument_list|<
name|ParserResult
argument_list|>
name|uris
parameter_list|,
name|boolean
name|consumers
parameter_list|,
name|boolean
name|producers
parameter_list|,
name|boolean
name|strings
parameter_list|,
name|boolean
name|fields
parameter_list|)
block|{
name|String
name|name
init|=
name|mi
operator|.
name|getName
argument_list|()
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|consumers
condition|)
block|{
if|if
condition|(
literal|"from"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|List
name|args
init|=
name|mi
operator|.
name|arguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|arg
range|:
name|args
control|)
block|{
if|if
condition|(
name|isValidArgument
argument_list|(
name|name
argument_list|,
name|arg
argument_list|)
condition|)
block|{
name|extractEndpointUriFromArgument
argument_list|(
name|name
argument_list|,
name|clazz
argument_list|,
name|block
argument_list|,
name|uris
argument_list|,
name|arg
argument_list|,
name|strings
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
literal|"fromF"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|List
name|args
init|=
name|mi
operator|.
name|arguments
argument_list|()
decl_stmt|;
comment|// the first argument is where the uri is
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|Object
name|arg
init|=
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|isValidArgument
argument_list|(
name|name
argument_list|,
name|arg
argument_list|)
condition|)
block|{
name|extractEndpointUriFromArgument
argument_list|(
name|name
argument_list|,
name|clazz
argument_list|,
name|block
argument_list|,
name|uris
argument_list|,
name|arg
argument_list|,
name|strings
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
literal|"interceptFrom"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|List
name|args
init|=
name|mi
operator|.
name|arguments
argument_list|()
decl_stmt|;
comment|// the first argument is where the uri is
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|Object
name|arg
init|=
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|isValidArgument
argument_list|(
name|name
argument_list|,
name|arg
argument_list|)
condition|)
block|{
name|extractEndpointUriFromArgument
argument_list|(
name|name
argument_list|,
name|clazz
argument_list|,
name|block
argument_list|,
name|uris
argument_list|,
name|arg
argument_list|,
name|strings
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
literal|"pollEnrich"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|List
name|args
init|=
name|mi
operator|.
name|arguments
argument_list|()
decl_stmt|;
comment|// the first argument is where the uri is
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|Object
name|arg
init|=
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|isValidArgument
argument_list|(
name|name
argument_list|,
name|arg
argument_list|)
condition|)
block|{
name|extractEndpointUriFromArgument
argument_list|(
name|name
argument_list|,
name|clazz
argument_list|,
name|block
argument_list|,
name|uris
argument_list|,
name|arg
argument_list|,
name|strings
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|producers
condition|)
block|{
if|if
condition|(
literal|"to"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"toD"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|List
name|args
init|=
name|mi
operator|.
name|arguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|arg
range|:
name|args
control|)
block|{
comment|// skip if the arg is a boolean, ExchangePattern or Iterateable, type
if|if
condition|(
name|isValidArgument
argument_list|(
name|name
argument_list|,
name|arg
argument_list|)
condition|)
block|{
name|extractEndpointUriFromArgument
argument_list|(
name|name
argument_list|,
name|clazz
argument_list|,
name|block
argument_list|,
name|uris
argument_list|,
name|arg
argument_list|,
name|strings
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
literal|"toF"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|List
name|args
init|=
name|mi
operator|.
name|arguments
argument_list|()
decl_stmt|;
comment|// the first argument is where the uri is
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|Object
name|arg
init|=
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|isValidArgument
argument_list|(
name|name
argument_list|,
name|arg
argument_list|)
condition|)
block|{
name|extractEndpointUriFromArgument
argument_list|(
name|name
argument_list|,
name|clazz
argument_list|,
name|block
argument_list|,
name|uris
argument_list|,
name|arg
argument_list|,
name|strings
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
literal|"enrich"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"wireTap"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|List
name|args
init|=
name|mi
operator|.
name|arguments
argument_list|()
decl_stmt|;
comment|// the first argument is where the uri is
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|Object
name|arg
init|=
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|isValidArgument
argument_list|(
name|name
argument_list|,
name|arg
argument_list|)
condition|)
block|{
name|extractEndpointUriFromArgument
argument_list|(
name|name
argument_list|,
name|clazz
argument_list|,
name|block
argument_list|,
name|uris
argument_list|,
name|arg
argument_list|,
name|strings
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|isValidArgument (String node, Object arg)
specifier|private
specifier|static
name|boolean
name|isValidArgument
parameter_list|(
name|String
name|node
parameter_list|,
name|Object
name|arg
parameter_list|)
block|{
comment|// skip boolean argument, as toD can accept a boolean value
if|if
condition|(
name|arg
operator|instanceof
name|BooleanLiteral
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// skip ExchangePattern argument
if|if
condition|(
name|arg
operator|instanceof
name|QualifiedName
condition|)
block|{
name|QualifiedName
name|qn
init|=
operator|(
name|QualifiedName
operator|)
name|arg
decl_stmt|;
name|String
name|name
init|=
name|qn
operator|.
name|getFullyQualifiedName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"ExchangePattern"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|extractEndpointUriFromArgument (String node, JavaClassSource clazz, Block block, List<ParserResult> uris, Object arg, boolean strings, boolean fields)
specifier|private
specifier|static
name|void
name|extractEndpointUriFromArgument
parameter_list|(
name|String
name|node
parameter_list|,
name|JavaClassSource
name|clazz
parameter_list|,
name|Block
name|block
parameter_list|,
name|List
argument_list|<
name|ParserResult
argument_list|>
name|uris
parameter_list|,
name|Object
name|arg
parameter_list|,
name|boolean
name|strings
parameter_list|,
name|boolean
name|fields
parameter_list|)
block|{
if|if
condition|(
name|strings
condition|)
block|{
name|String
name|uri
init|=
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
operator|(
name|Expression
operator|)
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|int
name|position
init|=
operator|(
operator|(
name|Expression
operator|)
name|arg
operator|)
operator|.
name|getStartPosition
argument_list|()
decl_stmt|;
comment|// if the node is fromF or toF, then replace all %X with {{%X}} as we cannot parse that value
if|if
condition|(
literal|"fromF"
operator|.
name|equals
argument_list|(
name|node
argument_list|)
operator|||
literal|"toF"
operator|.
name|equals
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|replaceAll
argument_list|(
literal|"\\%s"
argument_list|,
literal|"\\{\\{\\%s\\}\\}"
argument_list|)
expr_stmt|;
name|uri
operator|=
name|uri
operator|.
name|replaceAll
argument_list|(
literal|"\\%d"
argument_list|,
literal|"\\{\\{\\%d\\}\\}"
argument_list|)
expr_stmt|;
name|uri
operator|=
name|uri
operator|.
name|replaceAll
argument_list|(
literal|"\\%b"
argument_list|,
literal|"\\{\\{\\%b\\}\\}"
argument_list|)
expr_stmt|;
block|}
name|uris
operator|.
name|add
argument_list|(
operator|new
name|ParserResult
argument_list|(
name|node
argument_list|,
name|position
argument_list|,
name|uri
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|fields
operator|&&
name|arg
operator|instanceof
name|SimpleName
condition|)
block|{
name|FieldSource
name|field
init|=
name|getField
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
operator|(
name|SimpleName
operator|)
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
comment|// find the endpoint uri from the annotation
name|AnnotationSource
name|annotation
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
literal|"org.apache.camel.cdi.Uri"
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|==
literal|null
condition|)
block|{
name|annotation
operator|=
name|field
operator|.
name|getAnnotation
argument_list|(
literal|"org.apache.camel.EndpointInject"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
name|Expression
name|exp
init|=
operator|(
name|Expression
operator|)
name|annotation
operator|.
name|getInternal
argument_list|()
decl_stmt|;
if|if
condition|(
name|exp
operator|instanceof
name|SingleMemberAnnotation
condition|)
block|{
name|exp
operator|=
operator|(
operator|(
name|SingleMemberAnnotation
operator|)
name|exp
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exp
operator|instanceof
name|NormalAnnotation
condition|)
block|{
name|List
name|values
init|=
operator|(
operator|(
name|NormalAnnotation
operator|)
name|exp
operator|)
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
name|MemberValuePair
name|pair
init|=
operator|(
name|MemberValuePair
operator|)
name|value
decl_stmt|;
if|if
condition|(
literal|"uri"
operator|.
name|equals
argument_list|(
name|pair
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|exp
operator|=
name|pair
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
name|String
name|uri
init|=
name|CamelJavaParserHelper
operator|.
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|exp
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|int
name|position
init|=
operator|(
operator|(
name|SimpleName
operator|)
name|arg
operator|)
operator|.
name|getStartPosition
argument_list|()
decl_stmt|;
name|uris
operator|.
name|add
argument_list|(
operator|new
name|ParserResult
argument_list|(
name|node
argument_list|,
name|position
argument_list|,
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// the field may be initialized using variables, so we need to evaluate those expressions
name|Object
name|fi
init|=
name|field
operator|.
name|getInternal
argument_list|()
decl_stmt|;
if|if
condition|(
name|fi
operator|instanceof
name|VariableDeclaration
condition|)
block|{
name|Expression
name|exp
init|=
operator|(
operator|(
name|VariableDeclaration
operator|)
name|fi
operator|)
operator|.
name|getInitializer
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
name|CamelJavaParserHelper
operator|.
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|exp
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|uri
argument_list|)
condition|)
block|{
comment|// we want the position of the field, and not in the route
name|int
name|position
init|=
operator|(
operator|(
name|VariableDeclaration
operator|)
name|fi
operator|)
operator|.
name|getStartPosition
argument_list|()
decl_stmt|;
name|uris
operator|.
name|add
argument_list|(
operator|new
name|ParserResult
argument_list|(
name|node
argument_list|,
name|position
argument_list|,
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// cannot parse it so add a failure
name|uris
operator|.
name|add
argument_list|(
operator|new
name|ParserResult
argument_list|(
name|node
argument_list|,
operator|-
literal|1
argument_list|,
name|arg
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|parseCamelSimpleExpressions (MethodSource<JavaClassSource> method)
specifier|public
specifier|static
name|List
argument_list|<
name|ParserResult
argument_list|>
name|parseCamelSimpleExpressions
parameter_list|(
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|method
parameter_list|)
block|{
name|List
argument_list|<
name|ParserResult
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|ParserResult
argument_list|>
argument_list|()
decl_stmt|;
name|MethodDeclaration
name|md
init|=
operator|(
name|MethodDeclaration
operator|)
name|method
operator|.
name|getInternal
argument_list|()
decl_stmt|;
name|Block
name|block
init|=
name|md
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|block
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|statement
range|:
name|block
operator|.
name|statements
argument_list|()
control|)
block|{
comment|// must be a method call expression
if|if
condition|(
name|statement
operator|instanceof
name|ExpressionStatement
condition|)
block|{
name|ExpressionStatement
name|es
init|=
operator|(
name|ExpressionStatement
operator|)
name|statement
decl_stmt|;
name|Expression
name|exp
init|=
name|es
operator|.
name|getExpression
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ParserResult
argument_list|>
name|expressions
init|=
operator|new
name|ArrayList
argument_list|<
name|ParserResult
argument_list|>
argument_list|()
decl_stmt|;
name|parseExpression
argument_list|(
literal|null
argument_list|,
name|method
operator|.
name|getOrigin
argument_list|()
argument_list|,
name|block
argument_list|,
name|exp
argument_list|,
name|expressions
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|expressions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// reverse the order as we will grab them from last->first
name|Collections
operator|.
name|reverse
argument_list|(
name|expressions
argument_list|)
expr_stmt|;
name|answer
operator|.
name|addAll
argument_list|(
name|expressions
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|parseExpression (String node, JavaClassSource clazz, Block block, Expression exp, List<ParserResult> expressions)
specifier|private
specifier|static
name|void
name|parseExpression
parameter_list|(
name|String
name|node
parameter_list|,
name|JavaClassSource
name|clazz
parameter_list|,
name|Block
name|block
parameter_list|,
name|Expression
name|exp
parameter_list|,
name|List
argument_list|<
name|ParserResult
argument_list|>
name|expressions
parameter_list|)
block|{
if|if
condition|(
name|exp
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|exp
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|MethodInvocation
name|mi
init|=
operator|(
name|MethodInvocation
operator|)
name|exp
decl_stmt|;
name|doParseCamelSimple
argument_list|(
name|node
argument_list|,
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|,
name|expressions
argument_list|)
expr_stmt|;
comment|// if the method was called on another method, then recursive
name|exp
operator|=
name|mi
operator|.
name|getExpression
argument_list|()
expr_stmt|;
name|parseExpression
argument_list|(
name|node
argument_list|,
name|clazz
argument_list|,
name|block
argument_list|,
name|exp
argument_list|,
name|expressions
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doParseCamelSimple (String node, JavaClassSource clazz, Block block, MethodInvocation mi, List<ParserResult> expressions)
specifier|private
specifier|static
name|void
name|doParseCamelSimple
parameter_list|(
name|String
name|node
parameter_list|,
name|JavaClassSource
name|clazz
parameter_list|,
name|Block
name|block
parameter_list|,
name|MethodInvocation
name|mi
parameter_list|,
name|List
argument_list|<
name|ParserResult
argument_list|>
name|expressions
parameter_list|)
block|{
name|String
name|name
init|=
name|mi
operator|.
name|getName
argument_list|()
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"simple"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|List
name|args
init|=
name|mi
operator|.
name|arguments
argument_list|()
decl_stmt|;
comment|// the first argument is a string parameter for the simple expression
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
comment|// it is a String type
name|Object
name|arg
init|=
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|simple
init|=
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
operator|(
name|Expression
operator|)
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|simple
argument_list|)
condition|)
block|{
comment|// is this a simple expression that is called as a predicate or expression
name|boolean
name|predicate
init|=
literal|false
decl_stmt|;
name|Expression
name|parent
init|=
name|mi
operator|.
name|getExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
comment|// maybe its an argument
comment|// simple maybe be passed in as an argument
name|List
name|list
init|=
name|mi
operator|.
name|arguments
argument_list|()
decl_stmt|;
comment|// must be a single argument
if|if
condition|(
name|list
operator|!=
literal|null
operator|&&
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|ASTNode
name|o
init|=
operator|(
name|ASTNode
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ASTNode
name|p
init|=
name|o
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|MethodInvocation
condition|)
block|{
comment|// this is simple
name|String
name|pName
init|=
operator|(
operator|(
name|MethodInvocation
operator|)
name|p
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"simple"
operator|.
name|equals
argument_list|(
name|pName
argument_list|)
condition|)
block|{
comment|// okay find the parent of simple which is the method that uses simple
name|parent
operator|=
operator|(
name|Expression
operator|)
name|p
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|MethodInvocation
name|emi
init|=
operator|(
name|MethodInvocation
operator|)
name|parent
decl_stmt|;
name|String
name|parentName
init|=
name|emi
operator|.
name|getName
argument_list|()
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|predicate
operator|=
name|isSimplePredicate
argument_list|(
name|parentName
argument_list|)
expr_stmt|;
block|}
name|int
name|position
init|=
operator|(
operator|(
name|Expression
operator|)
name|arg
operator|)
operator|.
name|getStartPosition
argument_list|()
decl_stmt|;
name|ParserResult
name|result
init|=
operator|new
name|ParserResult
argument_list|(
name|node
argument_list|,
name|position
argument_list|,
name|simple
argument_list|)
decl_stmt|;
name|result
operator|.
name|setPredicate
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
name|expressions
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// simple maybe be passed in as an argument
name|List
name|args
init|=
name|mi
operator|.
name|arguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|arg
range|:
name|args
control|)
block|{
if|if
condition|(
name|arg
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|MethodInvocation
name|ami
init|=
operator|(
name|MethodInvocation
operator|)
name|arg
decl_stmt|;
name|doParseCamelSimple
argument_list|(
name|node
argument_list|,
name|clazz
argument_list|,
name|block
argument_list|,
name|ami
argument_list|,
name|expressions
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Using simple expressions in the Java DSL may be used in certain places as predicate only      */
DECL|method|isSimplePredicate (String name)
specifier|private
specifier|static
name|boolean
name|isSimplePredicate
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"completionPredicate"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"completion"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"onWhen"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"when"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"handled"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"continued"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"retryWhile"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"filter"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"validate"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"loopDoWhile"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getField (JavaClassSource clazz, Block block, SimpleName ref)
specifier|private
specifier|static
name|FieldSource
argument_list|<
name|JavaClassSource
argument_list|>
name|getField
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|Block
name|block
parameter_list|,
name|SimpleName
name|ref
parameter_list|)
block|{
name|String
name|fieldName
init|=
name|ref
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|!=
literal|null
condition|)
block|{
comment|// find field in class
name|FieldSource
name|field
init|=
name|clazz
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|field
operator|=
name|findFieldInBlock
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
return|return
name|field
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|findFieldInBlock (JavaClassSource clazz, Block block, String fieldName)
specifier|private
specifier|static
name|FieldSource
argument_list|<
name|JavaClassSource
argument_list|>
name|findFieldInBlock
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|Block
name|block
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
for|for
control|(
name|Object
name|statement
range|:
name|block
operator|.
name|statements
argument_list|()
control|)
block|{
comment|// try local statements first in the block
if|if
condition|(
name|statement
operator|instanceof
name|VariableDeclarationStatement
condition|)
block|{
specifier|final
name|Type
name|type
init|=
operator|(
operator|(
name|VariableDeclarationStatement
operator|)
name|statement
operator|)
operator|.
name|getType
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
operator|(
operator|(
name|VariableDeclarationStatement
operator|)
name|statement
operator|)
operator|.
name|fragments
argument_list|()
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|VariableDeclarationFragment
condition|)
block|{
name|VariableDeclarationFragment
name|fragment
init|=
operator|(
name|VariableDeclarationFragment
operator|)
name|obj
decl_stmt|;
name|SimpleName
name|name
init|=
name|fragment
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|fieldName
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getIdentifier
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|StatementFieldSource
argument_list|(
name|clazz
argument_list|,
name|fragment
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
block|}
block|}
comment|// okay the field may be burried inside an anonymous inner class as a field declaration
comment|// outside the configure method, so lets go back to the parent and see what we can find
name|ASTNode
name|node
init|=
name|block
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|MethodDeclaration
condition|)
block|{
name|node
operator|=
name|node
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|instanceof
name|AnonymousClassDeclaration
condition|)
block|{
name|List
name|declarations
init|=
operator|(
operator|(
name|AnonymousClassDeclaration
operator|)
name|node
operator|)
operator|.
name|bodyDeclarations
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|dec
range|:
name|declarations
control|)
block|{
if|if
condition|(
name|dec
operator|instanceof
name|FieldDeclaration
condition|)
block|{
name|FieldDeclaration
name|fd
init|=
operator|(
name|FieldDeclaration
operator|)
name|dec
decl_stmt|;
specifier|final
name|Type
name|type
init|=
name|fd
operator|.
name|getType
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|fd
operator|.
name|fragments
argument_list|()
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|VariableDeclarationFragment
condition|)
block|{
name|VariableDeclarationFragment
name|fragment
init|=
operator|(
name|VariableDeclarationFragment
operator|)
name|obj
decl_stmt|;
name|SimpleName
name|name
init|=
name|fragment
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|fieldName
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getIdentifier
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|StatementFieldSource
argument_list|(
name|clazz
argument_list|,
name|fragment
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getLiteralValue (JavaClassSource clazz, Block block, Expression expression)
specifier|public
specifier|static
name|String
name|getLiteralValue
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|Block
name|block
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
comment|// unwrap parenthesis
if|if
condition|(
name|expression
operator|instanceof
name|ParenthesizedExpression
condition|)
block|{
name|expression
operator|=
operator|(
operator|(
name|ParenthesizedExpression
operator|)
name|expression
operator|)
operator|.
name|getExpression
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|expression
operator|instanceof
name|StringLiteral
condition|)
block|{
return|return
operator|(
operator|(
name|StringLiteral
operator|)
name|expression
operator|)
operator|.
name|getLiteralValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|expression
operator|instanceof
name|BooleanLiteral
condition|)
block|{
return|return
literal|""
operator|+
operator|(
operator|(
name|BooleanLiteral
operator|)
name|expression
operator|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|expression
operator|instanceof
name|NumberLiteral
condition|)
block|{
return|return
operator|(
operator|(
name|NumberLiteral
operator|)
name|expression
operator|)
operator|.
name|getToken
argument_list|()
return|;
block|}
comment|// if it a method invocation then add a dummy value assuming the method invocation will return a valid response
if|if
condition|(
name|expression
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|String
name|name
init|=
operator|(
operator|(
name|MethodInvocation
operator|)
name|expression
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
return|return
literal|"{{"
operator|+
name|name
operator|+
literal|"}}"
return|;
block|}
comment|// if its a qualified name (usually a constant field in another class)
comment|// then add a dummy value as we cannot find the field value in other classes and maybe even outside the
comment|// source code we have access to
if|if
condition|(
name|expression
operator|instanceof
name|QualifiedName
condition|)
block|{
name|QualifiedName
name|qn
init|=
operator|(
name|QualifiedName
operator|)
name|expression
decl_stmt|;
name|String
name|name
init|=
name|qn
operator|.
name|getFullyQualifiedName
argument_list|()
decl_stmt|;
return|return
literal|"{{"
operator|+
name|name
operator|+
literal|"}}"
return|;
block|}
if|if
condition|(
name|expression
operator|instanceof
name|SimpleName
condition|)
block|{
name|FieldSource
argument_list|<
name|JavaClassSource
argument_list|>
name|field
init|=
name|getField
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
operator|(
name|SimpleName
operator|)
name|expression
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
comment|// is the field annotated with a Camel endpoint
if|if
condition|(
name|field
operator|.
name|getAnnotations
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Annotation
name|ann
range|:
name|field
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
name|boolean
name|valid
init|=
literal|"org.apache.camel.EndpointInject"
operator|.
name|equals
argument_list|(
name|ann
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
operator|||
literal|"org.apache.camel.cdi.Uri"
operator|.
name|equals
argument_list|(
name|ann
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|valid
condition|)
block|{
name|Expression
name|exp
init|=
operator|(
name|Expression
operator|)
name|ann
operator|.
name|getInternal
argument_list|()
decl_stmt|;
if|if
condition|(
name|exp
operator|instanceof
name|SingleMemberAnnotation
condition|)
block|{
name|exp
operator|=
operator|(
operator|(
name|SingleMemberAnnotation
operator|)
name|exp
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exp
operator|instanceof
name|NormalAnnotation
condition|)
block|{
name|List
name|values
init|=
operator|(
operator|(
name|NormalAnnotation
operator|)
name|exp
operator|)
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
name|MemberValuePair
name|pair
init|=
operator|(
name|MemberValuePair
operator|)
name|value
decl_stmt|;
if|if
condition|(
literal|"uri"
operator|.
name|equals
argument_list|(
name|pair
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|exp
operator|=
name|pair
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|exp
operator|!=
literal|null
condition|)
block|{
return|return
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|exp
argument_list|)
return|;
block|}
block|}
block|}
block|}
comment|// is the field an org.apache.camel.Endpoint type?
if|if
condition|(
literal|"Endpoint"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
comment|// then grab the uri from the first argument
name|VariableDeclarationFragment
name|vdf
init|=
operator|(
name|VariableDeclarationFragment
operator|)
name|field
operator|.
name|getInternal
argument_list|()
decl_stmt|;
name|expression
operator|=
name|vdf
operator|.
name|getInitializer
argument_list|()
expr_stmt|;
if|if
condition|(
name|expression
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|MethodInvocation
name|mi
init|=
operator|(
name|MethodInvocation
operator|)
name|expression
decl_stmt|;
name|List
name|args
init|=
name|mi
operator|.
name|arguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// the first argument has the endpoint uri
name|expression
operator|=
operator|(
name|Expression
operator|)
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|expression
argument_list|)
return|;
block|}
block|}
block|}
else|else
block|{
comment|// no annotations so try its initializer
name|VariableDeclarationFragment
name|vdf
init|=
operator|(
name|VariableDeclarationFragment
operator|)
name|field
operator|.
name|getInternal
argument_list|()
decl_stmt|;
name|expression
operator|=
name|vdf
operator|.
name|getInitializer
argument_list|()
expr_stmt|;
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
comment|// its a field which has no initializer, then add a dummy value assuming the field will be initialized at runtime
return|return
literal|"{{"
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|"}}"
return|;
block|}
else|else
block|{
return|return
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|expression
argument_list|)
return|;
block|}
block|}
block|}
else|else
block|{
comment|// we could not find the field in this class/method, so its maybe from some other super class, so insert a dummy value
specifier|final
name|String
name|fieldName
init|=
operator|(
operator|(
name|SimpleName
operator|)
name|expression
operator|)
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
return|return
literal|"{{"
operator|+
name|fieldName
operator|+
literal|"}}"
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|expression
operator|instanceof
name|InfixExpression
condition|)
block|{
name|String
name|answer
init|=
literal|null
decl_stmt|;
comment|// is it a string that is concat together?
name|InfixExpression
name|ie
init|=
operator|(
name|InfixExpression
operator|)
name|expression
decl_stmt|;
if|if
condition|(
name|InfixExpression
operator|.
name|Operator
operator|.
name|PLUS
operator|.
name|equals
argument_list|(
name|ie
operator|.
name|getOperator
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|val1
init|=
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|ie
operator|.
name|getLeftOperand
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|val2
init|=
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|ie
operator|.
name|getRightOperand
argument_list|()
argument_list|)
decl_stmt|;
comment|// if numeric then we plus the values, otherwise we string concat
name|boolean
name|numeric
init|=
name|isNumericOperator
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|ie
operator|.
name|getLeftOperand
argument_list|()
argument_list|)
operator|&&
name|isNumericOperator
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|ie
operator|.
name|getRightOperand
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|numeric
condition|)
block|{
name|Long
name|num1
init|=
name|val1
operator|!=
literal|null
condition|?
name|Long
operator|.
name|valueOf
argument_list|(
name|val1
argument_list|)
else|:
literal|0
decl_stmt|;
name|Long
name|num2
init|=
name|val2
operator|!=
literal|null
condition|?
name|Long
operator|.
name|valueOf
argument_list|(
name|val2
argument_list|)
else|:
literal|0
decl_stmt|;
name|answer
operator|=
literal|""
operator|+
operator|(
name|num1
operator|+
name|num2
operator|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
operator|(
name|val1
operator|!=
literal|null
condition|?
name|val1
else|:
literal|""
operator|)
operator|+
operator|(
name|val2
operator|!=
literal|null
condition|?
name|val2
else|:
literal|""
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|answer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// include extended when we concat on 2 or more lines
name|List
name|extended
init|=
name|ie
operator|.
name|extendedOperands
argument_list|()
decl_stmt|;
if|if
condition|(
name|extended
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|ext
range|:
name|extended
control|)
block|{
name|String
name|val3
init|=
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
operator|(
name|Expression
operator|)
name|ext
argument_list|)
decl_stmt|;
if|if
condition|(
name|numeric
condition|)
block|{
name|Long
name|num3
init|=
name|val3
operator|!=
literal|null
condition|?
name|Long
operator|.
name|valueOf
argument_list|(
name|val3
argument_list|)
else|:
literal|0
decl_stmt|;
name|Long
name|num
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|answer
argument_list|)
decl_stmt|;
name|answer
operator|=
literal|""
operator|+
operator|(
name|num
operator|+
name|num3
operator|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|+=
name|val3
operator|!=
literal|null
condition|?
name|val3
else|:
literal|""
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|isNumericOperator (JavaClassSource clazz, Block block, Expression expression)
specifier|private
specifier|static
name|boolean
name|isNumericOperator
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|Block
name|block
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|instanceof
name|NumberLiteral
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|expression
operator|instanceof
name|SimpleName
condition|)
block|{
name|FieldSource
name|field
init|=
name|getField
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
operator|(
name|SimpleName
operator|)
name|expression
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
return|return
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isType
argument_list|(
literal|"int"
argument_list|)
operator|||
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isType
argument_list|(
literal|"long"
argument_list|)
operator|||
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isType
argument_list|(
literal|"Integer"
argument_list|)
operator|||
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isType
argument_list|(
literal|"Long"
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

