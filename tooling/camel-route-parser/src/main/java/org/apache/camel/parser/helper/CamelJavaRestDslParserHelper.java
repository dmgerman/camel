begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.parser.helper
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|helper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|model
operator|.
name|RestConfigurationDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|model
operator|.
name|RestServiceDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|model
operator|.
name|RestVerbDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|roaster
operator|.
name|StatementFieldSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|AnonymousClassDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|BooleanLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|ExpressionStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|FieldDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|InfixExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|MemberValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|MethodDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|MethodInvocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|NormalAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|NumberLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|ParenthesizedExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|QualifiedName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|SimpleName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|SingleMemberAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|StringLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|VariableDeclarationFragment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|_shade
operator|.
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|VariableDeclarationStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|FieldSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|JavaClassSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|MethodSource
import|;
end_import

begin_comment
comment|/**  * A Camel Java Rest DSL parser that only depends on the Roaster API.  *<p/>  * This implement is used for parsing the Camel routes and build a tree structure of the Rest DSL services.  */
end_comment

begin_class
DECL|class|CamelJavaRestDslParserHelper
specifier|public
specifier|final
class|class
name|CamelJavaRestDslParserHelper
block|{
DECL|method|parseRestConfiguration (JavaClassSource clazz, String baseDir, String fullyQualifiedFileName, MethodSource<JavaClassSource> configureMethod)
specifier|public
name|List
argument_list|<
name|RestConfigurationDetails
argument_list|>
name|parseRestConfiguration
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|String
name|baseDir
parameter_list|,
name|String
name|fullyQualifiedFileName
parameter_list|,
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|configureMethod
parameter_list|)
block|{
name|List
argument_list|<
name|RestConfigurationDetails
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|configureMethod
operator|!=
literal|null
condition|)
block|{
name|MethodDeclaration
name|md
init|=
operator|(
name|MethodDeclaration
operator|)
name|configureMethod
operator|.
name|getInternal
argument_list|()
decl_stmt|;
name|Block
name|block
init|=
name|md
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|block
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|statement
range|:
name|md
operator|.
name|getBody
argument_list|()
operator|.
name|statements
argument_list|()
control|)
block|{
comment|// must be a method call expression
if|if
condition|(
name|statement
operator|instanceof
name|ExpressionStatement
condition|)
block|{
name|ExpressionStatement
name|es
init|=
operator|(
name|ExpressionStatement
operator|)
name|statement
decl_stmt|;
name|Expression
name|exp
init|=
name|es
operator|.
name|getExpression
argument_list|()
decl_stmt|;
name|boolean
name|valid
init|=
name|isRestConfiguration
argument_list|(
name|exp
argument_list|)
decl_stmt|;
if|if
condition|(
name|valid
condition|)
block|{
name|RestConfigurationDetails
name|node
init|=
operator|new
name|RestConfigurationDetails
argument_list|()
decl_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// include source code details
name|int
name|pos
init|=
name|exp
operator|.
name|getStartPosition
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|findLineNumber
argument_list|(
name|fullyQualifiedFileName
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|>
operator|-
literal|1
condition|)
block|{
name|node
operator|.
name|setLineNumber
argument_list|(
literal|""
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
name|pos
operator|=
name|exp
operator|.
name|getStartPosition
argument_list|()
operator|+
name|exp
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|line
operator|=
name|findLineNumber
argument_list|(
name|fullyQualifiedFileName
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|>
operator|-
literal|1
condition|)
block|{
name|node
operator|.
name|setLineNumberEnd
argument_list|(
literal|""
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|setFileName
argument_list|(
name|fullyQualifiedFileName
argument_list|)
expr_stmt|;
name|node
operator|.
name|setClassName
argument_list|(
name|clazz
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setMethodName
argument_list|(
name|configureMethod
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|parseExpression
argument_list|(
name|node
argument_list|,
name|fullyQualifiedFileName
argument_list|,
name|clazz
argument_list|,
name|configureMethod
argument_list|,
name|block
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|parseRestService (JavaClassSource clazz, String baseDir, String fullyQualifiedFileName, MethodSource<JavaClassSource> configureMethod)
specifier|public
name|List
argument_list|<
name|RestServiceDetails
argument_list|>
name|parseRestService
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|String
name|baseDir
parameter_list|,
name|String
name|fullyQualifiedFileName
parameter_list|,
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|configureMethod
parameter_list|)
block|{
name|List
argument_list|<
name|RestServiceDetails
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|configureMethod
operator|!=
literal|null
condition|)
block|{
name|MethodDeclaration
name|md
init|=
operator|(
name|MethodDeclaration
operator|)
name|configureMethod
operator|.
name|getInternal
argument_list|()
decl_stmt|;
name|Block
name|block
init|=
name|md
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|block
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|statement
range|:
name|md
operator|.
name|getBody
argument_list|()
operator|.
name|statements
argument_list|()
control|)
block|{
comment|// must be a method call expression
if|if
condition|(
name|statement
operator|instanceof
name|ExpressionStatement
condition|)
block|{
name|ExpressionStatement
name|es
init|=
operator|(
name|ExpressionStatement
operator|)
name|statement
decl_stmt|;
name|Expression
name|exp
init|=
name|es
operator|.
name|getExpression
argument_list|()
decl_stmt|;
name|boolean
name|valid
init|=
name|isRest
argument_list|(
name|exp
argument_list|)
decl_stmt|;
if|if
condition|(
name|valid
condition|)
block|{
name|RestServiceDetails
name|node
init|=
operator|new
name|RestServiceDetails
argument_list|()
decl_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// include source code details
name|int
name|pos
init|=
name|exp
operator|.
name|getStartPosition
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|findLineNumber
argument_list|(
name|fullyQualifiedFileName
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|>
operator|-
literal|1
condition|)
block|{
name|node
operator|.
name|setLineNumber
argument_list|(
literal|""
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
name|pos
operator|=
name|exp
operator|.
name|getStartPosition
argument_list|()
operator|+
name|exp
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|line
operator|=
name|findLineNumber
argument_list|(
name|fullyQualifiedFileName
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|>
operator|-
literal|1
condition|)
block|{
name|node
operator|.
name|setLineNumberEnd
argument_list|(
literal|""
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|setFileName
argument_list|(
name|fullyQualifiedFileName
argument_list|)
expr_stmt|;
name|node
operator|.
name|setClassName
argument_list|(
name|clazz
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setMethodName
argument_list|(
name|configureMethod
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|parseExpression
argument_list|(
name|node
argument_list|,
literal|null
argument_list|,
name|fullyQualifiedFileName
argument_list|,
name|clazz
argument_list|,
name|configureMethod
argument_list|,
name|block
argument_list|,
name|exp
argument_list|)
expr_stmt|;
comment|// flip order of verbs as we parse bottom-up
if|if
condition|(
name|node
operator|.
name|getVerbs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Collections
operator|.
name|reverse
argument_list|(
name|node
operator|.
name|getVerbs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|isRestConfiguration (Expression exp)
specifier|private
name|boolean
name|isRestConfiguration
parameter_list|(
name|Expression
name|exp
parameter_list|)
block|{
name|String
name|rootMethodName
init|=
literal|null
decl_stmt|;
comment|// find out if this is from a Camel route (eg from, route etc.)
name|Expression
name|sub
init|=
name|exp
decl_stmt|;
while|while
condition|(
name|sub
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|sub
operator|=
operator|(
operator|(
name|MethodInvocation
operator|)
name|sub
operator|)
operator|.
name|getExpression
argument_list|()
expr_stmt|;
if|if
condition|(
name|sub
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|Expression
name|parent
init|=
operator|(
operator|(
name|MethodInvocation
operator|)
name|sub
operator|)
operator|.
name|getExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|sub
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|rootMethodName
operator|=
operator|(
operator|(
name|MethodInvocation
operator|)
name|sub
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|getIdentifier
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sub
operator|instanceof
name|SimpleName
condition|)
block|{
name|rootMethodName
operator|=
operator|(
operator|(
name|SimpleName
operator|)
name|sub
operator|)
operator|.
name|getIdentifier
argument_list|()
expr_stmt|;
block|}
comment|// must be from rest configuration
return|return
literal|"restConfiguration"
operator|.
name|equals
argument_list|(
name|rootMethodName
argument_list|)
return|;
block|}
DECL|method|isRest (Expression exp)
specifier|private
name|boolean
name|isRest
parameter_list|(
name|Expression
name|exp
parameter_list|)
block|{
name|String
name|rootMethodName
init|=
literal|null
decl_stmt|;
comment|// find out if this is from a Camel route (eg from, route etc.)
name|Expression
name|sub
init|=
name|exp
decl_stmt|;
while|while
condition|(
name|sub
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|sub
operator|=
operator|(
operator|(
name|MethodInvocation
operator|)
name|sub
operator|)
operator|.
name|getExpression
argument_list|()
expr_stmt|;
if|if
condition|(
name|sub
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|Expression
name|parent
init|=
operator|(
operator|(
name|MethodInvocation
operator|)
name|sub
operator|)
operator|.
name|getExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|sub
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|rootMethodName
operator|=
operator|(
operator|(
name|MethodInvocation
operator|)
name|sub
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|getIdentifier
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sub
operator|instanceof
name|SimpleName
condition|)
block|{
name|rootMethodName
operator|=
operator|(
operator|(
name|SimpleName
operator|)
name|sub
operator|)
operator|.
name|getIdentifier
argument_list|()
expr_stmt|;
block|}
comment|// must be from rest
return|return
literal|"rest"
operator|.
name|equals
argument_list|(
name|rootMethodName
argument_list|)
return|;
block|}
DECL|method|parseExpression (RestConfigurationDetails node, String fullyQualifiedFileName, JavaClassSource clazz, MethodSource<JavaClassSource> configureMethod, Block block, Expression exp)
specifier|private
name|void
name|parseExpression
parameter_list|(
name|RestConfigurationDetails
name|node
parameter_list|,
name|String
name|fullyQualifiedFileName
parameter_list|,
name|JavaClassSource
name|clazz
parameter_list|,
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|configureMethod
parameter_list|,
name|Block
name|block
parameter_list|,
name|Expression
name|exp
parameter_list|)
block|{
if|if
condition|(
name|exp
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|exp
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|MethodInvocation
name|mi
init|=
operator|(
name|MethodInvocation
operator|)
name|exp
decl_stmt|;
name|doParseRestConfiguration
argument_list|(
name|node
argument_list|,
name|fullyQualifiedFileName
argument_list|,
name|clazz
argument_list|,
name|configureMethod
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
expr_stmt|;
comment|// if the method was called on another method, then recursive
name|exp
operator|=
name|mi
operator|.
name|getExpression
argument_list|()
expr_stmt|;
name|parseExpression
argument_list|(
name|node
argument_list|,
name|fullyQualifiedFileName
argument_list|,
name|clazz
argument_list|,
name|configureMethod
argument_list|,
name|block
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseExpression (RestServiceDetails node, RestVerbDetails verb, String fullyQualifiedFileName, JavaClassSource clazz, MethodSource<JavaClassSource> configureMethod, Block block, Expression exp)
specifier|private
name|void
name|parseExpression
parameter_list|(
name|RestServiceDetails
name|node
parameter_list|,
name|RestVerbDetails
name|verb
parameter_list|,
name|String
name|fullyQualifiedFileName
parameter_list|,
name|JavaClassSource
name|clazz
parameter_list|,
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|configureMethod
parameter_list|,
name|Block
name|block
parameter_list|,
name|Expression
name|exp
parameter_list|)
block|{
if|if
condition|(
name|exp
operator|==
literal|null
condition|)
block|{
comment|// this rest service is not complete, if there is any details on verb then they are actually general
comment|// for this rest service and we should pass the details to it
if|if
condition|(
name|verb
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|setConsumes
argument_list|(
name|verb
operator|.
name|getConsumes
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProduces
argument_list|(
name|verb
operator|.
name|getProduces
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setSkipBindingOnErrorCode
argument_list|(
name|verb
operator|.
name|getSkipBindingOnErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setClientRequestValidation
argument_list|(
name|verb
operator|.
name|getClientRequestValidation
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setApiDocs
argument_list|(
name|verb
operator|.
name|getApiDocs
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setDescription
argument_list|(
name|verb
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|exp
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|MethodInvocation
name|mi
init|=
operator|(
name|MethodInvocation
operator|)
name|exp
decl_stmt|;
name|verb
operator|=
name|doParseRestService
argument_list|(
name|node
argument_list|,
name|verb
argument_list|,
name|fullyQualifiedFileName
argument_list|,
name|clazz
argument_list|,
name|configureMethod
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
expr_stmt|;
comment|// if the method was called on another method, then recursive
name|exp
operator|=
name|mi
operator|.
name|getExpression
argument_list|()
expr_stmt|;
name|parseExpression
argument_list|(
name|node
argument_list|,
name|verb
argument_list|,
name|fullyQualifiedFileName
argument_list|,
name|clazz
argument_list|,
name|configureMethod
argument_list|,
name|block
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doParseRestConfiguration (RestConfigurationDetails node, String fullyQualifiedFileName, JavaClassSource clazz, MethodSource<JavaClassSource> configureMethod, Block block, MethodInvocation mi)
specifier|private
name|void
name|doParseRestConfiguration
parameter_list|(
name|RestConfigurationDetails
name|node
parameter_list|,
name|String
name|fullyQualifiedFileName
parameter_list|,
name|JavaClassSource
name|clazz
parameter_list|,
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|configureMethod
parameter_list|,
name|Block
name|block
parameter_list|,
name|MethodInvocation
name|mi
parameter_list|)
block|{
comment|// end line number is the first node in the method chain we parse
if|if
condition|(
name|node
operator|.
name|getLineNumberEnd
argument_list|()
operator|==
literal|null
condition|)
block|{
name|int
name|pos
init|=
name|mi
operator|.
name|getStartPosition
argument_list|()
operator|+
name|mi
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|findLineNumber
argument_list|(
name|fullyQualifiedFileName
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|>
operator|-
literal|1
condition|)
block|{
name|node
operator|.
name|setLineNumberEnd
argument_list|(
literal|""
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|name
init|=
name|mi
operator|.
name|getName
argument_list|()
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"component"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setComponent
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"apiComponent"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setApiComponent
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"producerComponent"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setProducerComponent
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"scheme"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setScheme
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"host"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setHost
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"apiHost"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setApiHost
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"port"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setPort
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"producerApiDoc"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setProducerApiDoc
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"contextPath"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setContextPath
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"apiContextPath"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setApiContextPath
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"apiContextRouteId"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setApiContextRouteId
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"apiContextIdPattern"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setApiContextIdPattern
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"apiContextListening"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setApiContextListening
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"apiVendorExtension"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setApiVendorExtension
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"hostNameResolver"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setHostNameResolver
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"bindingMode"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setBindingMode
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"skipBindingOnErrorCode"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setSkipBindingOnErrorCode
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"clientRequestValidation"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setClientRequestValidation
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"enableCORS"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setEnableCORS
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"jsonDataFormat"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setJsonDataFormat
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"xmlDataFormat"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setXmlDataFormat
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"componentProperty"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|extractValueFromSecondArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
decl_stmt|;
name|node
operator|.
name|addComponentProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"endpointProperty"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|extractValueFromSecondArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
decl_stmt|;
name|node
operator|.
name|addEndpointProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"consumerProperty"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|extractValueFromSecondArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
decl_stmt|;
name|node
operator|.
name|addConsumerProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"dataFormatProperty"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|extractValueFromSecondArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
decl_stmt|;
name|node
operator|.
name|addDataFormatProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"apiProperty"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|extractValueFromSecondArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
decl_stmt|;
name|node
operator|.
name|addApiProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"corsHeaderProperty"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|extractValueFromSecondArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
decl_stmt|;
name|node
operator|.
name|addCorsHeader
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doParseRestService (RestServiceDetails node, RestVerbDetails verb, String fullyQualifiedFileName, JavaClassSource clazz, MethodSource<JavaClassSource> configureMethod, Block block, MethodInvocation mi)
specifier|private
name|RestVerbDetails
name|doParseRestService
parameter_list|(
name|RestServiceDetails
name|node
parameter_list|,
name|RestVerbDetails
name|verb
parameter_list|,
name|String
name|fullyQualifiedFileName
parameter_list|,
name|JavaClassSource
name|clazz
parameter_list|,
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|configureMethod
parameter_list|,
name|Block
name|block
parameter_list|,
name|MethodInvocation
name|mi
parameter_list|)
block|{
comment|// end line number is the first node in the method chain we parse
if|if
condition|(
name|node
operator|.
name|getLineNumberEnd
argument_list|()
operator|==
literal|null
condition|)
block|{
name|int
name|pos
init|=
name|mi
operator|.
name|getStartPosition
argument_list|()
operator|+
name|mi
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|findLineNumber
argument_list|(
name|fullyQualifiedFileName
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|>
operator|-
literal|1
condition|)
block|{
name|node
operator|.
name|setLineNumberEnd
argument_list|(
literal|""
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|name
init|=
name|mi
operator|.
name|getName
argument_list|()
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"rest"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setPath
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isParentMethod
argument_list|(
name|mi
argument_list|,
literal|"rest"
argument_list|)
condition|)
block|{
name|verb
operator|=
name|doParseRestVerb
argument_list|(
name|node
argument_list|,
name|verb
argument_list|,
name|clazz
argument_list|,
name|configureMethod
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
expr_stmt|;
block|}
return|return
name|verb
return|;
block|}
DECL|method|doParseRestVerb (RestServiceDetails node, RestVerbDetails verb, JavaClassSource clazz, MethodSource<JavaClassSource> configureMethod, Block block, MethodInvocation mi)
specifier|private
name|RestVerbDetails
name|doParseRestVerb
parameter_list|(
name|RestServiceDetails
name|node
parameter_list|,
name|RestVerbDetails
name|verb
parameter_list|,
name|JavaClassSource
name|clazz
parameter_list|,
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|configureMethod
parameter_list|,
name|Block
name|block
parameter_list|,
name|MethodInvocation
name|mi
parameter_list|)
block|{
if|if
condition|(
name|verb
operator|==
literal|null
condition|)
block|{
name|verb
operator|=
operator|new
name|RestVerbDetails
argument_list|()
expr_stmt|;
block|}
name|String
name|name
init|=
name|mi
operator|.
name|getName
argument_list|()
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"description"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|verb
operator|.
name|setDescription
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"bindingMode"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|verb
operator|.
name|setBindingMode
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"skipBindingOnErrorcode"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|verb
operator|.
name|setSkipBindingOnErrorCode
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"clientRequestValidation"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|verb
operator|.
name|setClientRequestValidation
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"consumes"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|verb
operator|.
name|setConsumes
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"produces"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|verb
operator|.
name|setProduces
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"type"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|verb
operator|.
name|setType
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"outType"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|verb
operator|.
name|setOutType
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"apiDocs"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|verb
operator|.
name|setApiDocs
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"to"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|verb
operator|.
name|setTo
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"toD"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|verb
operator|.
name|setToD
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"tag"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// tag is only available on the node
name|node
operator|.
name|setTag
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"delete"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|addVerb
argument_list|(
name|verb
argument_list|)
expr_stmt|;
name|verb
operator|.
name|setMethod
argument_list|(
literal|"delete"
argument_list|)
expr_stmt|;
name|verb
operator|.
name|setUri
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
name|verb
operator|=
literal|null
expr_stmt|;
comment|// reset as this verb is not complete
block|}
elseif|else
if|if
condition|(
literal|"get"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|addVerb
argument_list|(
name|verb
argument_list|)
expr_stmt|;
name|verb
operator|.
name|setMethod
argument_list|(
literal|"get"
argument_list|)
expr_stmt|;
name|verb
operator|.
name|setUri
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
name|verb
operator|=
literal|null
expr_stmt|;
comment|// reset as this verb is not complete
block|}
elseif|else
if|if
condition|(
literal|"head"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|addVerb
argument_list|(
name|verb
argument_list|)
expr_stmt|;
name|verb
operator|.
name|setMethod
argument_list|(
literal|"head"
argument_list|)
expr_stmt|;
name|verb
operator|.
name|setUri
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
name|verb
operator|=
literal|null
expr_stmt|;
comment|// reset as this verb is not complete
block|}
elseif|else
if|if
condition|(
literal|"patch"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|addVerb
argument_list|(
name|verb
argument_list|)
expr_stmt|;
name|verb
operator|.
name|setMethod
argument_list|(
literal|"patch"
argument_list|)
expr_stmt|;
name|verb
operator|.
name|setUri
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
name|verb
operator|=
literal|null
expr_stmt|;
comment|// reset as this verb is not complete
block|}
elseif|else
if|if
condition|(
literal|"post"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|addVerb
argument_list|(
name|verb
argument_list|)
expr_stmt|;
name|verb
operator|.
name|setMethod
argument_list|(
literal|"post"
argument_list|)
expr_stmt|;
name|verb
operator|.
name|setUri
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
name|verb
operator|=
literal|null
expr_stmt|;
comment|// reset as this verb is not complete
block|}
elseif|else
if|if
condition|(
literal|"put"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|addVerb
argument_list|(
name|verb
argument_list|)
expr_stmt|;
name|verb
operator|.
name|setMethod
argument_list|(
literal|"put"
argument_list|)
expr_stmt|;
name|verb
operator|.
name|setUri
argument_list|(
name|extractValueFromFirstArgument
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|mi
argument_list|)
argument_list|)
expr_stmt|;
name|verb
operator|=
literal|null
expr_stmt|;
comment|// reset as this verb is not complete
block|}
return|return
name|verb
return|;
block|}
DECL|method|isParentMethod (MethodInvocation mi, String parentName)
specifier|private
specifier|static
name|boolean
name|isParentMethod
parameter_list|(
name|MethodInvocation
name|mi
parameter_list|,
name|String
name|parentName
parameter_list|)
block|{
name|String
name|name
init|=
name|mi
operator|.
name|getName
argument_list|()
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// find out if this is from a Camel route (eg from, route etc.)
name|Expression
name|sub
init|=
name|mi
decl_stmt|;
while|while
condition|(
name|sub
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|sub
operator|=
operator|(
operator|(
name|MethodInvocation
operator|)
name|sub
operator|)
operator|.
name|getExpression
argument_list|()
expr_stmt|;
if|if
condition|(
name|sub
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|name
operator|=
operator|(
operator|(
name|MethodInvocation
operator|)
name|sub
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|getIdentifier
argument_list|()
expr_stmt|;
if|if
condition|(
name|parentName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|extractValueFromFirstArgument (JavaClassSource clazz, Block block, MethodInvocation mi)
specifier|private
specifier|static
name|String
name|extractValueFromFirstArgument
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|Block
name|block
parameter_list|,
name|MethodInvocation
name|mi
parameter_list|)
block|{
name|List
name|args
init|=
name|mi
operator|.
name|arguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Expression
name|exp
init|=
operator|(
name|Expression
operator|)
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|exp
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|extractValueFromSecondArgument (JavaClassSource clazz, Block block, MethodInvocation mi)
specifier|private
specifier|static
name|String
name|extractValueFromSecondArgument
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|Block
name|block
parameter_list|,
name|MethodInvocation
name|mi
parameter_list|)
block|{
name|List
name|args
init|=
name|mi
operator|.
name|arguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|Expression
name|exp
init|=
operator|(
name|Expression
operator|)
name|args
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
return|return
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|exp
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getField (JavaClassSource clazz, Block block, SimpleName ref)
specifier|private
specifier|static
name|FieldSource
argument_list|<
name|JavaClassSource
argument_list|>
name|getField
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|Block
name|block
parameter_list|,
name|SimpleName
name|ref
parameter_list|)
block|{
name|String
name|fieldName
init|=
name|ref
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|!=
literal|null
condition|)
block|{
comment|// find field in class
name|FieldSource
name|field
init|=
name|clazz
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|field
operator|=
name|findFieldInBlock
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
return|return
name|field
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|findFieldInBlock (JavaClassSource clazz, Block block, String fieldName)
specifier|private
specifier|static
name|FieldSource
argument_list|<
name|JavaClassSource
argument_list|>
name|findFieldInBlock
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|Block
name|block
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
for|for
control|(
name|Object
name|statement
range|:
name|block
operator|.
name|statements
argument_list|()
control|)
block|{
comment|// try local statements first in the block
if|if
condition|(
name|statement
operator|instanceof
name|VariableDeclarationStatement
condition|)
block|{
specifier|final
name|Type
name|type
init|=
operator|(
operator|(
name|VariableDeclarationStatement
operator|)
name|statement
operator|)
operator|.
name|getType
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
operator|(
operator|(
name|VariableDeclarationStatement
operator|)
name|statement
operator|)
operator|.
name|fragments
argument_list|()
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|VariableDeclarationFragment
condition|)
block|{
name|VariableDeclarationFragment
name|fragment
init|=
operator|(
name|VariableDeclarationFragment
operator|)
name|obj
decl_stmt|;
name|SimpleName
name|name
init|=
name|fragment
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|fieldName
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getIdentifier
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|StatementFieldSource
argument_list|(
name|clazz
argument_list|,
name|fragment
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
block|}
block|}
comment|// okay the field may be burried inside an anonymous inner class as a field declaration
comment|// outside the configure method, so lets go back to the parent and see what we can find
name|ASTNode
name|node
init|=
name|block
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|MethodDeclaration
condition|)
block|{
name|node
operator|=
name|node
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|instanceof
name|AnonymousClassDeclaration
condition|)
block|{
name|List
name|declarations
init|=
operator|(
operator|(
name|AnonymousClassDeclaration
operator|)
name|node
operator|)
operator|.
name|bodyDeclarations
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|dec
range|:
name|declarations
control|)
block|{
if|if
condition|(
name|dec
operator|instanceof
name|FieldDeclaration
condition|)
block|{
name|FieldDeclaration
name|fd
init|=
operator|(
name|FieldDeclaration
operator|)
name|dec
decl_stmt|;
specifier|final
name|Type
name|type
init|=
name|fd
operator|.
name|getType
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|fd
operator|.
name|fragments
argument_list|()
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|VariableDeclarationFragment
condition|)
block|{
name|VariableDeclarationFragment
name|fragment
init|=
operator|(
name|VariableDeclarationFragment
operator|)
name|obj
decl_stmt|;
name|SimpleName
name|name
init|=
name|fragment
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|fieldName
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getIdentifier
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|StatementFieldSource
argument_list|(
name|clazz
argument_list|,
name|fragment
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getLiteralValue (JavaClassSource clazz, Block block, Expression expression)
specifier|public
specifier|static
name|String
name|getLiteralValue
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|Block
name|block
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
comment|// unwrap parenthesis
if|if
condition|(
name|expression
operator|instanceof
name|ParenthesizedExpression
condition|)
block|{
name|expression
operator|=
operator|(
operator|(
name|ParenthesizedExpression
operator|)
name|expression
operator|)
operator|.
name|getExpression
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|expression
operator|instanceof
name|StringLiteral
condition|)
block|{
return|return
operator|(
operator|(
name|StringLiteral
operator|)
name|expression
operator|)
operator|.
name|getLiteralValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|expression
operator|instanceof
name|BooleanLiteral
condition|)
block|{
return|return
literal|""
operator|+
operator|(
operator|(
name|BooleanLiteral
operator|)
name|expression
operator|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|expression
operator|instanceof
name|NumberLiteral
condition|)
block|{
return|return
operator|(
operator|(
name|NumberLiteral
operator|)
name|expression
operator|)
operator|.
name|getToken
argument_list|()
return|;
block|}
comment|// if it a method invocation then add a dummy value assuming the method invocation will return a valid response
if|if
condition|(
name|expression
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|String
name|name
init|=
operator|(
operator|(
name|MethodInvocation
operator|)
name|expression
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
return|return
literal|"{{"
operator|+
name|name
operator|+
literal|"}}"
return|;
block|}
comment|// if its a qualified name, then its an enum where we should grab the simple name
if|if
condition|(
name|expression
operator|instanceof
name|QualifiedName
condition|)
block|{
name|QualifiedName
name|qn
init|=
operator|(
name|QualifiedName
operator|)
name|expression
decl_stmt|;
return|return
name|qn
operator|.
name|getName
argument_list|()
operator|.
name|getIdentifier
argument_list|()
return|;
block|}
if|if
condition|(
name|expression
operator|instanceof
name|SimpleName
condition|)
block|{
name|FieldSource
argument_list|<
name|JavaClassSource
argument_list|>
name|field
init|=
name|getField
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
operator|(
name|SimpleName
operator|)
name|expression
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
comment|// is the field annotated with a Camel endpoint
if|if
condition|(
name|field
operator|.
name|getAnnotations
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Annotation
name|ann
range|:
name|field
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
name|boolean
name|valid
init|=
literal|"org.apache.camel.EndpointInject"
operator|.
name|equals
argument_list|(
name|ann
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
operator|||
literal|"org.apache.camel.cdi.Uri"
operator|.
name|equals
argument_list|(
name|ann
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|valid
condition|)
block|{
name|Expression
name|exp
init|=
operator|(
name|Expression
operator|)
name|ann
operator|.
name|getInternal
argument_list|()
decl_stmt|;
if|if
condition|(
name|exp
operator|instanceof
name|SingleMemberAnnotation
condition|)
block|{
name|exp
operator|=
operator|(
operator|(
name|SingleMemberAnnotation
operator|)
name|exp
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exp
operator|instanceof
name|NormalAnnotation
condition|)
block|{
name|List
name|values
init|=
operator|(
operator|(
name|NormalAnnotation
operator|)
name|exp
operator|)
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
name|MemberValuePair
name|pair
init|=
operator|(
name|MemberValuePair
operator|)
name|value
decl_stmt|;
if|if
condition|(
literal|"uri"
operator|.
name|equals
argument_list|(
name|pair
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|exp
operator|=
name|pair
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|exp
operator|!=
literal|null
condition|)
block|{
return|return
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|exp
argument_list|)
return|;
block|}
block|}
block|}
block|}
comment|// is the field an org.apache.camel.Endpoint type?
if|if
condition|(
literal|"Endpoint"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
comment|// then grab the uri from the first argument
name|VariableDeclarationFragment
name|vdf
init|=
operator|(
name|VariableDeclarationFragment
operator|)
name|field
operator|.
name|getInternal
argument_list|()
decl_stmt|;
name|expression
operator|=
name|vdf
operator|.
name|getInitializer
argument_list|()
expr_stmt|;
if|if
condition|(
name|expression
operator|instanceof
name|MethodInvocation
condition|)
block|{
name|MethodInvocation
name|mi
init|=
operator|(
name|MethodInvocation
operator|)
name|expression
decl_stmt|;
name|List
name|args
init|=
name|mi
operator|.
name|arguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// the first argument has the endpoint uri
name|expression
operator|=
operator|(
name|Expression
operator|)
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|expression
argument_list|)
return|;
block|}
block|}
block|}
else|else
block|{
comment|// no annotations so try its initializer
name|VariableDeclarationFragment
name|vdf
init|=
operator|(
name|VariableDeclarationFragment
operator|)
name|field
operator|.
name|getInternal
argument_list|()
decl_stmt|;
name|expression
operator|=
name|vdf
operator|.
name|getInitializer
argument_list|()
expr_stmt|;
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
comment|// its a field which has no initializer, then add a dummy value assuming the field will be initialized at runtime
return|return
literal|"{{"
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|"}}"
return|;
block|}
else|else
block|{
return|return
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|expression
argument_list|)
return|;
block|}
block|}
block|}
else|else
block|{
comment|// we could not find the field in this class/method, so its maybe from some other super class, so insert a dummy value
specifier|final
name|String
name|fieldName
init|=
operator|(
operator|(
name|SimpleName
operator|)
name|expression
operator|)
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
return|return
literal|"{{"
operator|+
name|fieldName
operator|+
literal|"}}"
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|expression
operator|instanceof
name|InfixExpression
condition|)
block|{
name|String
name|answer
init|=
literal|null
decl_stmt|;
comment|// is it a string that is concat together?
name|InfixExpression
name|ie
init|=
operator|(
name|InfixExpression
operator|)
name|expression
decl_stmt|;
if|if
condition|(
name|InfixExpression
operator|.
name|Operator
operator|.
name|PLUS
operator|.
name|equals
argument_list|(
name|ie
operator|.
name|getOperator
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|val1
init|=
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|ie
operator|.
name|getLeftOperand
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|val2
init|=
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|ie
operator|.
name|getRightOperand
argument_list|()
argument_list|)
decl_stmt|;
comment|// if numeric then we plus the values, otherwise we string concat
name|boolean
name|numeric
init|=
name|isNumericOperator
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|ie
operator|.
name|getLeftOperand
argument_list|()
argument_list|)
operator|&&
name|isNumericOperator
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
name|ie
operator|.
name|getRightOperand
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|numeric
condition|)
block|{
name|Long
name|num1
init|=
name|val1
operator|!=
literal|null
condition|?
name|Long
operator|.
name|valueOf
argument_list|(
name|val1
argument_list|)
else|:
literal|0
decl_stmt|;
name|Long
name|num2
init|=
name|val2
operator|!=
literal|null
condition|?
name|Long
operator|.
name|valueOf
argument_list|(
name|val2
argument_list|)
else|:
literal|0
decl_stmt|;
name|answer
operator|=
literal|""
operator|+
operator|(
name|num1
operator|+
name|num2
operator|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
operator|(
name|val1
operator|!=
literal|null
condition|?
name|val1
else|:
literal|""
operator|)
operator|+
operator|(
name|val2
operator|!=
literal|null
condition|?
name|val2
else|:
literal|""
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|answer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// include extended when we concat on 2 or more lines
name|List
name|extended
init|=
name|ie
operator|.
name|extendedOperands
argument_list|()
decl_stmt|;
if|if
condition|(
name|extended
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|ext
range|:
name|extended
control|)
block|{
name|String
name|val3
init|=
name|getLiteralValue
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
operator|(
name|Expression
operator|)
name|ext
argument_list|)
decl_stmt|;
if|if
condition|(
name|numeric
condition|)
block|{
name|Long
name|num3
init|=
name|val3
operator|!=
literal|null
condition|?
name|Long
operator|.
name|valueOf
argument_list|(
name|val3
argument_list|)
else|:
literal|0
decl_stmt|;
name|Long
name|num
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|answer
argument_list|)
decl_stmt|;
name|answer
operator|=
literal|""
operator|+
operator|(
name|num
operator|+
name|num3
operator|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|+=
name|val3
operator|!=
literal|null
condition|?
name|val3
else|:
literal|""
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|isNumericOperator (JavaClassSource clazz, Block block, Expression expression)
specifier|private
specifier|static
name|boolean
name|isNumericOperator
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|Block
name|block
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|instanceof
name|NumberLiteral
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|expression
operator|instanceof
name|SimpleName
condition|)
block|{
name|FieldSource
name|field
init|=
name|getField
argument_list|(
name|clazz
argument_list|,
name|block
argument_list|,
operator|(
name|SimpleName
operator|)
name|expression
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
return|return
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isType
argument_list|(
literal|"int"
argument_list|)
operator|||
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isType
argument_list|(
literal|"long"
argument_list|)
operator|||
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isType
argument_list|(
literal|"Integer"
argument_list|)
operator|||
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isType
argument_list|(
literal|"Long"
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|findLineNumber (String fullyQualifiedFileName, int position)
specifier|private
specifier|static
name|int
name|findLineNumber
parameter_list|(
name|String
name|fullyQualifiedFileName
parameter_list|,
name|int
name|position
parameter_list|)
block|{
name|int
name|lines
init|=
literal|0
decl_stmt|;
try|try
block|{
name|int
name|current
init|=
literal|0
decl_stmt|;
try|try
init|(
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
operator|new
name|File
argument_list|(
name|fullyQualifiedFileName
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|lines
operator|++
expr_stmt|;
name|current
operator|+=
name|line
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
comment|// add 1 for line feed
if|if
condition|(
name|current
operator|>=
name|position
condition|)
block|{
return|return
name|lines
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
return|return
operator|-
literal|1
return|;
block|}
return|return
name|lines
return|;
block|}
block|}
end_class

end_unit

