begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * The binding of how Camel messages get mapped to Apache CXF and back again  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|CxfBinding
specifier|public
class|class
name|CxfBinding
block|{
DECL|method|extractBodyFromCxf (CxfExchange exchange, Message message)
specifier|public
name|Object
name|extractBodyFromCxf
parameter_list|(
name|CxfExchange
name|exchange
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
comment|//  TODO how do we choose a format?
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|contentFormats
init|=
name|message
operator|.
name|getContentFormats
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|contentFormat
range|:
name|contentFormats
control|)
block|{
name|Object
name|answer
init|=
name|message
operator|.
name|get
argument_list|(
name|contentFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
return|return
name|answer
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

