begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support.jsse
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A representation of configuration options for creating and loading a  * {@link KeyStore} instance.  */
end_comment

begin_class
DECL|class|KeyStoreParameters
specifier|public
class|class
name|KeyStoreParameters
extends|extends
name|JsseParameters
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KeyStoreParameters
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The optional type of the key store to load. See Appendix A in the       *<a href="http://download.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html#KeyStore">      * Java Cryptography Architecture Standard Algorithm Name Documentation</a> for more information on standard names.      */
DECL|field|type
specifier|protected
name|String
name|type
decl_stmt|;
comment|/**      * The optional password for reading/opening/verifying the key store.      */
DECL|field|password
specifier|protected
name|String
name|password
decl_stmt|;
comment|/**      * The optional provider identifier for instantiating the key store.      */
DECL|field|provider
specifier|protected
name|String
name|provider
decl_stmt|;
comment|/**      * The optional file path, class path resource, or URL of the resource      * used to load the key store.      */
DECL|field|resource
specifier|protected
name|String
name|resource
decl_stmt|;
comment|/**      * @see #setType(String)      */
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Sets the type of the key store to create and load. See Appendix A in the      *<a href="http://download.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html#KeyStore"      *>Java Cryptography Architecture Standard Algorithm Name      * Documentation</a> for more information on standard names.      *       * @param value the key store type identifier (may be {@code null})      */
DECL|method|setType (String value)
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * @see #getPassword()      */
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
comment|/**      * Set the optional password for reading/opening/verifying the key store.      *       * @param value the password value (may be {@code null})      */
DECL|method|setPassword (String value)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * @see #setProvider(String)      */
DECL|method|getProvider ()
specifier|public
name|String
name|getProvider
parameter_list|()
block|{
return|return
name|provider
return|;
block|}
comment|/**      * Sets the optional provider identifier for instantiating the key store.      *      * @param value the provider identifier (may be {@code null})      *      * @see Security#getProviders()      */
DECL|method|setProvider (String value)
specifier|public
name|void
name|setProvider
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|provider
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * @see #getResource()      */
DECL|method|getResource ()
specifier|public
name|String
name|getResource
parameter_list|()
block|{
return|return
name|resource
return|;
block|}
comment|/**      * Sets the optional file path, class path resource, or URL of the resource      * used to load the key store.      *       * @param value the resource (may be {@code null})      */
DECL|method|setResource (String value)
specifier|public
name|void
name|setResource
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Creates a {@link KeyStoreParameters} instance based off of the configuration state      * of this instance. If {@link #getType()} returns {@code null}, the default      * key store type is loaded, otherwise the type will be of that specified.      *<p/>      * The created instance will always be loaded, but if the type requires an      * input stream and {@link #getResource()} returns {@code null}, the      * instance will be empty. The loading of the resource, if not {@code null},      * is attempted by treating the resource as a file path, a class path      * resource, and a URL in that order. An exception is thrown if the resource      * cannot be resolved to readable input stream using any of the above      * methods.      *       * @return a configured and loaded key store      * @throws GeneralSecurityException if there is an error creating an instance      *             with the given configuration      * @throws IOException if there is an error resolving the configured      *             resource to an input stream      */
DECL|method|createKeyStore ()
specifier|public
name|KeyStore
name|createKeyStore
parameter_list|()
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Creating KeyStore instance from KeyStoreParameters [{}]."
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|String
name|ksType
init|=
name|this
operator|.
name|parsePropertyValue
argument_list|(
name|this
operator|.
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|ksType
operator|==
literal|null
condition|)
block|{
name|ksType
operator|=
name|KeyStore
operator|.
name|getDefaultType
argument_list|()
expr_stmt|;
block|}
name|char
index|[]
name|ksPassword
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|password
operator|!=
literal|null
condition|)
block|{
name|ksPassword
operator|=
name|this
operator|.
name|parsePropertyValue
argument_list|(
name|this
operator|.
name|password
argument_list|)
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
block|}
name|KeyStore
name|ks
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|provider
operator|==
literal|null
condition|)
block|{
name|ks
operator|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|ksType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ks
operator|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|ksType
argument_list|,
name|this
operator|.
name|parsePropertyValue
argument_list|(
name|this
operator|.
name|provider
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|resource
operator|==
literal|null
condition|)
block|{
name|ks
operator|.
name|load
argument_list|(
literal|null
argument_list|,
name|ksPassword
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|InputStream
name|is
init|=
name|this
operator|.
name|resolveResource
argument_list|(
name|this
operator|.
name|parsePropertyValue
argument_list|(
name|this
operator|.
name|resource
argument_list|)
argument_list|)
decl_stmt|;
name|ks
operator|.
name|load
argument_list|(
name|is
argument_list|,
name|ksPassword
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|aliases
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|String
argument_list|>
name|aliasEnum
init|=
name|ks
operator|.
name|aliases
argument_list|()
decl_stmt|;
while|while
condition|(
name|aliasEnum
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|aliases
operator|.
name|add
argument_list|(
name|aliasEnum
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"KeyStore [{}], initialized from [{}], is using provider [{}], has type [{}], and contains aliases {}."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|ks
block|,
name|this
block|,
name|ks
operator|.
name|getProvider
argument_list|()
block|,
name|ks
operator|.
name|getType
argument_list|()
block|,
name|aliases
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|ks
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"KeyStoreParameters[type="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", password="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"********"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", provider="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", resource="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

