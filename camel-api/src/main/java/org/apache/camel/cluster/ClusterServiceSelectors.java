begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.cluster
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|ClusterServiceSelectors
specifier|public
specifier|final
class|class
name|ClusterServiceSelectors
block|{
DECL|field|DEFAULT_SELECTOR
specifier|public
specifier|static
specifier|final
name|CamelClusterService
operator|.
name|Selector
name|DEFAULT_SELECTOR
init|=
operator|new
name|SelectSingle
argument_list|()
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClusterServiceSelectors
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ClusterServiceSelectors ()
specifier|private
name|ClusterServiceSelectors
parameter_list|()
block|{     }
DECL|class|SelectSingle
specifier|public
specifier|static
specifier|final
class|class
name|SelectSingle
implements|implements
name|CamelClusterService
operator|.
name|Selector
block|{
annotation|@
name|Override
DECL|method|select (Collection<CamelClusterService> services)
specifier|public
name|Optional
argument_list|<
name|CamelClusterService
argument_list|>
name|select
parameter_list|(
name|Collection
argument_list|<
name|CamelClusterService
argument_list|>
name|services
parameter_list|)
block|{
if|if
condition|(
name|services
operator|!=
literal|null
operator|&&
name|services
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|services
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Multiple CamelClusterService instances available (items={})"
argument_list|,
name|services
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
DECL|class|SelectFirst
specifier|public
specifier|static
specifier|final
class|class
name|SelectFirst
implements|implements
name|CamelClusterService
operator|.
name|Selector
block|{
annotation|@
name|Override
DECL|method|select (Collection<CamelClusterService> services)
specifier|public
name|Optional
argument_list|<
name|CamelClusterService
argument_list|>
name|select
parameter_list|(
name|Collection
argument_list|<
name|CamelClusterService
argument_list|>
name|services
parameter_list|)
block|{
return|return
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|services
argument_list|)
condition|?
name|Optional
operator|.
name|of
argument_list|(
name|services
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
else|:
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
DECL|class|SelectByOrder
specifier|public
specifier|static
specifier|final
class|class
name|SelectByOrder
implements|implements
name|CamelClusterService
operator|.
name|Selector
block|{
annotation|@
name|Override
DECL|method|select (Collection<CamelClusterService> services)
specifier|public
name|Optional
argument_list|<
name|CamelClusterService
argument_list|>
name|select
parameter_list|(
name|Collection
argument_list|<
name|CamelClusterService
argument_list|>
name|services
parameter_list|)
block|{
name|Optional
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|CamelClusterService
argument_list|>
argument_list|>
argument_list|>
name|highPriorityServices
init|=
name|services
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|CamelClusterService
operator|::
name|getOrder
argument_list|)
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|min
argument_list|(
name|Comparator
operator|.
name|comparingInt
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getKey
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|highPriorityServices
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
name|highPriorityServices
operator|.
name|get
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|highPriorityServices
operator|.
name|get
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Multiple CamelClusterService instances available for highest priority (order={}, items={})"
argument_list|,
name|highPriorityServices
operator|.
name|get
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|,
name|highPriorityServices
operator|.
name|get
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
DECL|class|SelectByType
specifier|public
specifier|static
specifier|final
class|class
name|SelectByType
implements|implements
name|CamelClusterService
operator|.
name|Selector
block|{
DECL|field|type
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|CamelClusterService
argument_list|>
name|type
decl_stmt|;
DECL|method|SelectByType (Class<? extends CamelClusterService> type)
specifier|public
name|SelectByType
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|CamelClusterService
argument_list|>
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|select (Collection<CamelClusterService> services)
specifier|public
name|Optional
argument_list|<
name|CamelClusterService
argument_list|>
name|select
parameter_list|(
name|Collection
argument_list|<
name|CamelClusterService
argument_list|>
name|services
parameter_list|)
block|{
for|for
control|(
name|CamelClusterService
name|service
range|:
name|services
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|service
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|service
argument_list|)
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
DECL|class|SelectByAttribute
specifier|public
specifier|static
specifier|final
class|class
name|SelectByAttribute
implements|implements
name|CamelClusterService
operator|.
name|Selector
block|{
DECL|field|key
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|Object
name|value
decl_stmt|;
DECL|method|SelectByAttribute (String key, Object value)
specifier|public
name|SelectByAttribute
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|select (Collection<CamelClusterService> services)
specifier|public
name|Optional
argument_list|<
name|CamelClusterService
argument_list|>
name|select
parameter_list|(
name|Collection
argument_list|<
name|CamelClusterService
argument_list|>
name|services
parameter_list|)
block|{
for|for
control|(
name|CamelClusterService
name|service
range|:
name|services
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attributes
init|=
name|service
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|attributes
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|value
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|service
argument_list|)
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
comment|// **********************************
comment|// Helpers
comment|// **********************************
DECL|method|defaultSelector ()
specifier|public
specifier|static
name|CamelClusterService
operator|.
name|Selector
name|defaultSelector
parameter_list|()
block|{
return|return
name|DEFAULT_SELECTOR
return|;
block|}
DECL|method|single ()
specifier|public
specifier|static
name|CamelClusterService
operator|.
name|Selector
name|single
parameter_list|()
block|{
return|return
operator|new
name|SelectSingle
argument_list|()
return|;
block|}
DECL|method|first ()
specifier|public
specifier|static
name|CamelClusterService
operator|.
name|Selector
name|first
parameter_list|()
block|{
return|return
operator|new
name|SelectFirst
argument_list|()
return|;
block|}
DECL|method|order ()
specifier|public
specifier|static
name|CamelClusterService
operator|.
name|Selector
name|order
parameter_list|()
block|{
return|return
operator|new
name|SelectByOrder
argument_list|()
return|;
block|}
DECL|method|type (Class<? extends CamelClusterService> type)
specifier|public
specifier|static
name|CamelClusterService
operator|.
name|Selector
name|type
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|CamelClusterService
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|SelectByType
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|attribute (String key, Object value)
specifier|public
specifier|static
name|CamelClusterService
operator|.
name|Selector
name|attribute
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|new
name|SelectByAttribute
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
end_class

end_unit

